diff '--color=auto' -burP lab6_origin/kern/debug/kdebug.c lab6/kern/debug/kdebug.c
--- lab6_origin/kern/debug/kdebug.c	2021-02-07 16:11:21.000000000 +0800
+++ lab6/kern/debug/kdebug.c	2021-12-31 16:14:00.000000000 +0800
@@ -347,5 +347,20 @@
       *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
       *                   the calling funciton's ebp = ss:[ebp]
       */
+    // 读取当前栈帧的ebp和eip
+    uint32_t eip, ebp;
+    eip = read_eip();
+    ebp = read_ebp();
+    int i, j;
+    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
+        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
+        for (j = 0; j < 4; j++) {
+            cprintf("0x%08x ", ((uint32_t *)ebp + 2)[j]);
+        }
+        cprintf("\n");
+        print_debuginfo(eip - 1);
+        eip = ((uint32_t *)ebp)[1];
+        ebp = ((uint32_t *)ebp)[0];
+    }
+    cprintf("What the fuck?");
 }
-
diff '--color=auto' -burP lab6_origin/kern/mm/default_pmm.c lab6/kern/mm/default_pmm.c
--- lab6_origin/kern/mm/default_pmm.c	2021-02-07 16:11:21.000000000 +0800
+++ lab6/kern/mm/default_pmm.c	2021-12-31 16:12:29.000000000 +0800
@@ -116,7 +116,8 @@
     base->property = n;
     SetPageProperty(base);
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    list_add_before(&free_list, &(base->page_link));
+    // list_add(&free_list, &(base->page_link));
 }
 
 static struct Page *
@@ -135,12 +136,15 @@
         }
     }
     if (page != NULL) {
-        list_del(&(page->page_link));
         if (page->property > n) {
             struct Page *p = page + n;
             p->property = page->property - n;
-            list_add(&free_list, &(p->page_link));
+            list_add_after(&(page->page_link), &(p->page_link));
+            //---------------------------------
+            SetPageProperty(p);
+            //---------------------------------
     }
+        list_del(&(page->page_link));
         nr_free -= n;
         ClearPageProperty(page);
     }
@@ -151,31 +155,37 @@
 default_free_pages(struct Page *base, size_t n) {
     assert(n > 0);
     struct Page *p = base;
-    for (; p != base + n; p ++) {
+    for (; p != base + n; p++) {
         assert(!PageReserved(p) && !PageProperty(p));
         p->flags = 0;
         set_page_ref(p, 0);
     }
     base->property = n;
     SetPageProperty(base);
-    list_entry_t *le = list_next(&free_list);
+    list_entry_t *le = list_next(&free_list), *sp = NULL;
+    bool flag = 0;
     while (le != &free_list) {
+        // sp = le;
         p = le2page(le, page_link);
-        le = list_next(le);
         if (base + base->property == p) {
             base->property += p->property;
             ClearPageProperty(p);
             list_del(&(p->page_link));
-        }
-        else if (p + p->property == base) {
+        } else if (p + p->property == base) {
             p->property += base->property;
+            sp = list_prev(le);
+            flag = 1;
             ClearPageProperty(base);
             base = p;
             list_del(&(p->page_link));
         }
+        if (p + p->property < base)
+            sp = le, flag = 1;
+        le = list_next(le);
     }
     nr_free += n;
-    list_add(&free_list, &(base->page_link));
+    //cprintf("%x %x\n", sp, &free_list);
+    list_add((flag ? sp : &free_list), &(base->page_link));
 }
 
 static size_t
diff '--color=auto' -burP lab6_origin/kern/mm/pmm.c lab6/kern/mm/pmm.c
--- lab6_origin/kern/mm/pmm.c	2021-02-07 16:11:21.000000000 +0800
+++ lab6/kern/mm/pmm.c	2021-12-31 16:12:45.000000000 +0800
@@ -363,17 +363,27 @@
      *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
      *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
      */
-#if 0
-    pde_t *pdep = NULL;   // (1) find page directory entry
-    if (0) {              // (2) check if entry is not present
+#if 1
+    pde_t *pdep = PDX(la) + pgdir;  // (1) find page directory entry
+    if (!(*pdep & PTE_P)) {         // (2) check if entry is not present
                           // (3) check if creating is needed, then alloc page for page table
                           // CAUTION: this page is used for page table, not for common data page
                           // (4) set page reference
-        uintptr_t pa = 0; // (5) get linear address of page
+        // (5) get linear address of page
                           // (6) clear page content using memset
                           // (7) set page directory entry's permission
+        struct Page *page;
+        if (!create || (page = alloc_page()) == NULL) {
+            return NULL;
+        }
+        set_page_ref(page, 1);
+        uintptr_t pa = page2pa(page);  // the physical address of page table
+        memset(KADDR(pa), 0, PGSIZE);
+        *pdep = pa | PTE_P | PTE_W | PTE_U;
     }
-    return NULL;          // (8) return page table entry
+
+    pte_t *ptep = (pte_t *)KADDR(PDE_ADDR(*pdep)) + PTX(la);
+    return ptep;  // (8) return page table entry
 #endif
 }
 
@@ -411,13 +421,17 @@
      * DEFINEs:
      *   PTE_P           0x001                   // page table/directory entry flags bit : Present
      */
-#if 0
-    if (0) {                      //(1) check if this page table entry is present
-        struct Page *page = NULL; //(2) find corresponding page to pte
-                                  //(3) decrease page reference
-                                  //(4) and free this page when page reference reachs 0
-                                  //(5) clear second page table entry
-                                  //(6) flush tlb
+#if 1
+    if (*ptep & PTE_P)  //(1) check if this page table entry is present
+    {
+        struct Page *page = pte2page(*ptep);  //(2) find corresponding page to pte
+
+        if (page_ref_dec(page) == 0)  //(3) decrease page reference
+        {                             //free_page means add this page to freeList in FIFO
+            free_page(page);          //(4) and free this page when page reference reachs 0
+        }
+        *ptep = 0;                  //(5) clear second page table entry
+        tlb_invalidate(pgdir, la);  //(6) flush tlb
     }
 #endif
 }
@@ -483,9 +497,9 @@
         //get page from ptep
         struct Page *page = pte2page(*ptep);
         // alloc a page for process B
-        struct Page *npage=alloc_page();
+            //struct Page *npage=alloc_page();
         assert(page!=NULL);
-        assert(npage!=NULL);
+            //assert(npage!=NULL);
         int ret=0;
         /* LAB5:EXERCISE2 YOUR CODE
          * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
@@ -501,6 +515,44 @@
          * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
          * (4) build the map of phy addr of  nage with the linear addr start
          */
+            // 如果启用写时复制
+            if(share)
+            {
+                cprintf("Sharing the page 0x%x\n", page2kva(page));
+                // 在两个PTE上均设置为只读
+                page_insert(from, page, start, perm & ~PTE_W);
+                ret = page_insert(to, page, start, perm & ~PTE_W);
+            }
+            // 完整拷贝内存
+            else
+            {
+                // alloc a page for process B
+                // 目标页面地址
+                struct Page *npage = alloc_page();
+                assert(page!=NULL);
+                assert(npage!=NULL);
+                //cprintf("alloc a new page 0x%x\n", page2kva(npage));
+                /* LAB5:EXERCISE2 YOUR CODE
+                * replicate content of page to npage, build the map of phy addr of nage with the linear addr start
+                *
+                * Some Useful MACROs and DEFINEs, you can use them in below implementation.
+                * MACROs or Functions:
+                *    page2kva(struct Page *page): return the kernel vritual addr of memory which page managed (SEE pmm.h)
+                *    page_insert: build the map of phy addr of an Page with the linear addr la
+                *    memcpy: typical memory copy function
+                *
+                * (1) find src_kvaddr: the kernel virtual address of page
+                * (2) find dst_kvaddr: the kernel virtual address of npage
+                * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
+                * (4) build the map of phy addr of  nage with the linear addr start
+                */
+                uintptr_t src_kvaddr, dst_kvaddr;
+                src_kvaddr = page2kva(page);
+                dst_kvaddr = page2kva(npage);
+                memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
+                ret = page_insert(to, npage, start, perm);
+                assert(ret == 0);
+            }
         assert(ret == 0);
         }
         start += PGSIZE;
diff '--color=auto' -burP lab6_origin/kern/mm/swap_fifo.c lab6/kern/mm/swap_fifo.c
--- lab6_origin/kern/mm/swap_fifo.c	2021-02-07 16:11:21.000000000 +0800
+++ lab6/kern/mm/swap_fifo.c	2021-12-31 16:12:48.000000000 +0800
@@ -51,6 +51,7 @@
     //record the page access situlation
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
+    list_add(head, entry);
     return 0;
 }
 /*
@@ -67,6 +68,12 @@
      /*LAB3 EXERCISE 2: YOUR CODE*/ 
      //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
      //(2)  assign the value of *ptr_page to the addr of this page
+     list_entry_t *le = head->prev;
+     assert(head!=le);
+     struct Page *p = le2page(le, pra_page_link);
+     list_del(le);
+     assert(p !=NULL);
+     *ptr_page = p;
      return 0;
 }
 
diff '--color=auto' -burP lab6_origin/kern/mm/vmm.c lab6/kern/mm/vmm.c
--- lab6_origin/kern/mm/vmm.c	2021-02-07 16:11:21.000000000 +0800
+++ lab6/kern/mm/vmm.c	2021-12-31 16:12:53.000000000 +0800
@@ -201,7 +201,7 @@
 
         insert_vma_struct(to, nvma);
 
-        bool share = 0;
+        bool share = 1;
         if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
             return -E_NO_MEM;
         }
@@ -353,7 +353,7 @@
     assert(sum == 0);
 
     page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
-    free_page(pde2page(pgdir[0]));
+    //free_page(pde2page(pgdir[0]));
     pgdir[0] = 0;
 
     mm->pgdir = NULL;
@@ -451,6 +451,65 @@
     *   mm->pgdir : the PDT of these vma
     *
     */
+   // 查找当前虚拟地址所对应的页表项
+    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
+        cprintf("get_pte in do_pgfault failed\n");
+        goto failed;
+    }
+    // 如果这个页表项所对应的物理页不存在，则
+    if (*ptep == 0) {
+        // 分配一块物理页，并设置页表项
+        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
+            cprintf("pgdir_alloc_page in do_pgfault failed\n");
+            goto failed;
+        }
+    }
+    else {
+        struct Page *page=NULL;
+        // -------------------------------------------------------/
+        if (*ptep & PTE_P) {
+            //panic("error write a non-writable pte");
+            cprintf("\n\nCOW: ptep 0x%x, pte 0x%x\n",ptep, *ptep);
+            // 原先所使用的只读物理页
+            page = pte2page(*ptep);
+            // 如果该物理页面被多个进程引用
+            if(page_ref(page) > 1)
+            {
+                // 释放当前PTE的引用并分配一个新物理页
+                struct Page* newPage = pgdir_alloc_page(mm->pgdir, addr, perm);
+                void * kva_src = page2kva(page);
+                void * kva_dst = page2kva(newPage);
+                // 拷贝数据
+                memcpy(kva_dst, kva_src, PGSIZE);
+            }
+            // 如果该物理页面只被当前进程所引用,即page_ref等1
+            else
+                // 则可以直接执行page_insert。该函数会重设其PTE权限。
+                page_insert(mm->pgdir, page, addr, perm);
+        } 
+        else
+        // ------------------------------------------------------/
+        {
+            // 如果swap已经初始化完成
+            if(swap_init_ok) {
+                // 将目标数据加载到某块新的物理页中。
+                // 该物理页可能是尚未分配的物理页，也可能是从别的已分配物理页中取的
+                if ((ret = swap_in(mm, addr, &page)) != 0) {
+                    cprintf("swap_in in do_pgfault failed\n");
+                    goto failed;
+                }    
+                // 将该物理页与对应的虚拟地址关联，同时设置页表。
+                page_insert(mm->pgdir, page, addr, perm);
+            }
+            else {
+                cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
+                goto failed;
+            }
+        }
+        // 当前缺失的页已经加载回内存中，所以设置当前页为可swap。
+        swap_map_swappable(mm, addr, page, 1);
+        page->pra_vaddr = addr;
+   }
 #if 0
     /*LAB3 EXERCISE 1: YOUR CODE*/
     ptep = ???              //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
diff '--color=auto' -burP lab6_origin/kern/process/proc.c lab6/kern/process/proc.c
--- lab6_origin/kern/process/proc.c	2021-02-07 16:11:21.000000000 +0800
+++ lab6/kern/process/proc.c	2022-01-01 12:57:01.000000000 +0800
@@ -87,6 +87,14 @@
 alloc_proc(void) {
     struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
     if (proc != NULL) {
+        memset(proc, 0, sizeof(struct proc_struct));
+        proc->state = PROC_UNINIT;
+        proc->pid = -1;
+        proc->cr3 = boot_cr3;
+        proc->lab6_priority = 1;
+        memset(&(proc->context), 0, sizeof(struct context));
+        memset(proc->name, 0, PROC_NAME_LEN);
+        list_init(&(proc->run_link));
     //LAB4:EXERCISE1 YOUR CODE
     /*
      * below fields in proc_struct need to be initialized
@@ -413,7 +421,38 @@
 	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
 	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
     */
+    if ((proc = alloc_proc()) == NULL) {
+        cprintf("alloc_proc() failed!");
+        goto fork_out;
+    }
+
+    proc->parent = current;
+    assert(current->wait_state == 0);
+
+    if ((ret = setup_kstack(proc)) != 0) {  //call the alloc_pages to alloc kstack space
+        cprintf("set_kstack() failed!");
+        goto bad_fork_cleanup_proc;
+    }
+
+    if (copy_mm(clone_flags, proc) != 0) {
+        cprintf("copy_mm() failed!");
+        goto bad_fork_cleanup_kstack;
+    }
+
+    copy_thread(proc, stack, tf);
+
+    bool intr_flag;
+    local_intr_save(intr_flag);
+    {
+        proc->pid = get_pid();
+        hash_proc(proc);
+        set_links(proc);
+    }
+    local_intr_restore(intr_flag);
+
+    wakeup_proc(proc);
 	
+    ret = proc->pid;
 fork_out:
     return ret;
 
@@ -612,6 +651,11 @@
      *          tf_eip should be the entry point of this binary program (elf->e_entry)
      *          tf_eflags should be set to enable computer to produce Interrupt
      */
+    tf->tf_cs = USER_CS;
+    tf->tf_ds = tf->tf_es = tf->tf_ss = tf->tf_fs = USER_DS;
+    tf->tf_esp = USTACKTOP;
+    tf->tf_eip = elf->e_entry;
+    tf->tf_eflags = FL_IF;
     ret = 0;
 out:
     return ret;
diff '--color=auto' -burP lab6_origin/kern/schedule/default_sched.c lab6/kern/schedule/default_sched.c
--- lab6_origin/kern/schedule/default_sched.c	2021-02-07 16:11:21.000000000 +0800
+++ lab6/kern/schedule/default_sched.c	2021-12-31 19:23:36.000000000 +0800
@@ -14,6 +14,7 @@
 RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
     assert(list_empty(&(proc->run_link)));
     list_add_before(&(rq->run_list), &(proc->run_link));
+    //correct the enqueue proc's time slice
     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
         proc->time_slice = rq->max_time_slice;
     }
@@ -47,7 +48,7 @@
     }
 }
 
-struct sched_class default_sched_class = {
+struct sched_class default_sched_class1 = {
     .name = "RR_scheduler",
     .init = RR_init,
     .enqueue = RR_enqueue,
diff '--color=auto' -burP lab6_origin/kern/schedule/default_sched_stride.c lab6/kern/schedule/default_sched_stride.c
--- lab6_origin/kern/schedule/default_sched_stride.c	2021-02-07 16:11:21.000000000 +0800
+++ lab6/kern/schedule/default_sched_stride.c	2022-01-01 20:51:04.000000000 +0800
@@ -8,7 +8,7 @@
 
 /* You should define the BigStride constant here*/
 /* LAB6: YOUR CODE */
-#define BIG_STRIDE    /* you should give a value, and is ??? */
+#define BIG_STRIDE ((uint32_t) -1)   /* you should give a value, and is ??? */
 
 /* The compare function for two skew_heap_node_t's and the
  * corresponding procs*/
@@ -36,6 +36,13 @@
  */
 static void
 stride_init(struct run_queue *rq) {
+    list_init(&(rq->run_list));
+    // 注意这里不要使用skew_heap_init(rq->lab6_run_pool)
+    /* 因为lab6_run_pool是一个指针, 初始默认不指向任何东西, 而上面这个函数会对未初始化的地址
+     * 解引用设置left right和parent为NULL
+     */
+    rq->lab6_run_pool = NULL;
+    rq->proc_num = 0;
      /* LAB6: YOUR CODE 
       * (1) init the ready process list: rq->run_list
       * (2) init the run pool: rq->lab6_run_pool
@@ -58,6 +65,12 @@
  */
 static void
 stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
+    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+        proc->time_slice = rq->max_time_slice;
+    }
+    proc->rq = rq;
+    rq->proc_num ++;
      /* LAB6: YOUR CODE 
       * (1) insert the proc into rq correctly
       * NOTICE: you can use skew_heap or list. Important functions
@@ -79,6 +92,8 @@
  */
 static void
 stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
+    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+    rq->proc_num --;
      /* LAB6: YOUR CODE 
       * (1) remove the proc from rq correctly
       * NOTICE: you can use skew_heap or list. Important functions
@@ -101,6 +116,13 @@
  */
 static struct proc_struct *
 stride_pick_next(struct run_queue *rq) {
+    skew_heap_entry_t* min = rq->lab6_run_pool;
+    if (min != NULL) {
+        struct proc_struct* p = le2proc(min, lab6_run_pool);
+        p->lab6_stride += BIG_STRIDE / p->lab6_priority;
+        return p;
+    }
+    return NULL;
      /* LAB6: YOUR CODE 
       * (1) get a  proc_struct pointer p  with the minimum value of stride
              (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
@@ -121,6 +143,12 @@
 static void
 stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
      /* LAB6: YOUR CODE */
+     if (proc->time_slice > 0) {
+        proc->time_slice --;
+    }
+    if (proc->time_slice == 0) {
+        proc->need_resched = 1;
+    }
 }
 
 struct sched_class default_sched_class = {
diff '--color=auto' -burP lab6_origin/kern/schedule/sched.c lab6/kern/schedule/sched.c
--- lab6_origin/kern/schedule/sched.c	2021-02-07 16:11:21.000000000 +0800
+++ lab6/kern/schedule/sched.c	2022-01-01 12:45:09.000000000 +0800
@@ -45,7 +45,7 @@
 void
 sched_init(void) {
     list_init(&timer_list);
-
+    extern struct sched_class default_sched_class1;
     sched_class = &default_sched_class;
 
     rq = &__rq;
@@ -79,10 +79,11 @@
 schedule(void) {
     bool intr_flag;
     struct proc_struct *next;
-    local_intr_save(intr_flag);
+    local_intr_save(intr_flag);  //inhibit interrupt
     {
         current->need_resched = 0;
         if (current->state == PROC_RUNNABLE) {
+            //change from list search to function
             sched_class_enqueue(current);
         }
         if ((next = sched_class_pick_next()) != NULL) {
diff '--color=auto' -burP lab6_origin/kern/trap/trap.c lab6/kern/trap/trap.c
--- lab6_origin/kern/trap/trap.c	2021-02-07 16:11:21.000000000 +0800
+++ lab6/kern/trap/trap.c	2021-12-31 16:06:58.000000000 +0800
@@ -57,6 +57,20 @@
      /* LAB5 YOUR CODE */ 
      //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
      //so you should setup the syscall interrupt gate in here
+     extern uintptr_t __vectors[];
+    int i;
+    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++)
+        // 目标idt项为idt[i]
+        // 该idt项为内核代码，所以使用GD_KTEXT段选择子
+        // 中断处理程序的入口地址存放于__vectors[i]
+        // 特权级为DPL_KERNEL
+        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
+	// 设置从用户态转为内核态的中断的特权级为DPL_USER
+    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
+    // Lab5 code
+    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
+    // 加载该IDT
+    lidt(&idt_pd); 
 }
 
 static const char *
@@ -229,6 +243,9 @@
          * IMPORTANT FUNCTIONS:
 	     * sched_class_proc_tick
          */
+        ticks++;
+        assert(current != NULL);
+        sched_class_proc_tick(current);
         break;
     case IRQ_OFFSET + IRQ_COM1:
         c = cons_getc();
