diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/debug/kdebug.c lab8/kern/debug/kdebug.c
							      >	    // 读取当前栈帧的ebp和eip
							      >	    uint32_t eip, ebp;
							      >	    eip = read_eip();
							      >	    ebp = read_ebp();
							      >	    int i, j;
							      >	    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
							      >	        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
							      >	        for (j = 0; j < 4; j++) {
							      >	            cprintf("0x%08x ", ((uint32_t *)ebp + 2)[j]);
							      >	        }
							      >	        cprintf("\n");
							      >	        print_debuginfo(eip - 1);
							      >	        eip = ((uint32_t *)ebp)[1];
							      >	        ebp = ((uint32_t *)ebp)[0];
							      >	    }
							      >	    cprintf("What the fuck?");
							      <
diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/mm/default_pmm.c lab8/kern/mm/default_pmm.c
    list_add(&free_list, &(base->page_link));		      |	    list_add_before(&free_list, &(base->page_link));
							      >	    // list_add(&free_list, &(base->page_link));
        list_del(&(page->page_link));			      <
            list_add(&free_list, &(p->page_link));	      |	            list_add_after(&(page->page_link), &(p->page_link
							      >	            //---------------------------------
							      >	            SetPageProperty(p);
							      >	            //---------------------------------
							      >	        list_del(&(page->page_link));
    for (; p != base + n; p ++) {			      |	    for (; p != base + n; p++) {
    list_entry_t *le = list_next(&free_list);		      |	    list_entry_t *le = list_next(&free_list), *sp = NULL;
							      >	    bool flag = 0;
							      >	        // sp = le;
        le = list_next(le);				      <
        }						      |	        } else if (p + p->property == base) {
        else if (p + p->property == base) {		      <
							      >	            sp = list_prev(le);
							      >	            flag = 1;
							      >	        if (p + p->property < base)
							      >	            sp = le, flag = 1;
							      >	        le = list_next(le);
    list_add(&free_list, &(base->page_link));		      |	    //cprintf("%x %x\n", sp, &free_list);
							      >	    list_add((flag ? sp : &free_list), &(base->page_link));
diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/mm/pmm.c lab8/kern/mm/pmm.c
#if 0							      |	#if 1
    pde_t *pdep = NULL;   // (1) find page directory entry    |	    pde_t *pdep = PDX(la) + pgdir;  // (1) find page director
    if (0) {              // (2) check if entry is not presen |	    if (!(*pdep & PTE_P)) {         // (2) check if entry is 
        uintptr_t pa = 0; // (5) get linear address of page   |	        // (5) get linear address of page
							      >	        struct Page *page;
							      >	        if (!create || (page = alloc_page()) == NULL) {
							      >	            return NULL;
							      >	        }
							      >	        set_page_ref(page, 1);
							      >	        uintptr_t pa = page2pa(page);  // the physical addres
							      >	        memset(KADDR(pa), 0, PGSIZE);
							      >	        *pdep = pa | PTE_P | PTE_W | PTE_U;
    return NULL;          // (8) return page table entry      |
							      >	    pte_t *ptep = (pte_t *)KADDR(PDE_ADDR(*pdep)) + PTX(la);
							      >	    return ptep;  // (8) return page table entry
#if 0							      |	#if 1
    if (0) {                      //(1) check if this page ta |	    if (*ptep & PTE_P)  //(1) check if this page table entry 
        struct Page *page = NULL; //(2) find corresponding pa |	    {
                                  //(3) decrease page referen |	        struct Page *page = pte2page(*ptep);  //(2) find corr
                                  //(4) and free this page wh |
                                  //(5) clear second page tab |	        if (page_ref_dec(page) == 0)  //(3) decrease page ref
                                  //(6) flush tlb	      |	        {                             //free_page means add t
							      >	            free_page(page);          //(4) and free this pag
							      >	        }
							      >	        *ptep = 0;                  //(5) clear second page t
							      >	        tlb_invalidate(pgdir, la);  //(6) flush tlb
        struct Page *npage=alloc_page();		      |	            //struct Page *npage=alloc_page();
        assert(npage!=NULL);				      |	            //assert(npage!=NULL);
							      >	            // 如果启用写时复制
							      >	            if(share)
							      >	            {
							      >	                cprintf("Sharing the page 0x%x\n", page2kva(p
							      >	                // 在两个PTE上均设置为只读
							      >	                page_insert(from, page, start, perm & ~PTE_W)
							      >	                ret = page_insert(to, page, start, perm & ~PT
							      >	            }
							      >	            // 完整拷贝内存
							      >	            else
							      >	            {
							      >	                // alloc a page for process B
							      >	                // 目标页面地址
							      >	                struct Page *npage = alloc_page();
							      >	                assert(page!=NULL);
							      >	                assert(npage!=NULL);
							      >	                //cprintf("alloc a new page 0x%x\n", page2kva
							      >	                /* LAB5:EXERCISE2 YOUR CODE
							      >	                * replicate content of page to npage, build t
							      >	                *
							      >	                * Some Useful MACROs and DEFINEs, you can use
							      >	                * MACROs or Functions:
							      >	                *    page2kva(struct Page *page): return the 
							      >	                *    page_insert: build the map of phy addr o
							      >	                *    memcpy: typical memory copy function
							      >	                *
							      >	                * (1) find src_kvaddr: the kernel virtual add
							      >	                * (2) find dst_kvaddr: the kernel virtual add
							      >	                * (3) memory copy from src_kvaddr to dst_kvad
							      >	                * (4) build the map of phy addr of  nage with
							      >	                */
							      >	                uintptr_t src_kvaddr, dst_kvaddr;
							      >	                src_kvaddr = page2kva(page);
							      >	                dst_kvaddr = page2kva(npage);
							      >	                memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
							      >	                ret = page_insert(to, npage, start, perm);
							      >	                assert(ret == 0);
							      >	            }
diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/mm/swap_fifo.c lab8/kern/mm/swap_fifo.c
							      >	    list_add(head, entry);
							      >	     list_entry_t *le = head->prev;
							      >	     assert(head!=le);
							      >	     struct Page *p = le2page(le, pra_page_link);
							      >	     list_del(le);
							      >	     assert(p !=NULL);
							      >	     *ptr_page = p;
diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/mm/vmm.c lab8/kern/mm/vmm.c
        bool share = 0;					      |	        bool share = 1;
    free_page(pde2page(pgdir[0]));			      |	    //free_page(pde2page(pgdir[0]));
							      >	   // 查找当前虚拟地址所对应的页表项
							      >	    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
							      >	        cprintf("get_pte in do_pgfault failed\n");
							      >	        goto failed;
							      >	    }
							      >	    // 如果这个页表项所对应的物理页不存在，则
							      >	    if (*ptep == 0) {
							      >	        // 分配一块物理页，并设置页表项
							      >	        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) 
							      >	            cprintf("pgdir_alloc_page in do_pgfault failed\n"
							      >	            goto failed;
							      >	        }
							      >	    }
							      >	    else {
							      >	        struct Page *page=NULL;
							      >	        // --------------------------------------------------
							      >	        if (*ptep & PTE_P) {
							      >	            //panic("error write a non-writable pte");
							      >	            cprintf("\n\nCOW: ptep 0x%x, pte 0x%x\n",ptep, *p
							      >	            // 原先所使用的只读物理页
							      >	            page = pte2page(*ptep);
							      >	            // 如果该物理页面被多个进程引用
							      >	            if(page_ref(page) > 1)
							      >	            {
							      >	                // 释放当前PTE的引用并分配一个新物理页
							      >	                struct Page* newPage = pgdir_alloc_page(mm->p
							      >	                void * kva_src = page2kva(page);
							      >	                void * kva_dst = page2kva(newPage);
							      >	                // 拷贝数据
							      >	                memcpy(kva_dst, kva_src, PGSIZE);
							      >	            }
							      >	            // 如果该物理页面只被当前进程所引用,即page_ref等1
							      >	            else
							      >	                // 则可以直接执行page_insert。该函数会重设其P
							      >	                page_insert(mm->pgdir, page, addr, perm);
							      >	        } 
							      >	        else
							      >	        // --------------------------------------------------
							      >	        {
							      >	            // 如果swap已经初始化完成
							      >	            if(swap_init_ok) {
							      >	                // 将目标数据加载到某块新的物理页中。
							      >	                // 该物理页可能是尚未分配的物理页，也可能是从
							      >	                if ((ret = swap_in(mm, addr, &page)) != 0) {
							      >	                    cprintf("swap_in in do_pgfault failed\n")
							      >	                    goto failed;
							      >	                }    
							      >	                // 将该物理页与对应的虚拟地址关联，同时设置页
							      >	                page_insert(mm->pgdir, page, addr, perm);
							      >	            }
							      >	            else {
							      >	                cprintf("no swap_init_ok but ptep is %x, fail
							      >	                goto failed;
							      >	            }
							      >	        }
							      >	        // 当前缺失的页已经加载回内存中，所以设置当前页为可sw
							      >	        swap_map_swappable(mm, addr, page, 1);
							      >	        page->pra_vaddr = addr;
							      >	   }
diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/process/proc.c lab8/kern/process/proc.c
							      >	        memset(proc, 0, sizeof(struct proc_struct));
							      >	        proc->state = PROC_UNINIT;
							      >	        proc->pid = -1;
							      >	        proc->cr3 = boot_cr3;
							      >	        proc->lab6_priority = 1;
							      >	        memset(&(proc->context), 0, sizeof(struct context));
							      >	        memset(proc->name, 0, PROC_NAME_LEN);
							      >	        list_init(&(proc->run_link));
							      >	    if ((proc = alloc_proc()) == NULL) {
							      >	        cprintf("alloc_proc() failed!");
							      >	        goto fork_out;
							      >	    }
							      >
							      >	    proc->parent = current;
							      >	    assert(current->wait_state == 0);
							      >
							      >	    if ((ret = setup_kstack(proc)) != 0) {  //call the alloc_
							      >	        cprintf("set_kstack() failed!");
							      >	        goto bad_fork_cleanup_proc;
							      >	    }
							      >
							      >	    if (copy_mm(clone_flags, proc) != 0) {
							      >	        cprintf("copy_mm() failed!");
							      >	        goto bad_fork_cleanup_kstack;
							      >	    }
							      >
							      >	    copy_thread(proc, stack, tf);
							      >
							      >	    bool intr_flag;
							      >	    local_intr_save(intr_flag);
							      >	    {
							      >	        proc->pid = get_pid();
							      >	        hash_proc(proc);
							      >	        set_links(proc);
							      >	    }
							      >	    local_intr_restore(intr_flag);
							      >
							      >	    wakeup_proc(proc);
							      >	    ret = proc->pid;
diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/schedule/default_sched.c lab8/kern/schedule/default_sched.c
							      >	    //correct the enqueue proc's time slice
struct sched_class default_sched_class = {		      |	struct sched_class default_sched_class1 = {
diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/schedule/default_sched_stride.c lab8/kern/schedule/default_sched_stride.c
							      >	#include <defs.h>
							      >	#include <list.h>
							      >	#include <proc.h>
							      >	#include <assert.h>
							      >	#include <default_sched.h>
							      >
							      >	#define USE_SKEW_HEAP 1
							      >
							      >	/* You should define the BigStride constant here*/
							      >	/* LAB6: YOUR CODE */
							      >	#define BIG_STRIDE ((uint32_t) -1)   /* you should give a val
							      >
							      >	/* The compare function for two skew_heap_node_t's and the
							      >	 * corresponding procs*/
							      >	static int
							      >	proc_stride_comp_f(void *a, void *b)
							      >	{
							      >	     struct proc_struct *p = le2proc(a, lab6_run_pool);
							      >	     struct proc_struct *q = le2proc(b, lab6_run_pool);
							      >	     int32_t c = p->lab6_stride - q->lab6_stride;
							      >	     if (c > 0) return 1;
							      >	     else if (c == 0) return 0;
							      >	     else return -1;
							      >	}
							      >
							      >	/*
							      >	 * stride_init initializes the run-queue rq with correct assi
							      >	 * member variables, including:
							      >	 *
							      >	 *   - run_list: should be a empty list after initialization.
							      >	 *   - lab6_run_pool: NULL
							      >	 *   - proc_num: 0
							      >	 *   - max_time_slice: no need here, the variable would be as
							      >	 *
							      >	 * hint: see libs/list.h for routines of the list structures.
							      >	 */
							      >	static void
							      >	stride_init(struct run_queue *rq) {
							      >	    list_init(&(rq->run_list));
							      >	    // 注意这里不要使用skew_heap_init(rq->lab6_run_pool)
							      >	    /* 因为lab6_run_pool是一个指针, 初始默认不指向任何东西, 
							      >	     * 解引用设置left right和parent为NULL
							      >	     */
							      >	    rq->lab6_run_pool = NULL;
							      >	    rq->proc_num = 0;
							      >	     /* LAB6: YOUR CODE 
							      >	      * (1) init the ready process list: rq->run_list
							      >	      * (2) init the run pool: rq->lab6_run_pool
							      >	      * (3) set number of process: rq->proc_num to 0       
							      >	      */
							      >	}
							      >
							      >	/*
							      >	 * stride_enqueue inserts the process ``proc'' into the run-q
							      >	 * ``rq''. The procedure should verify/initialize the relevan
							      >	 * of ``proc'', and then put the ``lab6_run_pool'' node into 
							      >	 * queue(since we use priority queue here). The procedure sho
							      >	 * update the meta date in ``rq'' structure.
							      >	 *
							      >	 * proc->time_slice denotes the time slices allocation for th
							      >	 * process, which should set to rq->max_time_slice.
							      >	 * 
							      >	 * hint: see libs/skew_heap.h for routines of the priority
							      >	 * queue structures.
							      >	 */
							      >	static void
							      >	stride_enqueue(struct run_queue *rq, struct proc_struct *proc
							      >	    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &
							      >	    if (proc->time_slice == 0 || proc->time_slice > rq->max_t
							      >	        proc->time_slice = rq->max_time_slice;
							      >	    }
							      >	    proc->rq = rq;
							      >	    rq->proc_num ++;
							      >	     /* LAB6: YOUR CODE 
							      >	      * (1) insert the proc into rq correctly
							      >	      * NOTICE: you can use skew_heap or list. Important func
							      >	      *         skew_heap_insert: insert a entry into skew_he
							      >	      *         list_add_before: insert  a entry into the las
							      >	      * (2) recalculate proc->time_slice
							      >	      * (3) set proc->rq pointer to rq
							      >	      * (4) increase rq->proc_num
							      >	      */
							      >	}
							      >
							      >	/*
							      >	 * stride_dequeue removes the process ``proc'' from the run-q
							      >	 * ``rq'', the operation would be finished by the skew_heap_r
							      >	 * operations. Remember to update the ``rq'' structure.
							      >	 *
							      >	 * hint: see libs/skew_heap.h for routines of the priority
							      >	 * queue structures.
							      >	 */
							      >	static void
							      >	stride_dequeue(struct run_queue *rq, struct proc_struct *proc
							      >	    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &
							      >	    rq->proc_num --;
							      >	     /* LAB6: YOUR CODE 
							      >	      * (1) remove the proc from rq correctly
							      >	      * NOTICE: you can use skew_heap or list. Important func
							      >	      *         skew_heap_remove: remove a entry from skew_he
							      >	      *         list_del_init: remove a entry from the  list
							      >	      */
							      >	}
							      >	/*
							      >	 * stride_pick_next pick the element from the ``run-queue'', 
							      >	 * minimum value of stride, and returns the corresponding pro
							      >	 * pointer. The process pointer would be calculated by macro 
							      >	 * see kern/process/proc.h for definition. Return NULL if
							      >	 * there is no process in the queue.
							      >	 *
							      >	 * When one proc structure is selected, remember to update th
							      >	 * property of the proc. (stride += BIG_STRIDE / priority)
							      >	 *
							      >	 * hint: see libs/skew_heap.h for routines of the priority
							      >	 * queue structures.
							      >	 */
							      >	static struct proc_struct *
							      >	stride_pick_next(struct run_queue *rq) {
							      >	    skew_heap_entry_t* min = rq->lab6_run_pool;
							      >	    if (min != NULL) {
							      >	        struct proc_struct* p = le2proc(min, lab6_run_pool);
							      >	        p->lab6_stride += BIG_STRIDE / p->lab6_priority;
							      >	        return p;
							      >	    }
							      >	    return NULL;
							      >	     /* LAB6: YOUR CODE 
							      >	      * (1) get a  proc_struct pointer p  with the minimum va
							      >	             (1.1) If using skew_heap, we can use le2proc get
							      >	             (1.2) If using list, we have to search list to f
							      >	      * (2) update p;s stride value: p->lab6_stride
							      >	      * (3) return p
							      >	      */
							      >	}
							      >
							      >	/*
							      >	 * stride_proc_tick works with the tick event of current proc
							      >	 * should check whether the time slices for current process i
							      >	 * exhausted and update the proc struct ``proc''. proc->time_
							      >	 * denotes the time slices left for current
							      >	 * process. proc->need_resched is the flag variable for proce
							      >	 * switching.
							      >	 */
							      >	static void
							      >	stride_proc_tick(struct run_queue *rq, struct proc_struct *pr
							      >	     /* LAB6: YOUR CODE */
							      >	     if (proc->time_slice > 0) {
							      >	        proc->time_slice --;
							      >	    }
							      >	    if (proc->time_slice == 0) {
							      >	        proc->need_resched = 1;
							      >	    }
							      >	}
							      >
							      >	struct sched_class default_sched_class = {
							      >	     .name = "stride_scheduler",
							      >	     .init = stride_init,
							      >	     .enqueue = stride_enqueue,
							      >	     .dequeue = stride_dequeue,
							      >	     .pick_next = stride_pick_next,
							      >	     .proc_tick = stride_proc_tick,
							      >	};
Only in lab8_origin/kern/schedule: default_sched_stride_c
diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/schedule/sched.c lab8/kern/schedule/sched.c
							      |	    extern struct sched_class default_sched_class1;
    local_intr_save(intr_flag);				      |	    local_intr_save(intr_flag);  //inhibit interrupt
							      >	            //change from list search to function
							      >	                //a small check to wait_state
diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/sync/check_sync.c lab8/kern/sync/check_sync.c
//-----------------philosopher problem using monitor -------- |	//-----------------philosopher problem using semaphore ------
							      >	     state_condvar[i]=HUNGRY;
							      >	     phi_test_condvar(i);
							      >	     if (state_condvar[i] != EATING) {
							      >	         cprintf("phi_take_forks_condvar: %d didn't get fork 
							      >	         cond_wait(&mtp->cv[i]);
							      >	     }
							      >	     state_condvar[i] = THINKING;
							      >	     // test left and right neighbors
							      >	     phi_test_condvar(LEFT);
							      >	     phi_test_condvar(RIGHT);
diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/sync/monitor.c lab8/kern/sync/monitor.c
							      >	   if(cvp->count>0) {
							      >	       cvp->owner->next_count++;
							      >	       up(&(cvp->sem));
							      >	       down(&(cvp->owner->next));
							      >	       cvp->owner->next_count--;
							      >	   }
							      >	    cvp->count++;
							      >	    if (cvp->owner->next_count > 0)
							      >	        up(&(cvp->owner->next));
							      >	    else
							      >	        up(&(cvp->owner->mutex));
							      >	    down(&(cvp->sem));
							      >	    cvp->count--;
diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/sync/monitor.h lab8/kern/sync/monitor.h
 *  Concurrent Pascal language. Generally, a monitor is a lan |	 *  Concurrent Pascal language. Generally, a monitor is a lan
							      >	 *  Compare this with semaphores, which are usually an OS con
 *   If a condition variable is signaled with nobody waiting, |	 *   If a condition variable is signaled with nobody waiting,
							      >	 * a signal will allow a process that executes a wait in the 
diff '--color=auto' -bpyrP --suppress-common-lines lab8_origin/kern/trap/trap.c lab8/kern/trap/trap.c
							      >	     extern uintptr_t __vectors[];
							      >	    int i;
							      >	    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i 
							      >	        // 目标idt项为idt[i]
							      >	        // 该idt项为内核代码，所以使用GD_KTEXT段选择子
							      >	        // 中断处理程序的入口地址存放于__vectors[i]
							      >	        // 特权级为DPL_KERNEL
							      >	        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL
							      >		// 设置从用户态转为内核态的中断的特权级为DPL_USER
							      >	    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITC
							      >	    // Lab5 code
							      >	    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL]
							      >	    // 加载该IDT
							      >	    lidt(&idt_pd); 
							      >	        ticks++;
							      >	        assert(current != NULL);
							      >	        run_timer_list();
							      >	        //sched_class_proc_tick(current);
