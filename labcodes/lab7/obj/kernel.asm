
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 a0 1c 00       	mov    $0x1ca000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 a0 1c c0       	mov    %eax,0xc01ca000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 90 13 c0       	mov    $0xc0139000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	b8 78 f2 1c c0       	mov    $0xc01cf278,%eax
c0100041:	2d 00 c0 1c c0       	sub    $0xc01cc000,%eax
c0100046:	89 44 24 08          	mov    %eax,0x8(%esp)
c010004a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100051:	00 
c0100052:	c7 04 24 00 c0 1c c0 	movl   $0xc01cc000,(%esp)
c0100059:	e8 d7 db 00 00       	call   c010dc35 <memset>

    cons_init();                // init the console
c010005e:	e8 ff 16 00 00       	call   c0101762 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100063:	c7 45 f4 e0 dd 10 c0 	movl   $0xc010dde0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c010006a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010006d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100071:	c7 04 24 fc dd 10 c0 	movl   $0xc010ddfc,(%esp)
c0100078:	e8 f5 02 00 00       	call   c0100372 <cprintf>

    print_kerninfo();
c010007d:	e8 09 09 00 00       	call   c010098b <print_kerninfo>

    grade_backtrace();
c0100082:	e8 ac 00 00 00       	call   c0100133 <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100087:	e8 ae 57 00 00       	call   c010583a <pmm_init>

    pic_init();                 // init interrupt controller
c010008c:	e8 af 20 00 00       	call   c0102140 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100091:	e8 13 22 00 00       	call   c01022a9 <idt_init>

    vmm_init();                 // init virtual memory management
c0100096:	e8 00 89 00 00       	call   c010899b <vmm_init>
    sched_init();               // init scheduler
c010009b:	e8 af c9 00 00       	call   c010ca4f <sched_init>
    proc_init();                // init process table
c01000a0:	e8 65 c0 00 00       	call   c010c10a <proc_init>
    
    ide_init();                 // init ide devices
c01000a5:	e8 f2 17 00 00       	call   c010189c <ide_init>
    swap_init();                // init swap
c01000aa:	e8 e2 6e 00 00       	call   c0106f91 <swap_init>

    clock_init();               // init clock interrupt
c01000af:	e8 0d 0e 00 00       	call   c0100ec1 <clock_init>
    intr_enable();              // enable irq interrupt
c01000b4:	e8 e5 1f 00 00       	call   c010209e <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b9:	e8 0d c2 00 00       	call   c010c2cb <cpu_idle>

c01000be <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000be:	55                   	push   %ebp
c01000bf:	89 e5                	mov    %esp,%ebp
c01000c1:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000cb:	00 
c01000cc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000d3:	00 
c01000d4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000db:	e8 fc 0c 00 00       	call   c0100ddc <mon_backtrace>
}
c01000e0:	90                   	nop
c01000e1:	89 ec                	mov    %ebp,%esp
c01000e3:	5d                   	pop    %ebp
c01000e4:	c3                   	ret    

c01000e5 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000e5:	55                   	push   %ebp
c01000e6:	89 e5                	mov    %esp,%ebp
c01000e8:	83 ec 18             	sub    $0x18,%esp
c01000eb:	89 5d fc             	mov    %ebx,-0x4(%ebp)
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000ee:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000f1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000f4:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01000fa:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01000fe:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100102:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0100106:	89 04 24             	mov    %eax,(%esp)
c0100109:	e8 b0 ff ff ff       	call   c01000be <grade_backtrace2>
}
c010010e:	90                   	nop
c010010f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0100112:	89 ec                	mov    %ebp,%esp
c0100114:	5d                   	pop    %ebp
c0100115:	c3                   	ret    

c0100116 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100116:	55                   	push   %ebp
c0100117:	89 e5                	mov    %esp,%ebp
c0100119:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c010011c:	8b 45 10             	mov    0x10(%ebp),%eax
c010011f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100123:	8b 45 08             	mov    0x8(%ebp),%eax
c0100126:	89 04 24             	mov    %eax,(%esp)
c0100129:	e8 b7 ff ff ff       	call   c01000e5 <grade_backtrace1>
}
c010012e:	90                   	nop
c010012f:	89 ec                	mov    %ebp,%esp
c0100131:	5d                   	pop    %ebp
c0100132:	c3                   	ret    

c0100133 <grade_backtrace>:

void
grade_backtrace(void) {
c0100133:	55                   	push   %ebp
c0100134:	89 e5                	mov    %esp,%ebp
c0100136:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100139:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c010013e:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100145:	ff 
c0100146:	89 44 24 04          	mov    %eax,0x4(%esp)
c010014a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100151:	e8 c0 ff ff ff       	call   c0100116 <grade_backtrace0>
}
c0100156:	90                   	nop
c0100157:	89 ec                	mov    %ebp,%esp
c0100159:	5d                   	pop    %ebp
c010015a:	c3                   	ret    

c010015b <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010015b:	55                   	push   %ebp
c010015c:	89 e5                	mov    %esp,%ebp
c010015e:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100161:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100164:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100167:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010016a:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010016d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100171:	83 e0 03             	and    $0x3,%eax
c0100174:	89 c2                	mov    %eax,%edx
c0100176:	a1 00 c0 1c c0       	mov    0xc01cc000,%eax
c010017b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010017f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100183:	c7 04 24 01 de 10 c0 	movl   $0xc010de01,(%esp)
c010018a:	e8 e3 01 00 00       	call   c0100372 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c010018f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100193:	89 c2                	mov    %eax,%edx
c0100195:	a1 00 c0 1c c0       	mov    0xc01cc000,%eax
c010019a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010019e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001a2:	c7 04 24 0f de 10 c0 	movl   $0xc010de0f,(%esp)
c01001a9:	e8 c4 01 00 00       	call   c0100372 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001ae:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001b2:	89 c2                	mov    %eax,%edx
c01001b4:	a1 00 c0 1c c0       	mov    0xc01cc000,%eax
c01001b9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001c1:	c7 04 24 1d de 10 c0 	movl   $0xc010de1d,(%esp)
c01001c8:	e8 a5 01 00 00       	call   c0100372 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001cd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001d1:	89 c2                	mov    %eax,%edx
c01001d3:	a1 00 c0 1c c0       	mov    0xc01cc000,%eax
c01001d8:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001e0:	c7 04 24 2b de 10 c0 	movl   $0xc010de2b,(%esp)
c01001e7:	e8 86 01 00 00       	call   c0100372 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001ec:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001f0:	89 c2                	mov    %eax,%edx
c01001f2:	a1 00 c0 1c c0       	mov    0xc01cc000,%eax
c01001f7:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001ff:	c7 04 24 39 de 10 c0 	movl   $0xc010de39,(%esp)
c0100206:	e8 67 01 00 00       	call   c0100372 <cprintf>
    round ++;
c010020b:	a1 00 c0 1c c0       	mov    0xc01cc000,%eax
c0100210:	40                   	inc    %eax
c0100211:	a3 00 c0 1c c0       	mov    %eax,0xc01cc000
}
c0100216:	90                   	nop
c0100217:	89 ec                	mov    %ebp,%esp
c0100219:	5d                   	pop    %ebp
c010021a:	c3                   	ret    

c010021b <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c010021b:	55                   	push   %ebp
c010021c:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010021e:	90                   	nop
c010021f:	5d                   	pop    %ebp
c0100220:	c3                   	ret    

c0100221 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100221:	55                   	push   %ebp
c0100222:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100224:	90                   	nop
c0100225:	5d                   	pop    %ebp
c0100226:	c3                   	ret    

c0100227 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100227:	55                   	push   %ebp
c0100228:	89 e5                	mov    %esp,%ebp
c010022a:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c010022d:	e8 29 ff ff ff       	call   c010015b <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100232:	c7 04 24 48 de 10 c0 	movl   $0xc010de48,(%esp)
c0100239:	e8 34 01 00 00       	call   c0100372 <cprintf>
    lab1_switch_to_user();
c010023e:	e8 d8 ff ff ff       	call   c010021b <lab1_switch_to_user>
    lab1_print_cur_status();
c0100243:	e8 13 ff ff ff       	call   c010015b <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100248:	c7 04 24 68 de 10 c0 	movl   $0xc010de68,(%esp)
c010024f:	e8 1e 01 00 00       	call   c0100372 <cprintf>
    lab1_switch_to_kernel();
c0100254:	e8 c8 ff ff ff       	call   c0100221 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100259:	e8 fd fe ff ff       	call   c010015b <lab1_print_cur_status>
}
c010025e:	90                   	nop
c010025f:	89 ec                	mov    %ebp,%esp
c0100261:	5d                   	pop    %ebp
c0100262:	c3                   	ret    

c0100263 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100263:	55                   	push   %ebp
c0100264:	89 e5                	mov    %esp,%ebp
c0100266:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c0100269:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010026d:	74 13                	je     c0100282 <readline+0x1f>
        cprintf("%s", prompt);
c010026f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100272:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100276:	c7 04 24 87 de 10 c0 	movl   $0xc010de87,(%esp)
c010027d:	e8 f0 00 00 00       	call   c0100372 <cprintf>
    }
    int i = 0, c;
c0100282:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100289:	e8 73 01 00 00       	call   c0100401 <getchar>
c010028e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100291:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100295:	79 07                	jns    c010029e <readline+0x3b>
            return NULL;
c0100297:	b8 00 00 00 00       	mov    $0x0,%eax
c010029c:	eb 78                	jmp    c0100316 <readline+0xb3>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010029e:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c01002a2:	7e 28                	jle    c01002cc <readline+0x69>
c01002a4:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c01002ab:	7f 1f                	jg     c01002cc <readline+0x69>
            cputchar(c);
c01002ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002b0:	89 04 24             	mov    %eax,(%esp)
c01002b3:	e8 e2 00 00 00       	call   c010039a <cputchar>
            buf[i ++] = c;
c01002b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002bb:	8d 50 01             	lea    0x1(%eax),%edx
c01002be:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002c4:	88 90 20 c0 1c c0    	mov    %dl,-0x3fe33fe0(%eax)
c01002ca:	eb 45                	jmp    c0100311 <readline+0xae>
        }
        else if (c == '\b' && i > 0) {
c01002cc:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002d0:	75 16                	jne    c01002e8 <readline+0x85>
c01002d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002d6:	7e 10                	jle    c01002e8 <readline+0x85>
            cputchar(c);
c01002d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002db:	89 04 24             	mov    %eax,(%esp)
c01002de:	e8 b7 00 00 00       	call   c010039a <cputchar>
            i --;
c01002e3:	ff 4d f4             	decl   -0xc(%ebp)
c01002e6:	eb 29                	jmp    c0100311 <readline+0xae>
        }
        else if (c == '\n' || c == '\r') {
c01002e8:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002ec:	74 06                	je     c01002f4 <readline+0x91>
c01002ee:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002f2:	75 95                	jne    c0100289 <readline+0x26>
            cputchar(c);
c01002f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002f7:	89 04 24             	mov    %eax,(%esp)
c01002fa:	e8 9b 00 00 00       	call   c010039a <cputchar>
            buf[i] = '\0';
c01002ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100302:	05 20 c0 1c c0       	add    $0xc01cc020,%eax
c0100307:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c010030a:	b8 20 c0 1c c0       	mov    $0xc01cc020,%eax
c010030f:	eb 05                	jmp    c0100316 <readline+0xb3>
        c = getchar();
c0100311:	e9 73 ff ff ff       	jmp    c0100289 <readline+0x26>
        }
    }
}
c0100316:	89 ec                	mov    %ebp,%esp
c0100318:	5d                   	pop    %ebp
c0100319:	c3                   	ret    

c010031a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010031a:	55                   	push   %ebp
c010031b:	89 e5                	mov    %esp,%ebp
c010031d:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100320:	8b 45 08             	mov    0x8(%ebp),%eax
c0100323:	89 04 24             	mov    %eax,(%esp)
c0100326:	e8 66 14 00 00       	call   c0101791 <cons_putc>
    (*cnt) ++;
c010032b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010032e:	8b 00                	mov    (%eax),%eax
c0100330:	8d 50 01             	lea    0x1(%eax),%edx
c0100333:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100336:	89 10                	mov    %edx,(%eax)
}
c0100338:	90                   	nop
c0100339:	89 ec                	mov    %ebp,%esp
c010033b:	5d                   	pop    %ebp
c010033c:	c3                   	ret    

c010033d <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010033d:	55                   	push   %ebp
c010033e:	89 e5                	mov    %esp,%ebp
c0100340:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100343:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c010034a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010034d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100351:	8b 45 08             	mov    0x8(%ebp),%eax
c0100354:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100358:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010035b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010035f:	c7 04 24 1a 03 10 c0 	movl   $0xc010031a,(%esp)
c0100366:	e8 1d d0 00 00       	call   c010d388 <vprintfmt>
    return cnt;
c010036b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010036e:	89 ec                	mov    %ebp,%esp
c0100370:	5d                   	pop    %ebp
c0100371:	c3                   	ret    

c0100372 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100372:	55                   	push   %ebp
c0100373:	89 e5                	mov    %esp,%ebp
c0100375:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0100378:	8d 45 0c             	lea    0xc(%ebp),%eax
c010037b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c010037e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100381:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100385:	8b 45 08             	mov    0x8(%ebp),%eax
c0100388:	89 04 24             	mov    %eax,(%esp)
c010038b:	e8 ad ff ff ff       	call   c010033d <vcprintf>
c0100390:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100393:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100396:	89 ec                	mov    %ebp,%esp
c0100398:	5d                   	pop    %ebp
c0100399:	c3                   	ret    

c010039a <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010039a:	55                   	push   %ebp
c010039b:	89 e5                	mov    %esp,%ebp
c010039d:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c01003a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01003a3:	89 04 24             	mov    %eax,(%esp)
c01003a6:	e8 e6 13 00 00       	call   c0101791 <cons_putc>
}
c01003ab:	90                   	nop
c01003ac:	89 ec                	mov    %ebp,%esp
c01003ae:	5d                   	pop    %ebp
c01003af:	c3                   	ret    

c01003b0 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01003b0:	55                   	push   %ebp
c01003b1:	89 e5                	mov    %esp,%ebp
c01003b3:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003b6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003bd:	eb 13                	jmp    c01003d2 <cputs+0x22>
        cputch(c, &cnt);
c01003bf:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003c3:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003c6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003ca:	89 04 24             	mov    %eax,(%esp)
c01003cd:	e8 48 ff ff ff       	call   c010031a <cputch>
    while ((c = *str ++) != '\0') {
c01003d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01003d5:	8d 50 01             	lea    0x1(%eax),%edx
c01003d8:	89 55 08             	mov    %edx,0x8(%ebp)
c01003db:	0f b6 00             	movzbl (%eax),%eax
c01003de:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003e1:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003e5:	75 d8                	jne    c01003bf <cputs+0xf>
    }
    cputch('\n', &cnt);
c01003e7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003ee:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003f5:	e8 20 ff ff ff       	call   c010031a <cputch>
    return cnt;
c01003fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003fd:	89 ec                	mov    %ebp,%esp
c01003ff:	5d                   	pop    %ebp
c0100400:	c3                   	ret    

c0100401 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c0100401:	55                   	push   %ebp
c0100402:	89 e5                	mov    %esp,%ebp
c0100404:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100407:	90                   	nop
c0100408:	e8 c3 13 00 00       	call   c01017d0 <cons_getc>
c010040d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100410:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100414:	74 f2                	je     c0100408 <getchar+0x7>
        /* do nothing */;
    return c;
c0100416:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100419:	89 ec                	mov    %ebp,%esp
c010041b:	5d                   	pop    %ebp
c010041c:	c3                   	ret    

c010041d <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c010041d:	55                   	push   %ebp
c010041e:	89 e5                	mov    %esp,%ebp
c0100420:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c0100423:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100426:	8b 00                	mov    (%eax),%eax
c0100428:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010042b:	8b 45 10             	mov    0x10(%ebp),%eax
c010042e:	8b 00                	mov    (%eax),%eax
c0100430:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100433:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c010043a:	e9 ca 00 00 00       	jmp    c0100509 <stab_binsearch+0xec>
        int true_m = (l + r) / 2, m = true_m;
c010043f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100442:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100445:	01 d0                	add    %edx,%eax
c0100447:	89 c2                	mov    %eax,%edx
c0100449:	c1 ea 1f             	shr    $0x1f,%edx
c010044c:	01 d0                	add    %edx,%eax
c010044e:	d1 f8                	sar    %eax
c0100450:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100453:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100456:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100459:	eb 03                	jmp    c010045e <stab_binsearch+0x41>
            m --;
c010045b:	ff 4d f0             	decl   -0x10(%ebp)
        while (m >= l && stabs[m].n_type != type) {
c010045e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100461:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100464:	7c 1f                	jl     c0100485 <stab_binsearch+0x68>
c0100466:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100469:	89 d0                	mov    %edx,%eax
c010046b:	01 c0                	add    %eax,%eax
c010046d:	01 d0                	add    %edx,%eax
c010046f:	c1 e0 02             	shl    $0x2,%eax
c0100472:	89 c2                	mov    %eax,%edx
c0100474:	8b 45 08             	mov    0x8(%ebp),%eax
c0100477:	01 d0                	add    %edx,%eax
c0100479:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010047d:	0f b6 c0             	movzbl %al,%eax
c0100480:	39 45 14             	cmp    %eax,0x14(%ebp)
c0100483:	75 d6                	jne    c010045b <stab_binsearch+0x3e>
        }
        if (m < l) {    // no match in [l, m]
c0100485:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100488:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010048b:	7d 09                	jge    c0100496 <stab_binsearch+0x79>
            l = true_m + 1;
c010048d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100490:	40                   	inc    %eax
c0100491:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100494:	eb 73                	jmp    c0100509 <stab_binsearch+0xec>
        }

        // actual binary search
        any_matches = 1;
c0100496:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010049d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004a0:	89 d0                	mov    %edx,%eax
c01004a2:	01 c0                	add    %eax,%eax
c01004a4:	01 d0                	add    %edx,%eax
c01004a6:	c1 e0 02             	shl    $0x2,%eax
c01004a9:	89 c2                	mov    %eax,%edx
c01004ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01004ae:	01 d0                	add    %edx,%eax
c01004b0:	8b 40 08             	mov    0x8(%eax),%eax
c01004b3:	39 45 18             	cmp    %eax,0x18(%ebp)
c01004b6:	76 11                	jbe    c01004c9 <stab_binsearch+0xac>
            *region_left = m;
c01004b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004bb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004be:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c01004c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004c3:	40                   	inc    %eax
c01004c4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004c7:	eb 40                	jmp    c0100509 <stab_binsearch+0xec>
        } else if (stabs[m].n_value > addr) {
c01004c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004cc:	89 d0                	mov    %edx,%eax
c01004ce:	01 c0                	add    %eax,%eax
c01004d0:	01 d0                	add    %edx,%eax
c01004d2:	c1 e0 02             	shl    $0x2,%eax
c01004d5:	89 c2                	mov    %eax,%edx
c01004d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01004da:	01 d0                	add    %edx,%eax
c01004dc:	8b 40 08             	mov    0x8(%eax),%eax
c01004df:	39 45 18             	cmp    %eax,0x18(%ebp)
c01004e2:	73 14                	jae    c01004f8 <stab_binsearch+0xdb>
            *region_right = m - 1;
c01004e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004e7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01004ea:	8b 45 10             	mov    0x10(%ebp),%eax
c01004ed:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01004ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004f2:	48                   	dec    %eax
c01004f3:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004f6:	eb 11                	jmp    c0100509 <stab_binsearch+0xec>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01004f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004fe:	89 10                	mov    %edx,(%eax)
            l = m;
c0100500:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100503:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c0100506:	ff 45 18             	incl   0x18(%ebp)
    while (l <= r) {
c0100509:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010050c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010050f:	0f 8e 2a ff ff ff    	jle    c010043f <stab_binsearch+0x22>
        }
    }

    if (!any_matches) {
c0100515:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100519:	75 0f                	jne    c010052a <stab_binsearch+0x10d>
        *region_right = *region_left - 1;
c010051b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010051e:	8b 00                	mov    (%eax),%eax
c0100520:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100523:	8b 45 10             	mov    0x10(%ebp),%eax
c0100526:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c0100528:	eb 3e                	jmp    c0100568 <stab_binsearch+0x14b>
        l = *region_right;
c010052a:	8b 45 10             	mov    0x10(%ebp),%eax
c010052d:	8b 00                	mov    (%eax),%eax
c010052f:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100532:	eb 03                	jmp    c0100537 <stab_binsearch+0x11a>
c0100534:	ff 4d fc             	decl   -0x4(%ebp)
c0100537:	8b 45 0c             	mov    0xc(%ebp),%eax
c010053a:	8b 00                	mov    (%eax),%eax
c010053c:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010053f:	7e 1f                	jle    c0100560 <stab_binsearch+0x143>
c0100541:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100544:	89 d0                	mov    %edx,%eax
c0100546:	01 c0                	add    %eax,%eax
c0100548:	01 d0                	add    %edx,%eax
c010054a:	c1 e0 02             	shl    $0x2,%eax
c010054d:	89 c2                	mov    %eax,%edx
c010054f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100552:	01 d0                	add    %edx,%eax
c0100554:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100558:	0f b6 c0             	movzbl %al,%eax
c010055b:	39 45 14             	cmp    %eax,0x14(%ebp)
c010055e:	75 d4                	jne    c0100534 <stab_binsearch+0x117>
        *region_left = l;
c0100560:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100563:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100566:	89 10                	mov    %edx,(%eax)
}
c0100568:	90                   	nop
c0100569:	89 ec                	mov    %ebp,%esp
c010056b:	5d                   	pop    %ebp
c010056c:	c3                   	ret    

c010056d <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010056d:	55                   	push   %ebp
c010056e:	89 e5                	mov    %esp,%ebp
c0100570:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100573:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100576:	c7 00 8c de 10 c0    	movl   $0xc010de8c,(%eax)
    info->eip_line = 0;
c010057c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010057f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100586:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100589:	c7 40 08 8c de 10 c0 	movl   $0xc010de8c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100590:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100593:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010059a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010059d:	8b 55 08             	mov    0x8(%ebp),%edx
c01005a0:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c01005a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005a6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c01005ad:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c01005b4:	76 21                	jbe    c01005d7 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c01005b6:	c7 45 f4 20 0d 11 c0 	movl   $0xc0110d20,-0xc(%ebp)
        stab_end = __STAB_END__;
c01005bd:	c7 45 f0 f0 ad 12 c0 	movl   $0xc012adf0,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01005c4:	c7 45 ec f1 ad 12 c0 	movl   $0xc012adf1,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01005cb:	c7 45 e8 57 69 13 c0 	movl   $0xc0136957,-0x18(%ebp)
c01005d2:	e9 e8 00 00 00       	jmp    c01006bf <debuginfo_eip+0x152>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01005d7:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01005de:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c01005e3:	85 c0                	test   %eax,%eax
c01005e5:	74 11                	je     c01005f8 <debuginfo_eip+0x8b>
c01005e7:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c01005ec:	8b 40 18             	mov    0x18(%eax),%eax
c01005ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01005f2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01005f6:	75 0a                	jne    c0100602 <debuginfo_eip+0x95>
            return -1;
c01005f8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01005fd:	e9 85 03 00 00       	jmp    c0100987 <debuginfo_eip+0x41a>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c0100602:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100605:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010060c:	00 
c010060d:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c0100614:	00 
c0100615:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100619:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010061c:	89 04 24             	mov    %eax,(%esp)
c010061f:	e8 4b 8d 00 00       	call   c010936f <user_mem_check>
c0100624:	85 c0                	test   %eax,%eax
c0100626:	75 0a                	jne    c0100632 <debuginfo_eip+0xc5>
            return -1;
c0100628:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010062d:	e9 55 03 00 00       	jmp    c0100987 <debuginfo_eip+0x41a>
        }

        stabs = usd->stabs;
c0100632:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100635:	8b 00                	mov    (%eax),%eax
c0100637:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010063a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010063d:	8b 40 04             	mov    0x4(%eax),%eax
c0100640:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100643:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100646:	8b 40 08             	mov    0x8(%eax),%eax
c0100649:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010064c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010064f:	8b 40 0c             	mov    0xc(%eax),%eax
c0100652:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100655:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100658:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c010065b:	29 c8                	sub    %ecx,%eax
c010065d:	89 c2                	mov    %eax,%edx
c010065f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100662:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100669:	00 
c010066a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010066e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100672:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100675:	89 04 24             	mov    %eax,(%esp)
c0100678:	e8 f2 8c 00 00       	call   c010936f <user_mem_check>
c010067d:	85 c0                	test   %eax,%eax
c010067f:	75 0a                	jne    c010068b <debuginfo_eip+0x11e>
            return -1;
c0100681:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100686:	e9 fc 02 00 00       	jmp    c0100987 <debuginfo_eip+0x41a>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c010068b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010068e:	2b 45 ec             	sub    -0x14(%ebp),%eax
c0100691:	89 c2                	mov    %eax,%edx
c0100693:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100696:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010069d:	00 
c010069e:	89 54 24 08          	mov    %edx,0x8(%esp)
c01006a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01006a9:	89 04 24             	mov    %eax,(%esp)
c01006ac:	e8 be 8c 00 00       	call   c010936f <user_mem_check>
c01006b1:	85 c0                	test   %eax,%eax
c01006b3:	75 0a                	jne    c01006bf <debuginfo_eip+0x152>
            return -1;
c01006b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006ba:	e9 c8 02 00 00       	jmp    c0100987 <debuginfo_eip+0x41a>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006c2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01006c5:	76 0b                	jbe    c01006d2 <debuginfo_eip+0x165>
c01006c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006ca:	48                   	dec    %eax
c01006cb:	0f b6 00             	movzbl (%eax),%eax
c01006ce:	84 c0                	test   %al,%al
c01006d0:	74 0a                	je     c01006dc <debuginfo_eip+0x16f>
        return -1;
c01006d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006d7:	e9 ab 02 00 00       	jmp    c0100987 <debuginfo_eip+0x41a>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006dc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01006e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01006e6:	2b 45 f4             	sub    -0xc(%ebp),%eax
c01006e9:	c1 f8 02             	sar    $0x2,%eax
c01006ec:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01006f2:	48                   	dec    %eax
c01006f3:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01006f9:	89 44 24 10          	mov    %eax,0x10(%esp)
c01006fd:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c0100704:	00 
c0100705:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0100708:	89 44 24 08          	mov    %eax,0x8(%esp)
c010070c:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010070f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100713:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100716:	89 04 24             	mov    %eax,(%esp)
c0100719:	e8 ff fc ff ff       	call   c010041d <stab_binsearch>
    if (lfile == 0)
c010071e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100721:	85 c0                	test   %eax,%eax
c0100723:	75 0a                	jne    c010072f <debuginfo_eip+0x1c2>
        return -1;
c0100725:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010072a:	e9 58 02 00 00       	jmp    c0100987 <debuginfo_eip+0x41a>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c010072f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100732:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100735:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100738:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c010073b:	8b 45 08             	mov    0x8(%ebp),%eax
c010073e:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100742:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100749:	00 
c010074a:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010074d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100751:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100754:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100758:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010075b:	89 04 24             	mov    %eax,(%esp)
c010075e:	e8 ba fc ff ff       	call   c010041d <stab_binsearch>

    if (lfun <= rfun) {
c0100763:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100766:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100769:	39 c2                	cmp    %eax,%edx
c010076b:	7f 78                	jg     c01007e5 <debuginfo_eip+0x278>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c010076d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100770:	89 c2                	mov    %eax,%edx
c0100772:	89 d0                	mov    %edx,%eax
c0100774:	01 c0                	add    %eax,%eax
c0100776:	01 d0                	add    %edx,%eax
c0100778:	c1 e0 02             	shl    $0x2,%eax
c010077b:	89 c2                	mov    %eax,%edx
c010077d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100780:	01 d0                	add    %edx,%eax
c0100782:	8b 10                	mov    (%eax),%edx
c0100784:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100787:	2b 45 ec             	sub    -0x14(%ebp),%eax
c010078a:	39 c2                	cmp    %eax,%edx
c010078c:	73 22                	jae    c01007b0 <debuginfo_eip+0x243>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010078e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100791:	89 c2                	mov    %eax,%edx
c0100793:	89 d0                	mov    %edx,%eax
c0100795:	01 c0                	add    %eax,%eax
c0100797:	01 d0                	add    %edx,%eax
c0100799:	c1 e0 02             	shl    $0x2,%eax
c010079c:	89 c2                	mov    %eax,%edx
c010079e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007a1:	01 d0                	add    %edx,%eax
c01007a3:	8b 10                	mov    (%eax),%edx
c01007a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01007a8:	01 c2                	add    %eax,%edx
c01007aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007ad:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007b3:	89 c2                	mov    %eax,%edx
c01007b5:	89 d0                	mov    %edx,%eax
c01007b7:	01 c0                	add    %eax,%eax
c01007b9:	01 d0                	add    %edx,%eax
c01007bb:	c1 e0 02             	shl    $0x2,%eax
c01007be:	89 c2                	mov    %eax,%edx
c01007c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007c3:	01 d0                	add    %edx,%eax
c01007c5:	8b 50 08             	mov    0x8(%eax),%edx
c01007c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007cb:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007d1:	8b 40 10             	mov    0x10(%eax),%eax
c01007d4:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007d7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007da:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01007dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007e0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01007e3:	eb 15                	jmp    c01007fa <debuginfo_eip+0x28d>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007e8:	8b 55 08             	mov    0x8(%ebp),%edx
c01007eb:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01007ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01007f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007f7:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01007fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007fd:	8b 40 08             	mov    0x8(%eax),%eax
c0100800:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c0100807:	00 
c0100808:	89 04 24             	mov    %eax,(%esp)
c010080b:	e8 9d d2 00 00       	call   c010daad <strfind>
c0100810:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100813:	8b 4a 08             	mov    0x8(%edx),%ecx
c0100816:	29 c8                	sub    %ecx,%eax
c0100818:	89 c2                	mov    %eax,%edx
c010081a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010081d:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0100820:	8b 45 08             	mov    0x8(%ebp),%eax
c0100823:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100827:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010082e:	00 
c010082f:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100832:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100836:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100839:	89 44 24 04          	mov    %eax,0x4(%esp)
c010083d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100840:	89 04 24             	mov    %eax,(%esp)
c0100843:	e8 d5 fb ff ff       	call   c010041d <stab_binsearch>
    if (lline <= rline) {
c0100848:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010084b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010084e:	39 c2                	cmp    %eax,%edx
c0100850:	7f 23                	jg     c0100875 <debuginfo_eip+0x308>
        info->eip_line = stabs[rline].n_desc;
c0100852:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100855:	89 c2                	mov    %eax,%edx
c0100857:	89 d0                	mov    %edx,%eax
c0100859:	01 c0                	add    %eax,%eax
c010085b:	01 d0                	add    %edx,%eax
c010085d:	c1 e0 02             	shl    $0x2,%eax
c0100860:	89 c2                	mov    %eax,%edx
c0100862:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100865:	01 d0                	add    %edx,%eax
c0100867:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c010086b:	89 c2                	mov    %eax,%edx
c010086d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100870:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100873:	eb 11                	jmp    c0100886 <debuginfo_eip+0x319>
        return -1;
c0100875:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010087a:	e9 08 01 00 00       	jmp    c0100987 <debuginfo_eip+0x41a>
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010087f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100882:	48                   	dec    %eax
c0100883:	89 45 cc             	mov    %eax,-0x34(%ebp)
    while (lline >= lfile
c0100886:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100889:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010088c:	39 c2                	cmp    %eax,%edx
c010088e:	7c 56                	jl     c01008e6 <debuginfo_eip+0x379>
           && stabs[lline].n_type != N_SOL
c0100890:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100893:	89 c2                	mov    %eax,%edx
c0100895:	89 d0                	mov    %edx,%eax
c0100897:	01 c0                	add    %eax,%eax
c0100899:	01 d0                	add    %edx,%eax
c010089b:	c1 e0 02             	shl    $0x2,%eax
c010089e:	89 c2                	mov    %eax,%edx
c01008a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008a3:	01 d0                	add    %edx,%eax
c01008a5:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008a9:	3c 84                	cmp    $0x84,%al
c01008ab:	74 39                	je     c01008e6 <debuginfo_eip+0x379>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c01008ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008b0:	89 c2                	mov    %eax,%edx
c01008b2:	89 d0                	mov    %edx,%eax
c01008b4:	01 c0                	add    %eax,%eax
c01008b6:	01 d0                	add    %edx,%eax
c01008b8:	c1 e0 02             	shl    $0x2,%eax
c01008bb:	89 c2                	mov    %eax,%edx
c01008bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008c0:	01 d0                	add    %edx,%eax
c01008c2:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008c6:	3c 64                	cmp    $0x64,%al
c01008c8:	75 b5                	jne    c010087f <debuginfo_eip+0x312>
c01008ca:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008cd:	89 c2                	mov    %eax,%edx
c01008cf:	89 d0                	mov    %edx,%eax
c01008d1:	01 c0                	add    %eax,%eax
c01008d3:	01 d0                	add    %edx,%eax
c01008d5:	c1 e0 02             	shl    $0x2,%eax
c01008d8:	89 c2                	mov    %eax,%edx
c01008da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008dd:	01 d0                	add    %edx,%eax
c01008df:	8b 40 08             	mov    0x8(%eax),%eax
c01008e2:	85 c0                	test   %eax,%eax
c01008e4:	74 99                	je     c010087f <debuginfo_eip+0x312>
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008e6:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008ec:	39 c2                	cmp    %eax,%edx
c01008ee:	7c 42                	jl     c0100932 <debuginfo_eip+0x3c5>
c01008f0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008f3:	89 c2                	mov    %eax,%edx
c01008f5:	89 d0                	mov    %edx,%eax
c01008f7:	01 c0                	add    %eax,%eax
c01008f9:	01 d0                	add    %edx,%eax
c01008fb:	c1 e0 02             	shl    $0x2,%eax
c01008fe:	89 c2                	mov    %eax,%edx
c0100900:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100903:	01 d0                	add    %edx,%eax
c0100905:	8b 10                	mov    (%eax),%edx
c0100907:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010090a:	2b 45 ec             	sub    -0x14(%ebp),%eax
c010090d:	39 c2                	cmp    %eax,%edx
c010090f:	73 21                	jae    c0100932 <debuginfo_eip+0x3c5>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100911:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100914:	89 c2                	mov    %eax,%edx
c0100916:	89 d0                	mov    %edx,%eax
c0100918:	01 c0                	add    %eax,%eax
c010091a:	01 d0                	add    %edx,%eax
c010091c:	c1 e0 02             	shl    $0x2,%eax
c010091f:	89 c2                	mov    %eax,%edx
c0100921:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100924:	01 d0                	add    %edx,%eax
c0100926:	8b 10                	mov    (%eax),%edx
c0100928:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010092b:	01 c2                	add    %eax,%edx
c010092d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100930:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100932:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100935:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100938:	39 c2                	cmp    %eax,%edx
c010093a:	7d 46                	jge    c0100982 <debuginfo_eip+0x415>
        for (lline = lfun + 1;
c010093c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010093f:	40                   	inc    %eax
c0100940:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100943:	eb 16                	jmp    c010095b <debuginfo_eip+0x3ee>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100945:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100948:	8b 40 14             	mov    0x14(%eax),%eax
c010094b:	8d 50 01             	lea    0x1(%eax),%edx
c010094e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100951:	89 50 14             	mov    %edx,0x14(%eax)
             lline ++) {
c0100954:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100957:	40                   	inc    %eax
c0100958:	89 45 cc             	mov    %eax,-0x34(%ebp)
             lline < rfun && stabs[lline].n_type == N_PSYM;
c010095b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010095e:	8b 45 d0             	mov    -0x30(%ebp),%eax
        for (lline = lfun + 1;
c0100961:	39 c2                	cmp    %eax,%edx
c0100963:	7d 1d                	jge    c0100982 <debuginfo_eip+0x415>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100965:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100968:	89 c2                	mov    %eax,%edx
c010096a:	89 d0                	mov    %edx,%eax
c010096c:	01 c0                	add    %eax,%eax
c010096e:	01 d0                	add    %edx,%eax
c0100970:	c1 e0 02             	shl    $0x2,%eax
c0100973:	89 c2                	mov    %eax,%edx
c0100975:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100978:	01 d0                	add    %edx,%eax
c010097a:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010097e:	3c a0                	cmp    $0xa0,%al
c0100980:	74 c3                	je     c0100945 <debuginfo_eip+0x3d8>
        }
    }
    return 0;
c0100982:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100987:	89 ec                	mov    %ebp,%esp
c0100989:	5d                   	pop    %ebp
c010098a:	c3                   	ret    

c010098b <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c010098b:	55                   	push   %ebp
c010098c:	89 e5                	mov    %esp,%ebp
c010098e:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100991:	c7 04 24 96 de 10 c0 	movl   $0xc010de96,(%esp)
c0100998:	e8 d5 f9 ff ff       	call   c0100372 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c010099d:	c7 44 24 04 36 00 10 	movl   $0xc0100036,0x4(%esp)
c01009a4:	c0 
c01009a5:	c7 04 24 af de 10 c0 	movl   $0xc010deaf,(%esp)
c01009ac:	e8 c1 f9 ff ff       	call   c0100372 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c01009b1:	c7 44 24 04 c1 dd 10 	movl   $0xc010ddc1,0x4(%esp)
c01009b8:	c0 
c01009b9:	c7 04 24 c7 de 10 c0 	movl   $0xc010dec7,(%esp)
c01009c0:	e8 ad f9 ff ff       	call   c0100372 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009c5:	c7 44 24 04 00 c0 1c 	movl   $0xc01cc000,0x4(%esp)
c01009cc:	c0 
c01009cd:	c7 04 24 df de 10 c0 	movl   $0xc010dedf,(%esp)
c01009d4:	e8 99 f9 ff ff       	call   c0100372 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009d9:	c7 44 24 04 78 f2 1c 	movl   $0xc01cf278,0x4(%esp)
c01009e0:	c0 
c01009e1:	c7 04 24 f7 de 10 c0 	movl   $0xc010def7,(%esp)
c01009e8:	e8 85 f9 ff ff       	call   c0100372 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c01009ed:	b8 78 f2 1c c0       	mov    $0xc01cf278,%eax
c01009f2:	2d 36 00 10 c0       	sub    $0xc0100036,%eax
c01009f7:	05 ff 03 00 00       	add    $0x3ff,%eax
c01009fc:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a02:	85 c0                	test   %eax,%eax
c0100a04:	0f 48 c2             	cmovs  %edx,%eax
c0100a07:	c1 f8 0a             	sar    $0xa,%eax
c0100a0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a0e:	c7 04 24 10 df 10 c0 	movl   $0xc010df10,(%esp)
c0100a15:	e8 58 f9 ff ff       	call   c0100372 <cprintf>
}
c0100a1a:	90                   	nop
c0100a1b:	89 ec                	mov    %ebp,%esp
c0100a1d:	5d                   	pop    %ebp
c0100a1e:	c3                   	ret    

c0100a1f <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a1f:	55                   	push   %ebp
c0100a20:	89 e5                	mov    %esp,%ebp
c0100a22:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a28:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100a2b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a32:	89 04 24             	mov    %eax,(%esp)
c0100a35:	e8 33 fb ff ff       	call   c010056d <debuginfo_eip>
c0100a3a:	85 c0                	test   %eax,%eax
c0100a3c:	74 15                	je     c0100a53 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a41:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a45:	c7 04 24 3a df 10 c0 	movl   $0xc010df3a,(%esp)
c0100a4c:	e8 21 f9 ff ff       	call   c0100372 <cprintf>
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0100a51:	eb 6c                	jmp    c0100abf <print_debuginfo+0xa0>
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100a5a:	eb 1b                	jmp    c0100a77 <print_debuginfo+0x58>
            fnname[j] = info.eip_fn_name[j];
c0100a5c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100a5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a62:	01 d0                	add    %edx,%eax
c0100a64:	0f b6 10             	movzbl (%eax),%edx
c0100a67:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100a6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a70:	01 c8                	add    %ecx,%eax
c0100a72:	88 10                	mov    %dl,(%eax)
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a74:	ff 45 f4             	incl   -0xc(%ebp)
c0100a77:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100a7a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0100a7d:	7c dd                	jl     c0100a5c <print_debuginfo+0x3d>
        fnname[j] = '\0';
c0100a7f:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100a85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a88:	01 d0                	add    %edx,%eax
c0100a8a:	c6 00 00             	movb   $0x0,(%eax)
                fnname, eip - info.eip_fn_addr);
c0100a8d:	8b 55 ec             	mov    -0x14(%ebp),%edx
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a90:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a93:	29 d0                	sub    %edx,%eax
c0100a95:	89 c1                	mov    %eax,%ecx
c0100a97:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100a9a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a9d:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100aa1:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100aa7:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100aab:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100aaf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100ab3:	c7 04 24 56 df 10 c0 	movl   $0xc010df56,(%esp)
c0100aba:	e8 b3 f8 ff ff       	call   c0100372 <cprintf>
}
c0100abf:	90                   	nop
c0100ac0:	89 ec                	mov    %ebp,%esp
c0100ac2:	5d                   	pop    %ebp
c0100ac3:	c3                   	ret    

c0100ac4 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100ac4:	55                   	push   %ebp
c0100ac5:	89 e5                	mov    %esp,%ebp
c0100ac7:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100aca:	8b 45 04             	mov    0x4(%ebp),%eax
c0100acd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100ad0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100ad3:	89 ec                	mov    %ebp,%esp
c0100ad5:	5d                   	pop    %ebp
c0100ad6:	c3                   	ret    

c0100ad7 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ad7:	55                   	push   %ebp
c0100ad8:	89 e5                	mov    %esp,%ebp
c0100ada:	83 ec 38             	sub    $0x38,%esp
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    // 读取当前栈帧的ebp和eip
    uint32_t eip, ebp;
    eip = read_eip();
c0100add:	e8 e2 ff ff ff       	call   c0100ac4 <read_eip>
c0100ae2:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100ae5:	89 e8                	mov    %ebp,%eax
c0100ae7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100aea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    ebp = read_ebp();
c0100aed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int i, j;
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
c0100af0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100af7:	eb 7e                	jmp    c0100b77 <print_stackframe+0xa0>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100afc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100b00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b03:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b07:	c7 04 24 68 df 10 c0 	movl   $0xc010df68,(%esp)
c0100b0e:	e8 5f f8 ff ff       	call   c0100372 <cprintf>
        for (j = 0; j < 4; j++) {
c0100b13:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b1a:	eb 27                	jmp    c0100b43 <print_stackframe+0x6c>
            cprintf("0x%08x ", ((uint32_t *)ebp + 2)[j]);
c0100b1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b1f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b29:	01 d0                	add    %edx,%eax
c0100b2b:	83 c0 08             	add    $0x8,%eax
c0100b2e:	8b 00                	mov    (%eax),%eax
c0100b30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b34:	c7 04 24 84 df 10 c0 	movl   $0xc010df84,(%esp)
c0100b3b:	e8 32 f8 ff ff       	call   c0100372 <cprintf>
        for (j = 0; j < 4; j++) {
c0100b40:	ff 45 e8             	incl   -0x18(%ebp)
c0100b43:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100b47:	7e d3                	jle    c0100b1c <print_stackframe+0x45>
        }
        cprintf("\n");
c0100b49:	c7 04 24 8c df 10 c0 	movl   $0xc010df8c,(%esp)
c0100b50:	e8 1d f8 ff ff       	call   c0100372 <cprintf>
        print_debuginfo(eip - 1);
c0100b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b58:	48                   	dec    %eax
c0100b59:	89 04 24             	mov    %eax,(%esp)
c0100b5c:	e8 be fe ff ff       	call   c0100a1f <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100b61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b64:	83 c0 04             	add    $0x4,%eax
c0100b67:	8b 00                	mov    (%eax),%eax
c0100b69:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100b6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b6f:	8b 00                	mov    (%eax),%eax
c0100b71:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
c0100b74:	ff 45 ec             	incl   -0x14(%ebp)
c0100b77:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100b7b:	74 0a                	je     c0100b87 <print_stackframe+0xb0>
c0100b7d:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100b81:	0f 8e 72 ff ff ff    	jle    c0100af9 <print_stackframe+0x22>
    }
    cprintf("What the fuck?");
c0100b87:	c7 04 24 8e df 10 c0 	movl   $0xc010df8e,(%esp)
c0100b8e:	e8 df f7 ff ff       	call   c0100372 <cprintf>
}
c0100b93:	90                   	nop
c0100b94:	89 ec                	mov    %ebp,%esp
c0100b96:	5d                   	pop    %ebp
c0100b97:	c3                   	ret    

c0100b98 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100b98:	55                   	push   %ebp
c0100b99:	89 e5                	mov    %esp,%ebp
c0100b9b:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100b9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100ba5:	eb 0c                	jmp    c0100bb3 <parse+0x1b>
            *buf ++ = '\0';
c0100ba7:	8b 45 08             	mov    0x8(%ebp),%eax
c0100baa:	8d 50 01             	lea    0x1(%eax),%edx
c0100bad:	89 55 08             	mov    %edx,0x8(%ebp)
c0100bb0:	c6 00 00             	movb   $0x0,(%eax)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100bb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bb6:	0f b6 00             	movzbl (%eax),%eax
c0100bb9:	84 c0                	test   %al,%al
c0100bbb:	74 1d                	je     c0100bda <parse+0x42>
c0100bbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bc0:	0f b6 00             	movzbl (%eax),%eax
c0100bc3:	0f be c0             	movsbl %al,%eax
c0100bc6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bca:	c7 04 24 20 e0 10 c0 	movl   $0xc010e020,(%esp)
c0100bd1:	e8 a3 ce 00 00       	call   c010da79 <strchr>
c0100bd6:	85 c0                	test   %eax,%eax
c0100bd8:	75 cd                	jne    c0100ba7 <parse+0xf>
        }
        if (*buf == '\0') {
c0100bda:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bdd:	0f b6 00             	movzbl (%eax),%eax
c0100be0:	84 c0                	test   %al,%al
c0100be2:	74 65                	je     c0100c49 <parse+0xb1>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100be4:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100be8:	75 14                	jne    c0100bfe <parse+0x66>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100bea:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100bf1:	00 
c0100bf2:	c7 04 24 25 e0 10 c0 	movl   $0xc010e025,(%esp)
c0100bf9:	e8 74 f7 ff ff       	call   c0100372 <cprintf>
        }
        argv[argc ++] = buf;
c0100bfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c01:	8d 50 01             	lea    0x1(%eax),%edx
c0100c04:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100c07:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c11:	01 c2                	add    %eax,%edx
c0100c13:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c16:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c18:	eb 03                	jmp    c0100c1d <parse+0x85>
            buf ++;
c0100c1a:	ff 45 08             	incl   0x8(%ebp)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c20:	0f b6 00             	movzbl (%eax),%eax
c0100c23:	84 c0                	test   %al,%al
c0100c25:	74 8c                	je     c0100bb3 <parse+0x1b>
c0100c27:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c2a:	0f b6 00             	movzbl (%eax),%eax
c0100c2d:	0f be c0             	movsbl %al,%eax
c0100c30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c34:	c7 04 24 20 e0 10 c0 	movl   $0xc010e020,(%esp)
c0100c3b:	e8 39 ce 00 00       	call   c010da79 <strchr>
c0100c40:	85 c0                	test   %eax,%eax
c0100c42:	74 d6                	je     c0100c1a <parse+0x82>
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c44:	e9 6a ff ff ff       	jmp    c0100bb3 <parse+0x1b>
            break;
c0100c49:	90                   	nop
        }
    }
    return argc;
c0100c4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100c4d:	89 ec                	mov    %ebp,%esp
c0100c4f:	5d                   	pop    %ebp
c0100c50:	c3                   	ret    

c0100c51 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c51:	55                   	push   %ebp
c0100c52:	89 e5                	mov    %esp,%ebp
c0100c54:	83 ec 68             	sub    $0x68,%esp
c0100c57:	89 5d fc             	mov    %ebx,-0x4(%ebp)
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c5a:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100c5d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c61:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c64:	89 04 24             	mov    %eax,(%esp)
c0100c67:	e8 2c ff ff ff       	call   c0100b98 <parse>
c0100c6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c6f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100c73:	75 0a                	jne    c0100c7f <runcmd+0x2e>
        return 0;
c0100c75:	b8 00 00 00 00       	mov    $0x0,%eax
c0100c7a:	e9 83 00 00 00       	jmp    c0100d02 <runcmd+0xb1>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c86:	eb 5a                	jmp    c0100ce2 <runcmd+0x91>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c88:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0100c8b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0100c8e:	89 c8                	mov    %ecx,%eax
c0100c90:	01 c0                	add    %eax,%eax
c0100c92:	01 c8                	add    %ecx,%eax
c0100c94:	c1 e0 02             	shl    $0x2,%eax
c0100c97:	05 00 90 13 c0       	add    $0xc0139000,%eax
c0100c9c:	8b 00                	mov    (%eax),%eax
c0100c9e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100ca2:	89 04 24             	mov    %eax,(%esp)
c0100ca5:	e8 33 cd 00 00       	call   c010d9dd <strcmp>
c0100caa:	85 c0                	test   %eax,%eax
c0100cac:	75 31                	jne    c0100cdf <runcmd+0x8e>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100cae:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100cb1:	89 d0                	mov    %edx,%eax
c0100cb3:	01 c0                	add    %eax,%eax
c0100cb5:	01 d0                	add    %edx,%eax
c0100cb7:	c1 e0 02             	shl    $0x2,%eax
c0100cba:	05 08 90 13 c0       	add    $0xc0139008,%eax
c0100cbf:	8b 10                	mov    (%eax),%edx
c0100cc1:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100cc4:	83 c0 04             	add    $0x4,%eax
c0100cc7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100cca:	8d 59 ff             	lea    -0x1(%ecx),%ebx
c0100ccd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c0100cd0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100cd4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cd8:	89 1c 24             	mov    %ebx,(%esp)
c0100cdb:	ff d2                	call   *%edx
c0100cdd:	eb 23                	jmp    c0100d02 <runcmd+0xb1>
    for (i = 0; i < NCOMMANDS; i ++) {
c0100cdf:	ff 45 f4             	incl   -0xc(%ebp)
c0100ce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ce5:	83 f8 02             	cmp    $0x2,%eax
c0100ce8:	76 9e                	jbe    c0100c88 <runcmd+0x37>
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100cea:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100ced:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cf1:	c7 04 24 43 e0 10 c0 	movl   $0xc010e043,(%esp)
c0100cf8:	e8 75 f6 ff ff       	call   c0100372 <cprintf>
    return 0;
c0100cfd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d02:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0100d05:	89 ec                	mov    %ebp,%esp
c0100d07:	5d                   	pop    %ebp
c0100d08:	c3                   	ret    

c0100d09 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100d09:	55                   	push   %ebp
c0100d0a:	89 e5                	mov    %esp,%ebp
c0100d0c:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100d0f:	c7 04 24 5c e0 10 c0 	movl   $0xc010e05c,(%esp)
c0100d16:	e8 57 f6 ff ff       	call   c0100372 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100d1b:	c7 04 24 84 e0 10 c0 	movl   $0xc010e084,(%esp)
c0100d22:	e8 4b f6 ff ff       	call   c0100372 <cprintf>

    if (tf != NULL) {
c0100d27:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100d2b:	74 0b                	je     c0100d38 <kmonitor+0x2f>
        print_trapframe(tf);
c0100d2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d30:	89 04 24             	mov    %eax,(%esp)
c0100d33:	e8 a8 17 00 00       	call   c01024e0 <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d38:	c7 04 24 a9 e0 10 c0 	movl   $0xc010e0a9,(%esp)
c0100d3f:	e8 1f f5 ff ff       	call   c0100263 <readline>
c0100d44:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100d47:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d4b:	74 eb                	je     c0100d38 <kmonitor+0x2f>
            if (runcmd(buf, tf) < 0) {
c0100d4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d50:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d57:	89 04 24             	mov    %eax,(%esp)
c0100d5a:	e8 f2 fe ff ff       	call   c0100c51 <runcmd>
c0100d5f:	85 c0                	test   %eax,%eax
c0100d61:	78 02                	js     c0100d65 <kmonitor+0x5c>
        if ((buf = readline("K> ")) != NULL) {
c0100d63:	eb d3                	jmp    c0100d38 <kmonitor+0x2f>
                break;
c0100d65:	90                   	nop
            }
        }
    }
}
c0100d66:	90                   	nop
c0100d67:	89 ec                	mov    %ebp,%esp
c0100d69:	5d                   	pop    %ebp
c0100d6a:	c3                   	ret    

c0100d6b <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d6b:	55                   	push   %ebp
c0100d6c:	89 e5                	mov    %esp,%ebp
c0100d6e:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d78:	eb 3d                	jmp    c0100db7 <mon_help+0x4c>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d7d:	89 d0                	mov    %edx,%eax
c0100d7f:	01 c0                	add    %eax,%eax
c0100d81:	01 d0                	add    %edx,%eax
c0100d83:	c1 e0 02             	shl    $0x2,%eax
c0100d86:	05 04 90 13 c0       	add    $0xc0139004,%eax
c0100d8b:	8b 10                	mov    (%eax),%edx
c0100d8d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
c0100d90:	89 c8                	mov    %ecx,%eax
c0100d92:	01 c0                	add    %eax,%eax
c0100d94:	01 c8                	add    %ecx,%eax
c0100d96:	c1 e0 02             	shl    $0x2,%eax
c0100d99:	05 00 90 13 c0       	add    $0xc0139000,%eax
c0100d9e:	8b 00                	mov    (%eax),%eax
c0100da0:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100da4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100da8:	c7 04 24 ad e0 10 c0 	movl   $0xc010e0ad,(%esp)
c0100daf:	e8 be f5 ff ff       	call   c0100372 <cprintf>
    for (i = 0; i < NCOMMANDS; i ++) {
c0100db4:	ff 45 f4             	incl   -0xc(%ebp)
c0100db7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dba:	83 f8 02             	cmp    $0x2,%eax
c0100dbd:	76 bb                	jbe    c0100d7a <mon_help+0xf>
    }
    return 0;
c0100dbf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dc4:	89 ec                	mov    %ebp,%esp
c0100dc6:	5d                   	pop    %ebp
c0100dc7:	c3                   	ret    

c0100dc8 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100dc8:	55                   	push   %ebp
c0100dc9:	89 e5                	mov    %esp,%ebp
c0100dcb:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100dce:	e8 b8 fb ff ff       	call   c010098b <print_kerninfo>
    return 0;
c0100dd3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dd8:	89 ec                	mov    %ebp,%esp
c0100dda:	5d                   	pop    %ebp
c0100ddb:	c3                   	ret    

c0100ddc <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100ddc:	55                   	push   %ebp
c0100ddd:	89 e5                	mov    %esp,%ebp
c0100ddf:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100de2:	e8 f0 fc ff ff       	call   c0100ad7 <print_stackframe>
    return 0;
c0100de7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dec:	89 ec                	mov    %ebp,%esp
c0100dee:	5d                   	pop    %ebp
c0100def:	c3                   	ret    

c0100df0 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100df0:	55                   	push   %ebp
c0100df1:	89 e5                	mov    %esp,%ebp
c0100df3:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100df6:	a1 20 c4 1c c0       	mov    0xc01cc420,%eax
c0100dfb:	85 c0                	test   %eax,%eax
c0100dfd:	75 5b                	jne    c0100e5a <__panic+0x6a>
        goto panic_dead;
    }
    is_panic = 1;
c0100dff:	c7 05 20 c4 1c c0 01 	movl   $0x1,0xc01cc420
c0100e06:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100e09:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100e0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e12:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e16:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e19:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e1d:	c7 04 24 b6 e0 10 c0 	movl   $0xc010e0b6,(%esp)
c0100e24:	e8 49 f5 ff ff       	call   c0100372 <cprintf>
    vcprintf(fmt, ap);
c0100e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e2c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e30:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e33:	89 04 24             	mov    %eax,(%esp)
c0100e36:	e8 02 f5 ff ff       	call   c010033d <vcprintf>
    cprintf("\n");
c0100e3b:	c7 04 24 d2 e0 10 c0 	movl   $0xc010e0d2,(%esp)
c0100e42:	e8 2b f5 ff ff       	call   c0100372 <cprintf>
    
    cprintf("stack trackback:\n");
c0100e47:	c7 04 24 d4 e0 10 c0 	movl   $0xc010e0d4,(%esp)
c0100e4e:	e8 1f f5 ff ff       	call   c0100372 <cprintf>
    print_stackframe();
c0100e53:	e8 7f fc ff ff       	call   c0100ad7 <print_stackframe>
c0100e58:	eb 01                	jmp    c0100e5b <__panic+0x6b>
        goto panic_dead;
c0100e5a:	90                   	nop
    
    va_end(ap);

panic_dead:
    intr_disable();
c0100e5b:	e8 46 12 00 00       	call   c01020a6 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100e60:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100e67:	e8 9d fe ff ff       	call   c0100d09 <kmonitor>
c0100e6c:	eb f2                	jmp    c0100e60 <__panic+0x70>

c0100e6e <__warn>:
    }
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100e6e:	55                   	push   %ebp
c0100e6f:	89 e5                	mov    %esp,%ebp
c0100e71:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100e74:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e77:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100e7a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e7d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e81:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e84:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e88:	c7 04 24 e6 e0 10 c0 	movl   $0xc010e0e6,(%esp)
c0100e8f:	e8 de f4 ff ff       	call   c0100372 <cprintf>
    vcprintf(fmt, ap);
c0100e94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e97:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e9b:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e9e:	89 04 24             	mov    %eax,(%esp)
c0100ea1:	e8 97 f4 ff ff       	call   c010033d <vcprintf>
    cprintf("\n");
c0100ea6:	c7 04 24 d2 e0 10 c0 	movl   $0xc010e0d2,(%esp)
c0100ead:	e8 c0 f4 ff ff       	call   c0100372 <cprintf>
    va_end(ap);
}
c0100eb2:	90                   	nop
c0100eb3:	89 ec                	mov    %ebp,%esp
c0100eb5:	5d                   	pop    %ebp
c0100eb6:	c3                   	ret    

c0100eb7 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100eb7:	55                   	push   %ebp
c0100eb8:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100eba:	a1 20 c4 1c c0       	mov    0xc01cc420,%eax
}
c0100ebf:	5d                   	pop    %ebp
c0100ec0:	c3                   	ret    

c0100ec1 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100ec1:	55                   	push   %ebp
c0100ec2:	89 e5                	mov    %esp,%ebp
c0100ec4:	83 ec 28             	sub    $0x28,%esp
c0100ec7:	66 c7 45 ee 43 00    	movw   $0x43,-0x12(%ebp)
c0100ecd:	c6 45 ed 34          	movb   $0x34,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100ed1:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100ed5:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ed9:	ee                   	out    %al,(%dx)
}
c0100eda:	90                   	nop
c0100edb:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100ee1:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100ee5:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100ee9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100eed:	ee                   	out    %al,(%dx)
}
c0100eee:	90                   	nop
c0100eef:	66 c7 45 f6 40 00    	movw   $0x40,-0xa(%ebp)
c0100ef5:	c6 45 f5 2e          	movb   $0x2e,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100ef9:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100efd:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100f01:	ee                   	out    %al,(%dx)
}
c0100f02:	90                   	nop
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100f03:	c7 05 24 c4 1c c0 00 	movl   $0x0,0xc01cc424
c0100f0a:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100f0d:	c7 04 24 04 e1 10 c0 	movl   $0xc010e104,(%esp)
c0100f14:	e8 59 f4 ff ff       	call   c0100372 <cprintf>
    pic_enable(IRQ_TIMER);
c0100f19:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100f20:	e8 e6 11 00 00       	call   c010210b <pic_enable>
}
c0100f25:	90                   	nop
c0100f26:	89 ec                	mov    %ebp,%esp
c0100f28:	5d                   	pop    %ebp
c0100f29:	c3                   	ret    

c0100f2a <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100f2a:	55                   	push   %ebp
c0100f2b:	89 e5                	mov    %esp,%ebp
c0100f2d:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100f30:	9c                   	pushf  
c0100f31:	58                   	pop    %eax
c0100f32:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100f35:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100f38:	25 00 02 00 00       	and    $0x200,%eax
c0100f3d:	85 c0                	test   %eax,%eax
c0100f3f:	74 0c                	je     c0100f4d <__intr_save+0x23>
        intr_disable();
c0100f41:	e8 60 11 00 00       	call   c01020a6 <intr_disable>
        return 1;
c0100f46:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f4b:	eb 05                	jmp    c0100f52 <__intr_save+0x28>
    }
    return 0;
c0100f4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f52:	89 ec                	mov    %ebp,%esp
c0100f54:	5d                   	pop    %ebp
c0100f55:	c3                   	ret    

c0100f56 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100f56:	55                   	push   %ebp
c0100f57:	89 e5                	mov    %esp,%ebp
c0100f59:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0100f5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100f60:	74 05                	je     c0100f67 <__intr_restore+0x11>
        intr_enable();
c0100f62:	e8 37 11 00 00       	call   c010209e <intr_enable>
    }
}
c0100f67:	90                   	nop
c0100f68:	89 ec                	mov    %ebp,%esp
c0100f6a:	5d                   	pop    %ebp
c0100f6b:	c3                   	ret    

c0100f6c <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100f6c:	55                   	push   %ebp
c0100f6d:	89 e5                	mov    %esp,%ebp
c0100f6f:	83 ec 10             	sub    $0x10,%esp
c0100f72:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f78:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0100f7c:	89 c2                	mov    %eax,%edx
c0100f7e:	ec                   	in     (%dx),%al
c0100f7f:	88 45 f1             	mov    %al,-0xf(%ebp)
c0100f82:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0100f88:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f8c:	89 c2                	mov    %eax,%edx
c0100f8e:	ec                   	in     (%dx),%al
c0100f8f:	88 45 f5             	mov    %al,-0xb(%ebp)
c0100f92:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0100f98:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100f9c:	89 c2                	mov    %eax,%edx
c0100f9e:	ec                   	in     (%dx),%al
c0100f9f:	88 45 f9             	mov    %al,-0x7(%ebp)
c0100fa2:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
c0100fa8:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0100fac:	89 c2                	mov    %eax,%edx
c0100fae:	ec                   	in     (%dx),%al
c0100faf:	88 45 fd             	mov    %al,-0x3(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100fb2:	90                   	nop
c0100fb3:	89 ec                	mov    %ebp,%esp
c0100fb5:	5d                   	pop    %ebp
c0100fb6:	c3                   	ret    

c0100fb7 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0100fb7:	55                   	push   %ebp
c0100fb8:	89 e5                	mov    %esp,%ebp
c0100fba:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0100fbd:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0100fc4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fc7:	0f b7 00             	movzwl (%eax),%eax
c0100fca:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0100fce:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fd1:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0100fd6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fd9:	0f b7 00             	movzwl (%eax),%eax
c0100fdc:	0f b7 c0             	movzwl %ax,%eax
c0100fdf:	3d 5a a5 00 00       	cmp    $0xa55a,%eax
c0100fe4:	74 12                	je     c0100ff8 <cga_init+0x41>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0100fe6:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0100fed:	66 c7 05 46 c4 1c c0 	movw   $0x3b4,0xc01cc446
c0100ff4:	b4 03 
c0100ff6:	eb 13                	jmp    c010100b <cga_init+0x54>
    } else {
        *cp = was;
c0100ff8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ffb:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0100fff:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0101002:	66 c7 05 46 c4 1c c0 	movw   $0x3d4,0xc01cc446
c0101009:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c010100b:	0f b7 05 46 c4 1c c0 	movzwl 0xc01cc446,%eax
c0101012:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
c0101016:	c6 45 e5 0e          	movb   $0xe,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010101a:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010101e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101022:	ee                   	out    %al,(%dx)
}
c0101023:	90                   	nop
    pos = inb(addr_6845 + 1) << 8;
c0101024:	0f b7 05 46 c4 1c c0 	movzwl 0xc01cc446,%eax
c010102b:	40                   	inc    %eax
c010102c:	0f b7 c0             	movzwl %ax,%eax
c010102f:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101033:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101037:	89 c2                	mov    %eax,%edx
c0101039:	ec                   	in     (%dx),%al
c010103a:	88 45 e9             	mov    %al,-0x17(%ebp)
    return data;
c010103d:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101041:	0f b6 c0             	movzbl %al,%eax
c0101044:	c1 e0 08             	shl    $0x8,%eax
c0101047:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c010104a:	0f b7 05 46 c4 1c c0 	movzwl 0xc01cc446,%eax
c0101051:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101055:	c6 45 ed 0f          	movb   $0xf,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101059:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010105d:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101061:	ee                   	out    %al,(%dx)
}
c0101062:	90                   	nop
    pos |= inb(addr_6845 + 1);
c0101063:	0f b7 05 46 c4 1c c0 	movzwl 0xc01cc446,%eax
c010106a:	40                   	inc    %eax
c010106b:	0f b7 c0             	movzwl %ax,%eax
c010106e:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101072:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101076:	89 c2                	mov    %eax,%edx
c0101078:	ec                   	in     (%dx),%al
c0101079:	88 45 f1             	mov    %al,-0xf(%ebp)
    return data;
c010107c:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101080:	0f b6 c0             	movzbl %al,%eax
c0101083:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101086:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101089:	a3 40 c4 1c c0       	mov    %eax,0xc01cc440
    crt_pos = pos;
c010108e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101091:	0f b7 c0             	movzwl %ax,%eax
c0101094:	66 a3 44 c4 1c c0    	mov    %ax,0xc01cc444
}
c010109a:	90                   	nop
c010109b:	89 ec                	mov    %ebp,%esp
c010109d:	5d                   	pop    %ebp
c010109e:	c3                   	ret    

c010109f <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010109f:	55                   	push   %ebp
c01010a0:	89 e5                	mov    %esp,%ebp
c01010a2:	83 ec 48             	sub    $0x48,%esp
c01010a5:	66 c7 45 d2 fa 03    	movw   $0x3fa,-0x2e(%ebp)
c01010ab:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010af:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01010b3:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01010b7:	ee                   	out    %al,(%dx)
}
c01010b8:	90                   	nop
c01010b9:	66 c7 45 d6 fb 03    	movw   $0x3fb,-0x2a(%ebp)
c01010bf:	c6 45 d5 80          	movb   $0x80,-0x2b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010c3:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c01010c7:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01010cb:	ee                   	out    %al,(%dx)
}
c01010cc:	90                   	nop
c01010cd:	66 c7 45 da f8 03    	movw   $0x3f8,-0x26(%ebp)
c01010d3:	c6 45 d9 0c          	movb   $0xc,-0x27(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010d7:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01010db:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01010df:	ee                   	out    %al,(%dx)
}
c01010e0:	90                   	nop
c01010e1:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01010e7:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010eb:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01010ef:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01010f3:	ee                   	out    %al,(%dx)
}
c01010f4:	90                   	nop
c01010f5:	66 c7 45 e2 fb 03    	movw   $0x3fb,-0x1e(%ebp)
c01010fb:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01010ff:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101103:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101107:	ee                   	out    %al,(%dx)
}
c0101108:	90                   	nop
c0101109:	66 c7 45 e6 fc 03    	movw   $0x3fc,-0x1a(%ebp)
c010110f:	c6 45 e5 00          	movb   $0x0,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101113:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101117:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010111b:	ee                   	out    %al,(%dx)
}
c010111c:	90                   	nop
c010111d:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0101123:	c6 45 e9 01          	movb   $0x1,-0x17(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101127:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010112b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010112f:	ee                   	out    %al,(%dx)
}
c0101130:	90                   	nop
c0101131:	66 c7 45 ee fd 03    	movw   $0x3fd,-0x12(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101137:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010113b:	89 c2                	mov    %eax,%edx
c010113d:	ec                   	in     (%dx),%al
c010113e:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101141:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101145:	3c ff                	cmp    $0xff,%al
c0101147:	0f 95 c0             	setne  %al
c010114a:	0f b6 c0             	movzbl %al,%eax
c010114d:	a3 48 c4 1c c0       	mov    %eax,0xc01cc448
c0101152:	66 c7 45 f2 fa 03    	movw   $0x3fa,-0xe(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101158:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010115c:	89 c2                	mov    %eax,%edx
c010115e:	ec                   	in     (%dx),%al
c010115f:	88 45 f1             	mov    %al,-0xf(%ebp)
c0101162:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101168:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010116c:	89 c2                	mov    %eax,%edx
c010116e:	ec                   	in     (%dx),%al
c010116f:	88 45 f5             	mov    %al,-0xb(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101172:	a1 48 c4 1c c0       	mov    0xc01cc448,%eax
c0101177:	85 c0                	test   %eax,%eax
c0101179:	74 0c                	je     c0101187 <serial_init+0xe8>
        pic_enable(IRQ_COM1);
c010117b:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101182:	e8 84 0f 00 00       	call   c010210b <pic_enable>
    }
}
c0101187:	90                   	nop
c0101188:	89 ec                	mov    %ebp,%esp
c010118a:	5d                   	pop    %ebp
c010118b:	c3                   	ret    

c010118c <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c010118c:	55                   	push   %ebp
c010118d:	89 e5                	mov    %esp,%ebp
c010118f:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101192:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101199:	eb 08                	jmp    c01011a3 <lpt_putc_sub+0x17>
        delay();
c010119b:	e8 cc fd ff ff       	call   c0100f6c <delay>
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01011a0:	ff 45 fc             	incl   -0x4(%ebp)
c01011a3:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c01011a9:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01011ad:	89 c2                	mov    %eax,%edx
c01011af:	ec                   	in     (%dx),%al
c01011b0:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01011b3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01011b7:	84 c0                	test   %al,%al
c01011b9:	78 09                	js     c01011c4 <lpt_putc_sub+0x38>
c01011bb:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c01011c2:	7e d7                	jle    c010119b <lpt_putc_sub+0xf>
    }
    outb(LPTPORT + 0, c);
c01011c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01011c7:	0f b6 c0             	movzbl %al,%eax
c01011ca:	66 c7 45 ee 78 03    	movw   $0x378,-0x12(%ebp)
c01011d0:	88 45 ed             	mov    %al,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01011d3:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011d7:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011db:	ee                   	out    %al,(%dx)
}
c01011dc:	90                   	nop
c01011dd:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c01011e3:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01011e7:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01011eb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011ef:	ee                   	out    %al,(%dx)
}
c01011f0:	90                   	nop
c01011f1:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c01011f7:	c6 45 f5 08          	movb   $0x8,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01011fb:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01011ff:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101203:	ee                   	out    %al,(%dx)
}
c0101204:	90                   	nop
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c0101205:	90                   	nop
c0101206:	89 ec                	mov    %ebp,%esp
c0101208:	5d                   	pop    %ebp
c0101209:	c3                   	ret    

c010120a <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c010120a:	55                   	push   %ebp
c010120b:	89 e5                	mov    %esp,%ebp
c010120d:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101210:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101214:	74 0d                	je     c0101223 <lpt_putc+0x19>
        lpt_putc_sub(c);
c0101216:	8b 45 08             	mov    0x8(%ebp),%eax
c0101219:	89 04 24             	mov    %eax,(%esp)
c010121c:	e8 6b ff ff ff       	call   c010118c <lpt_putc_sub>
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c0101221:	eb 24                	jmp    c0101247 <lpt_putc+0x3d>
        lpt_putc_sub('\b');
c0101223:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010122a:	e8 5d ff ff ff       	call   c010118c <lpt_putc_sub>
        lpt_putc_sub(' ');
c010122f:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101236:	e8 51 ff ff ff       	call   c010118c <lpt_putc_sub>
        lpt_putc_sub('\b');
c010123b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101242:	e8 45 ff ff ff       	call   c010118c <lpt_putc_sub>
}
c0101247:	90                   	nop
c0101248:	89 ec                	mov    %ebp,%esp
c010124a:	5d                   	pop    %ebp
c010124b:	c3                   	ret    

c010124c <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c010124c:	55                   	push   %ebp
c010124d:	89 e5                	mov    %esp,%ebp
c010124f:	83 ec 38             	sub    $0x38,%esp
c0101252:	89 5d fc             	mov    %ebx,-0x4(%ebp)
    // set black on white
    if (!(c & ~0xFF)) {
c0101255:	8b 45 08             	mov    0x8(%ebp),%eax
c0101258:	25 00 ff ff ff       	and    $0xffffff00,%eax
c010125d:	85 c0                	test   %eax,%eax
c010125f:	75 07                	jne    c0101268 <cga_putc+0x1c>
        c |= 0x0700;
c0101261:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101268:	8b 45 08             	mov    0x8(%ebp),%eax
c010126b:	0f b6 c0             	movzbl %al,%eax
c010126e:	83 f8 0d             	cmp    $0xd,%eax
c0101271:	74 72                	je     c01012e5 <cga_putc+0x99>
c0101273:	83 f8 0d             	cmp    $0xd,%eax
c0101276:	0f 8f a3 00 00 00    	jg     c010131f <cga_putc+0xd3>
c010127c:	83 f8 08             	cmp    $0x8,%eax
c010127f:	74 0a                	je     c010128b <cga_putc+0x3f>
c0101281:	83 f8 0a             	cmp    $0xa,%eax
c0101284:	74 4c                	je     c01012d2 <cga_putc+0x86>
c0101286:	e9 94 00 00 00       	jmp    c010131f <cga_putc+0xd3>
    case '\b':
        if (crt_pos > 0) {
c010128b:	0f b7 05 44 c4 1c c0 	movzwl 0xc01cc444,%eax
c0101292:	85 c0                	test   %eax,%eax
c0101294:	0f 84 af 00 00 00    	je     c0101349 <cga_putc+0xfd>
            crt_pos --;
c010129a:	0f b7 05 44 c4 1c c0 	movzwl 0xc01cc444,%eax
c01012a1:	48                   	dec    %eax
c01012a2:	0f b7 c0             	movzwl %ax,%eax
c01012a5:	66 a3 44 c4 1c c0    	mov    %ax,0xc01cc444
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c01012ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01012ae:	98                   	cwtl   
c01012af:	25 00 ff ff ff       	and    $0xffffff00,%eax
c01012b4:	98                   	cwtl   
c01012b5:	83 c8 20             	or     $0x20,%eax
c01012b8:	98                   	cwtl   
c01012b9:	8b 0d 40 c4 1c c0    	mov    0xc01cc440,%ecx
c01012bf:	0f b7 15 44 c4 1c c0 	movzwl 0xc01cc444,%edx
c01012c6:	01 d2                	add    %edx,%edx
c01012c8:	01 ca                	add    %ecx,%edx
c01012ca:	0f b7 c0             	movzwl %ax,%eax
c01012cd:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c01012d0:	eb 77                	jmp    c0101349 <cga_putc+0xfd>
    case '\n':
        crt_pos += CRT_COLS;
c01012d2:	0f b7 05 44 c4 1c c0 	movzwl 0xc01cc444,%eax
c01012d9:	83 c0 50             	add    $0x50,%eax
c01012dc:	0f b7 c0             	movzwl %ax,%eax
c01012df:	66 a3 44 c4 1c c0    	mov    %ax,0xc01cc444
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c01012e5:	0f b7 1d 44 c4 1c c0 	movzwl 0xc01cc444,%ebx
c01012ec:	0f b7 0d 44 c4 1c c0 	movzwl 0xc01cc444,%ecx
c01012f3:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
c01012f8:	89 c8                	mov    %ecx,%eax
c01012fa:	f7 e2                	mul    %edx
c01012fc:	c1 ea 06             	shr    $0x6,%edx
c01012ff:	89 d0                	mov    %edx,%eax
c0101301:	c1 e0 02             	shl    $0x2,%eax
c0101304:	01 d0                	add    %edx,%eax
c0101306:	c1 e0 04             	shl    $0x4,%eax
c0101309:	29 c1                	sub    %eax,%ecx
c010130b:	89 ca                	mov    %ecx,%edx
c010130d:	0f b7 d2             	movzwl %dx,%edx
c0101310:	89 d8                	mov    %ebx,%eax
c0101312:	29 d0                	sub    %edx,%eax
c0101314:	0f b7 c0             	movzwl %ax,%eax
c0101317:	66 a3 44 c4 1c c0    	mov    %ax,0xc01cc444
        break;
c010131d:	eb 2b                	jmp    c010134a <cga_putc+0xfe>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c010131f:	8b 0d 40 c4 1c c0    	mov    0xc01cc440,%ecx
c0101325:	0f b7 05 44 c4 1c c0 	movzwl 0xc01cc444,%eax
c010132c:	8d 50 01             	lea    0x1(%eax),%edx
c010132f:	0f b7 d2             	movzwl %dx,%edx
c0101332:	66 89 15 44 c4 1c c0 	mov    %dx,0xc01cc444
c0101339:	01 c0                	add    %eax,%eax
c010133b:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010133e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101341:	0f b7 c0             	movzwl %ax,%eax
c0101344:	66 89 02             	mov    %ax,(%edx)
        break;
c0101347:	eb 01                	jmp    c010134a <cga_putc+0xfe>
        break;
c0101349:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c010134a:	0f b7 05 44 c4 1c c0 	movzwl 0xc01cc444,%eax
c0101351:	3d cf 07 00 00       	cmp    $0x7cf,%eax
c0101356:	76 5e                	jbe    c01013b6 <cga_putc+0x16a>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101358:	a1 40 c4 1c c0       	mov    0xc01cc440,%eax
c010135d:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101363:	a1 40 c4 1c c0       	mov    0xc01cc440,%eax
c0101368:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c010136f:	00 
c0101370:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101374:	89 04 24             	mov    %eax,(%esp)
c0101377:	e8 fb c8 00 00       	call   c010dc77 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c010137c:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101383:	eb 15                	jmp    c010139a <cga_putc+0x14e>
            crt_buf[i] = 0x0700 | ' ';
c0101385:	8b 15 40 c4 1c c0    	mov    0xc01cc440,%edx
c010138b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010138e:	01 c0                	add    %eax,%eax
c0101390:	01 d0                	add    %edx,%eax
c0101392:	66 c7 00 20 07       	movw   $0x720,(%eax)
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101397:	ff 45 f4             	incl   -0xc(%ebp)
c010139a:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c01013a1:	7e e2                	jle    c0101385 <cga_putc+0x139>
        }
        crt_pos -= CRT_COLS;
c01013a3:	0f b7 05 44 c4 1c c0 	movzwl 0xc01cc444,%eax
c01013aa:	83 e8 50             	sub    $0x50,%eax
c01013ad:	0f b7 c0             	movzwl %ax,%eax
c01013b0:	66 a3 44 c4 1c c0    	mov    %ax,0xc01cc444
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c01013b6:	0f b7 05 46 c4 1c c0 	movzwl 0xc01cc446,%eax
c01013bd:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
c01013c1:	c6 45 e5 0e          	movb   $0xe,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01013c5:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01013c9:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01013cd:	ee                   	out    %al,(%dx)
}
c01013ce:	90                   	nop
    outb(addr_6845 + 1, crt_pos >> 8);
c01013cf:	0f b7 05 44 c4 1c c0 	movzwl 0xc01cc444,%eax
c01013d6:	c1 e8 08             	shr    $0x8,%eax
c01013d9:	0f b7 c0             	movzwl %ax,%eax
c01013dc:	0f b6 c0             	movzbl %al,%eax
c01013df:	0f b7 15 46 c4 1c c0 	movzwl 0xc01cc446,%edx
c01013e6:	42                   	inc    %edx
c01013e7:	0f b7 d2             	movzwl %dx,%edx
c01013ea:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c01013ee:	88 45 e9             	mov    %al,-0x17(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01013f1:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01013f5:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01013f9:	ee                   	out    %al,(%dx)
}
c01013fa:	90                   	nop
    outb(addr_6845, 15);
c01013fb:	0f b7 05 46 c4 1c c0 	movzwl 0xc01cc446,%eax
c0101402:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101406:	c6 45 ed 0f          	movb   $0xf,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010140a:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010140e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101412:	ee                   	out    %al,(%dx)
}
c0101413:	90                   	nop
    outb(addr_6845 + 1, crt_pos);
c0101414:	0f b7 05 44 c4 1c c0 	movzwl 0xc01cc444,%eax
c010141b:	0f b6 c0             	movzbl %al,%eax
c010141e:	0f b7 15 46 c4 1c c0 	movzwl 0xc01cc446,%edx
c0101425:	42                   	inc    %edx
c0101426:	0f b7 d2             	movzwl %dx,%edx
c0101429:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
c010142d:	88 45 f1             	mov    %al,-0xf(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101430:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101434:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101438:	ee                   	out    %al,(%dx)
}
c0101439:	90                   	nop
}
c010143a:	90                   	nop
c010143b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010143e:	89 ec                	mov    %ebp,%esp
c0101440:	5d                   	pop    %ebp
c0101441:	c3                   	ret    

c0101442 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101442:	55                   	push   %ebp
c0101443:	89 e5                	mov    %esp,%ebp
c0101445:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101448:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010144f:	eb 08                	jmp    c0101459 <serial_putc_sub+0x17>
        delay();
c0101451:	e8 16 fb ff ff       	call   c0100f6c <delay>
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101456:	ff 45 fc             	incl   -0x4(%ebp)
c0101459:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010145f:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101463:	89 c2                	mov    %eax,%edx
c0101465:	ec                   	in     (%dx),%al
c0101466:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101469:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010146d:	0f b6 c0             	movzbl %al,%eax
c0101470:	83 e0 20             	and    $0x20,%eax
c0101473:	85 c0                	test   %eax,%eax
c0101475:	75 09                	jne    c0101480 <serial_putc_sub+0x3e>
c0101477:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010147e:	7e d1                	jle    c0101451 <serial_putc_sub+0xf>
    }
    outb(COM1 + COM_TX, c);
c0101480:	8b 45 08             	mov    0x8(%ebp),%eax
c0101483:	0f b6 c0             	movzbl %al,%eax
c0101486:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c010148c:	88 45 f5             	mov    %al,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010148f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101493:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101497:	ee                   	out    %al,(%dx)
}
c0101498:	90                   	nop
}
c0101499:	90                   	nop
c010149a:	89 ec                	mov    %ebp,%esp
c010149c:	5d                   	pop    %ebp
c010149d:	c3                   	ret    

c010149e <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c010149e:	55                   	push   %ebp
c010149f:	89 e5                	mov    %esp,%ebp
c01014a1:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01014a4:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01014a8:	74 0d                	je     c01014b7 <serial_putc+0x19>
        serial_putc_sub(c);
c01014aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01014ad:	89 04 24             	mov    %eax,(%esp)
c01014b0:	e8 8d ff ff ff       	call   c0101442 <serial_putc_sub>
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c01014b5:	eb 24                	jmp    c01014db <serial_putc+0x3d>
        serial_putc_sub('\b');
c01014b7:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01014be:	e8 7f ff ff ff       	call   c0101442 <serial_putc_sub>
        serial_putc_sub(' ');
c01014c3:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01014ca:	e8 73 ff ff ff       	call   c0101442 <serial_putc_sub>
        serial_putc_sub('\b');
c01014cf:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01014d6:	e8 67 ff ff ff       	call   c0101442 <serial_putc_sub>
}
c01014db:	90                   	nop
c01014dc:	89 ec                	mov    %ebp,%esp
c01014de:	5d                   	pop    %ebp
c01014df:	c3                   	ret    

c01014e0 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c01014e0:	55                   	push   %ebp
c01014e1:	89 e5                	mov    %esp,%ebp
c01014e3:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c01014e6:	eb 33                	jmp    c010151b <cons_intr+0x3b>
        if (c != 0) {
c01014e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01014ec:	74 2d                	je     c010151b <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c01014ee:	a1 64 c6 1c c0       	mov    0xc01cc664,%eax
c01014f3:	8d 50 01             	lea    0x1(%eax),%edx
c01014f6:	89 15 64 c6 1c c0    	mov    %edx,0xc01cc664
c01014fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01014ff:	88 90 60 c4 1c c0    	mov    %dl,-0x3fe33ba0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101505:	a1 64 c6 1c c0       	mov    0xc01cc664,%eax
c010150a:	3d 00 02 00 00       	cmp    $0x200,%eax
c010150f:	75 0a                	jne    c010151b <cons_intr+0x3b>
                cons.wpos = 0;
c0101511:	c7 05 64 c6 1c c0 00 	movl   $0x0,0xc01cc664
c0101518:	00 00 00 
    while ((c = (*proc)()) != -1) {
c010151b:	8b 45 08             	mov    0x8(%ebp),%eax
c010151e:	ff d0                	call   *%eax
c0101520:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101523:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101527:	75 bf                	jne    c01014e8 <cons_intr+0x8>
            }
        }
    }
}
c0101529:	90                   	nop
c010152a:	90                   	nop
c010152b:	89 ec                	mov    %ebp,%esp
c010152d:	5d                   	pop    %ebp
c010152e:	c3                   	ret    

c010152f <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c010152f:	55                   	push   %ebp
c0101530:	89 e5                	mov    %esp,%ebp
c0101532:	83 ec 10             	sub    $0x10,%esp
c0101535:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010153b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010153f:	89 c2                	mov    %eax,%edx
c0101541:	ec                   	in     (%dx),%al
c0101542:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101545:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101549:	0f b6 c0             	movzbl %al,%eax
c010154c:	83 e0 01             	and    $0x1,%eax
c010154f:	85 c0                	test   %eax,%eax
c0101551:	75 07                	jne    c010155a <serial_proc_data+0x2b>
        return -1;
c0101553:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101558:	eb 2a                	jmp    c0101584 <serial_proc_data+0x55>
c010155a:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101560:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101564:	89 c2                	mov    %eax,%edx
c0101566:	ec                   	in     (%dx),%al
c0101567:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c010156a:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c010156e:	0f b6 c0             	movzbl %al,%eax
c0101571:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101574:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101578:	75 07                	jne    c0101581 <serial_proc_data+0x52>
        c = '\b';
c010157a:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101581:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101584:	89 ec                	mov    %ebp,%esp
c0101586:	5d                   	pop    %ebp
c0101587:	c3                   	ret    

c0101588 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101588:	55                   	push   %ebp
c0101589:	89 e5                	mov    %esp,%ebp
c010158b:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010158e:	a1 48 c4 1c c0       	mov    0xc01cc448,%eax
c0101593:	85 c0                	test   %eax,%eax
c0101595:	74 0c                	je     c01015a3 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101597:	c7 04 24 2f 15 10 c0 	movl   $0xc010152f,(%esp)
c010159e:	e8 3d ff ff ff       	call   c01014e0 <cons_intr>
    }
}
c01015a3:	90                   	nop
c01015a4:	89 ec                	mov    %ebp,%esp
c01015a6:	5d                   	pop    %ebp
c01015a7:	c3                   	ret    

c01015a8 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c01015a8:	55                   	push   %ebp
c01015a9:	89 e5                	mov    %esp,%ebp
c01015ab:	83 ec 38             	sub    $0x38,%esp
c01015ae:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01015b7:	89 c2                	mov    %eax,%edx
c01015b9:	ec                   	in     (%dx),%al
c01015ba:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c01015bd:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c01015c1:	0f b6 c0             	movzbl %al,%eax
c01015c4:	83 e0 01             	and    $0x1,%eax
c01015c7:	85 c0                	test   %eax,%eax
c01015c9:	75 0a                	jne    c01015d5 <kbd_proc_data+0x2d>
        return -1;
c01015cb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01015d0:	e9 56 01 00 00       	jmp    c010172b <kbd_proc_data+0x183>
c01015d5:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01015de:	89 c2                	mov    %eax,%edx
c01015e0:	ec                   	in     (%dx),%al
c01015e1:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c01015e4:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c01015e8:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c01015eb:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c01015ef:	75 17                	jne    c0101608 <kbd_proc_data+0x60>
        // E0 escape character
        shift |= E0ESC;
c01015f1:	a1 68 c6 1c c0       	mov    0xc01cc668,%eax
c01015f6:	83 c8 40             	or     $0x40,%eax
c01015f9:	a3 68 c6 1c c0       	mov    %eax,0xc01cc668
        return 0;
c01015fe:	b8 00 00 00 00       	mov    $0x0,%eax
c0101603:	e9 23 01 00 00       	jmp    c010172b <kbd_proc_data+0x183>
    } else if (data & 0x80) {
c0101608:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010160c:	84 c0                	test   %al,%al
c010160e:	79 45                	jns    c0101655 <kbd_proc_data+0xad>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101610:	a1 68 c6 1c c0       	mov    0xc01cc668,%eax
c0101615:	83 e0 40             	and    $0x40,%eax
c0101618:	85 c0                	test   %eax,%eax
c010161a:	75 08                	jne    c0101624 <kbd_proc_data+0x7c>
c010161c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101620:	24 7f                	and    $0x7f,%al
c0101622:	eb 04                	jmp    c0101628 <kbd_proc_data+0x80>
c0101624:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101628:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c010162b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010162f:	0f b6 80 40 90 13 c0 	movzbl -0x3fec6fc0(%eax),%eax
c0101636:	0c 40                	or     $0x40,%al
c0101638:	0f b6 c0             	movzbl %al,%eax
c010163b:	f7 d0                	not    %eax
c010163d:	89 c2                	mov    %eax,%edx
c010163f:	a1 68 c6 1c c0       	mov    0xc01cc668,%eax
c0101644:	21 d0                	and    %edx,%eax
c0101646:	a3 68 c6 1c c0       	mov    %eax,0xc01cc668
        return 0;
c010164b:	b8 00 00 00 00       	mov    $0x0,%eax
c0101650:	e9 d6 00 00 00       	jmp    c010172b <kbd_proc_data+0x183>
    } else if (shift & E0ESC) {
c0101655:	a1 68 c6 1c c0       	mov    0xc01cc668,%eax
c010165a:	83 e0 40             	and    $0x40,%eax
c010165d:	85 c0                	test   %eax,%eax
c010165f:	74 11                	je     c0101672 <kbd_proc_data+0xca>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101661:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101665:	a1 68 c6 1c c0       	mov    0xc01cc668,%eax
c010166a:	83 e0 bf             	and    $0xffffffbf,%eax
c010166d:	a3 68 c6 1c c0       	mov    %eax,0xc01cc668
    }

    shift |= shiftcode[data];
c0101672:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101676:	0f b6 80 40 90 13 c0 	movzbl -0x3fec6fc0(%eax),%eax
c010167d:	0f b6 d0             	movzbl %al,%edx
c0101680:	a1 68 c6 1c c0       	mov    0xc01cc668,%eax
c0101685:	09 d0                	or     %edx,%eax
c0101687:	a3 68 c6 1c c0       	mov    %eax,0xc01cc668
    shift ^= togglecode[data];
c010168c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101690:	0f b6 80 40 91 13 c0 	movzbl -0x3fec6ec0(%eax),%eax
c0101697:	0f b6 d0             	movzbl %al,%edx
c010169a:	a1 68 c6 1c c0       	mov    0xc01cc668,%eax
c010169f:	31 d0                	xor    %edx,%eax
c01016a1:	a3 68 c6 1c c0       	mov    %eax,0xc01cc668

    c = charcode[shift & (CTL | SHIFT)][data];
c01016a6:	a1 68 c6 1c c0       	mov    0xc01cc668,%eax
c01016ab:	83 e0 03             	and    $0x3,%eax
c01016ae:	8b 14 85 40 95 13 c0 	mov    -0x3fec6ac0(,%eax,4),%edx
c01016b5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016b9:	01 d0                	add    %edx,%eax
c01016bb:	0f b6 00             	movzbl (%eax),%eax
c01016be:	0f b6 c0             	movzbl %al,%eax
c01016c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c01016c4:	a1 68 c6 1c c0       	mov    0xc01cc668,%eax
c01016c9:	83 e0 08             	and    $0x8,%eax
c01016cc:	85 c0                	test   %eax,%eax
c01016ce:	74 22                	je     c01016f2 <kbd_proc_data+0x14a>
        if ('a' <= c && c <= 'z')
c01016d0:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c01016d4:	7e 0c                	jle    c01016e2 <kbd_proc_data+0x13a>
c01016d6:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c01016da:	7f 06                	jg     c01016e2 <kbd_proc_data+0x13a>
            c += 'A' - 'a';
c01016dc:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c01016e0:	eb 10                	jmp    c01016f2 <kbd_proc_data+0x14a>
        else if ('A' <= c && c <= 'Z')
c01016e2:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c01016e6:	7e 0a                	jle    c01016f2 <kbd_proc_data+0x14a>
c01016e8:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c01016ec:	7f 04                	jg     c01016f2 <kbd_proc_data+0x14a>
            c += 'a' - 'A';
c01016ee:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c01016f2:	a1 68 c6 1c c0       	mov    0xc01cc668,%eax
c01016f7:	f7 d0                	not    %eax
c01016f9:	83 e0 06             	and    $0x6,%eax
c01016fc:	85 c0                	test   %eax,%eax
c01016fe:	75 28                	jne    c0101728 <kbd_proc_data+0x180>
c0101700:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101707:	75 1f                	jne    c0101728 <kbd_proc_data+0x180>
        cprintf("Rebooting!\n");
c0101709:	c7 04 24 1f e1 10 c0 	movl   $0xc010e11f,(%esp)
c0101710:	e8 5d ec ff ff       	call   c0100372 <cprintf>
c0101715:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c010171b:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010171f:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0101723:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0101726:	ee                   	out    %al,(%dx)
}
c0101727:	90                   	nop
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101728:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010172b:	89 ec                	mov    %ebp,%esp
c010172d:	5d                   	pop    %ebp
c010172e:	c3                   	ret    

c010172f <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c010172f:	55                   	push   %ebp
c0101730:	89 e5                	mov    %esp,%ebp
c0101732:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c0101735:	c7 04 24 a8 15 10 c0 	movl   $0xc01015a8,(%esp)
c010173c:	e8 9f fd ff ff       	call   c01014e0 <cons_intr>
}
c0101741:	90                   	nop
c0101742:	89 ec                	mov    %ebp,%esp
c0101744:	5d                   	pop    %ebp
c0101745:	c3                   	ret    

c0101746 <kbd_init>:

static void
kbd_init(void) {
c0101746:	55                   	push   %ebp
c0101747:	89 e5                	mov    %esp,%ebp
c0101749:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c010174c:	e8 de ff ff ff       	call   c010172f <kbd_intr>
    pic_enable(IRQ_KBD);
c0101751:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0101758:	e8 ae 09 00 00       	call   c010210b <pic_enable>
}
c010175d:	90                   	nop
c010175e:	89 ec                	mov    %ebp,%esp
c0101760:	5d                   	pop    %ebp
c0101761:	c3                   	ret    

c0101762 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101762:	55                   	push   %ebp
c0101763:	89 e5                	mov    %esp,%ebp
c0101765:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c0101768:	e8 4a f8 ff ff       	call   c0100fb7 <cga_init>
    serial_init();
c010176d:	e8 2d f9 ff ff       	call   c010109f <serial_init>
    kbd_init();
c0101772:	e8 cf ff ff ff       	call   c0101746 <kbd_init>
    if (!serial_exists) {
c0101777:	a1 48 c4 1c c0       	mov    0xc01cc448,%eax
c010177c:	85 c0                	test   %eax,%eax
c010177e:	75 0c                	jne    c010178c <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c0101780:	c7 04 24 2b e1 10 c0 	movl   $0xc010e12b,(%esp)
c0101787:	e8 e6 eb ff ff       	call   c0100372 <cprintf>
    }
}
c010178c:	90                   	nop
c010178d:	89 ec                	mov    %ebp,%esp
c010178f:	5d                   	pop    %ebp
c0101790:	c3                   	ret    

c0101791 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101791:	55                   	push   %ebp
c0101792:	89 e5                	mov    %esp,%ebp
c0101794:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101797:	e8 8e f7 ff ff       	call   c0100f2a <__intr_save>
c010179c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c010179f:	8b 45 08             	mov    0x8(%ebp),%eax
c01017a2:	89 04 24             	mov    %eax,(%esp)
c01017a5:	e8 60 fa ff ff       	call   c010120a <lpt_putc>
        cga_putc(c);
c01017aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01017ad:	89 04 24             	mov    %eax,(%esp)
c01017b0:	e8 97 fa ff ff       	call   c010124c <cga_putc>
        serial_putc(c);
c01017b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01017b8:	89 04 24             	mov    %eax,(%esp)
c01017bb:	e8 de fc ff ff       	call   c010149e <serial_putc>
    }
    local_intr_restore(intr_flag);
c01017c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01017c3:	89 04 24             	mov    %eax,(%esp)
c01017c6:	e8 8b f7 ff ff       	call   c0100f56 <__intr_restore>
}
c01017cb:	90                   	nop
c01017cc:	89 ec                	mov    %ebp,%esp
c01017ce:	5d                   	pop    %ebp
c01017cf:	c3                   	ret    

c01017d0 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c01017d0:	55                   	push   %ebp
c01017d1:	89 e5                	mov    %esp,%ebp
c01017d3:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c01017d6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c01017dd:	e8 48 f7 ff ff       	call   c0100f2a <__intr_save>
c01017e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c01017e5:	e8 9e fd ff ff       	call   c0101588 <serial_intr>
        kbd_intr();
c01017ea:	e8 40 ff ff ff       	call   c010172f <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c01017ef:	8b 15 60 c6 1c c0    	mov    0xc01cc660,%edx
c01017f5:	a1 64 c6 1c c0       	mov    0xc01cc664,%eax
c01017fa:	39 c2                	cmp    %eax,%edx
c01017fc:	74 31                	je     c010182f <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c01017fe:	a1 60 c6 1c c0       	mov    0xc01cc660,%eax
c0101803:	8d 50 01             	lea    0x1(%eax),%edx
c0101806:	89 15 60 c6 1c c0    	mov    %edx,0xc01cc660
c010180c:	0f b6 80 60 c4 1c c0 	movzbl -0x3fe33ba0(%eax),%eax
c0101813:	0f b6 c0             	movzbl %al,%eax
c0101816:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101819:	a1 60 c6 1c c0       	mov    0xc01cc660,%eax
c010181e:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101823:	75 0a                	jne    c010182f <cons_getc+0x5f>
                cons.rpos = 0;
c0101825:	c7 05 60 c6 1c c0 00 	movl   $0x0,0xc01cc660
c010182c:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c010182f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101832:	89 04 24             	mov    %eax,(%esp)
c0101835:	e8 1c f7 ff ff       	call   c0100f56 <__intr_restore>
    return c;
c010183a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010183d:	89 ec                	mov    %ebp,%esp
c010183f:	5d                   	pop    %ebp
c0101840:	c3                   	ret    

c0101841 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0101841:	55                   	push   %ebp
c0101842:	89 e5                	mov    %esp,%ebp
c0101844:	83 ec 14             	sub    $0x14,%esp
c0101847:	8b 45 08             	mov    0x8(%ebp),%eax
c010184a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c010184e:	90                   	nop
c010184f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101852:	83 c0 07             	add    $0x7,%eax
c0101855:	0f b7 c0             	movzwl %ax,%eax
c0101858:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010185c:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101860:	89 c2                	mov    %eax,%edx
c0101862:	ec                   	in     (%dx),%al
c0101863:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101866:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010186a:	0f b6 c0             	movzbl %al,%eax
c010186d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0101870:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101873:	25 80 00 00 00       	and    $0x80,%eax
c0101878:	85 c0                	test   %eax,%eax
c010187a:	75 d3                	jne    c010184f <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c010187c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0101880:	74 11                	je     c0101893 <ide_wait_ready+0x52>
c0101882:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101885:	83 e0 21             	and    $0x21,%eax
c0101888:	85 c0                	test   %eax,%eax
c010188a:	74 07                	je     c0101893 <ide_wait_ready+0x52>
        return -1;
c010188c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101891:	eb 05                	jmp    c0101898 <ide_wait_ready+0x57>
    }
    return 0;
c0101893:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101898:	89 ec                	mov    %ebp,%esp
c010189a:	5d                   	pop    %ebp
c010189b:	c3                   	ret    

c010189c <ide_init>:

void
ide_init(void) {
c010189c:	55                   	push   %ebp
c010189d:	89 e5                	mov    %esp,%ebp
c010189f:	57                   	push   %edi
c01018a0:	53                   	push   %ebx
c01018a1:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01018a7:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c01018ad:	e9 bd 02 00 00       	jmp    c0101b6f <ide_init+0x2d3>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c01018b2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01018b6:	89 d0                	mov    %edx,%eax
c01018b8:	c1 e0 03             	shl    $0x3,%eax
c01018bb:	29 d0                	sub    %edx,%eax
c01018bd:	c1 e0 03             	shl    $0x3,%eax
c01018c0:	05 80 c6 1c c0       	add    $0xc01cc680,%eax
c01018c5:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c01018c8:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01018cc:	d1 e8                	shr    %eax
c01018ce:	0f b7 c0             	movzwl %ax,%eax
c01018d1:	8b 04 85 4c e1 10 c0 	mov    -0x3fef1eb4(,%eax,4),%eax
c01018d8:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c01018dc:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018e0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01018e7:	00 
c01018e8:	89 04 24             	mov    %eax,(%esp)
c01018eb:	e8 51 ff ff ff       	call   c0101841 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c01018f0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01018f4:	c1 e0 04             	shl    $0x4,%eax
c01018f7:	24 10                	and    $0x10,%al
c01018f9:	0c e0                	or     $0xe0,%al
c01018fb:	0f b6 c0             	movzbl %al,%eax
c01018fe:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101902:	83 c2 06             	add    $0x6,%edx
c0101905:	0f b7 d2             	movzwl %dx,%edx
c0101908:	66 89 55 ca          	mov    %dx,-0x36(%ebp)
c010190c:	88 45 c9             	mov    %al,-0x37(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010190f:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0101913:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0101917:	ee                   	out    %al,(%dx)
}
c0101918:	90                   	nop
        ide_wait_ready(iobase, 0);
c0101919:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010191d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101924:	00 
c0101925:	89 04 24             	mov    %eax,(%esp)
c0101928:	e8 14 ff ff ff       	call   c0101841 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c010192d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101931:	83 c0 07             	add    $0x7,%eax
c0101934:	0f b7 c0             	movzwl %ax,%eax
c0101937:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c010193b:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010193f:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0101943:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0101947:	ee                   	out    %al,(%dx)
}
c0101948:	90                   	nop
        ide_wait_ready(iobase, 0);
c0101949:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010194d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101954:	00 
c0101955:	89 04 24             	mov    %eax,(%esp)
c0101958:	e8 e4 fe ff ff       	call   c0101841 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c010195d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101961:	83 c0 07             	add    $0x7,%eax
c0101964:	0f b7 c0             	movzwl %ax,%eax
c0101967:	66 89 45 d2          	mov    %ax,-0x2e(%ebp)
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010196b:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c010196f:	89 c2                	mov    %eax,%edx
c0101971:	ec                   	in     (%dx),%al
c0101972:	88 45 d1             	mov    %al,-0x2f(%ebp)
    return data;
c0101975:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101979:	84 c0                	test   %al,%al
c010197b:	0f 84 e4 01 00 00    	je     c0101b65 <ide_init+0x2c9>
c0101981:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101985:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010198c:	00 
c010198d:	89 04 24             	mov    %eax,(%esp)
c0101990:	e8 ac fe ff ff       	call   c0101841 <ide_wait_ready>
c0101995:	85 c0                	test   %eax,%eax
c0101997:	0f 85 c8 01 00 00    	jne    c0101b65 <ide_init+0x2c9>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c010199d:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01019a1:	89 d0                	mov    %edx,%eax
c01019a3:	c1 e0 03             	shl    $0x3,%eax
c01019a6:	29 d0                	sub    %edx,%eax
c01019a8:	c1 e0 03             	shl    $0x3,%eax
c01019ab:	05 80 c6 1c c0       	add    $0xc01cc680,%eax
c01019b0:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c01019b3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01019b7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01019ba:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c01019c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
c01019c3:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    asm volatile (
c01019ca:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01019cd:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c01019d0:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01019d3:	89 cb                	mov    %ecx,%ebx
c01019d5:	89 df                	mov    %ebx,%edi
c01019d7:	89 c1                	mov    %eax,%ecx
c01019d9:	fc                   	cld    
c01019da:	f2 6d                	repnz insl (%dx),%es:(%edi)
c01019dc:	89 c8                	mov    %ecx,%eax
c01019de:	89 fb                	mov    %edi,%ebx
c01019e0:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c01019e3:	89 45 bc             	mov    %eax,-0x44(%ebp)
}
c01019e6:	90                   	nop

        unsigned char *ident = (unsigned char *)buffer;
c01019e7:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c01019ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c01019f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01019f3:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c01019f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c01019fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01019ff:	25 00 00 00 04       	and    $0x4000000,%eax
c0101a04:	85 c0                	test   %eax,%eax
c0101a06:	74 0e                	je     c0101a16 <ide_init+0x17a>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101a08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a0b:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101a11:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101a14:	eb 09                	jmp    c0101a1f <ide_init+0x183>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101a16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a19:	8b 40 78             	mov    0x78(%eax),%eax
c0101a1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101a1f:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101a23:	89 d0                	mov    %edx,%eax
c0101a25:	c1 e0 03             	shl    $0x3,%eax
c0101a28:	29 d0                	sub    %edx,%eax
c0101a2a:	c1 e0 03             	shl    $0x3,%eax
c0101a2d:	8d 90 84 c6 1c c0    	lea    -0x3fe3397c(%eax),%edx
c0101a33:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a36:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c0101a38:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101a3c:	89 d0                	mov    %edx,%eax
c0101a3e:	c1 e0 03             	shl    $0x3,%eax
c0101a41:	29 d0                	sub    %edx,%eax
c0101a43:	c1 e0 03             	shl    $0x3,%eax
c0101a46:	8d 90 88 c6 1c c0    	lea    -0x3fe33978(%eax),%edx
c0101a4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101a4f:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101a51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a54:	83 c0 62             	add    $0x62,%eax
c0101a57:	0f b7 00             	movzwl (%eax),%eax
c0101a5a:	25 00 02 00 00       	and    $0x200,%eax
c0101a5f:	85 c0                	test   %eax,%eax
c0101a61:	75 24                	jne    c0101a87 <ide_init+0x1eb>
c0101a63:	c7 44 24 0c 54 e1 10 	movl   $0xc010e154,0xc(%esp)
c0101a6a:	c0 
c0101a6b:	c7 44 24 08 97 e1 10 	movl   $0xc010e197,0x8(%esp)
c0101a72:	c0 
c0101a73:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101a7a:	00 
c0101a7b:	c7 04 24 ac e1 10 c0 	movl   $0xc010e1ac,(%esp)
c0101a82:	e8 69 f3 ff ff       	call   c0100df0 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101a87:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101a8b:	89 d0                	mov    %edx,%eax
c0101a8d:	c1 e0 03             	shl    $0x3,%eax
c0101a90:	29 d0                	sub    %edx,%eax
c0101a92:	c1 e0 03             	shl    $0x3,%eax
c0101a95:	05 80 c6 1c c0       	add    $0xc01cc680,%eax
c0101a9a:	83 c0 0c             	add    $0xc,%eax
c0101a9d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101aa0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101aa3:	83 c0 36             	add    $0x36,%eax
c0101aa6:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101aa9:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101ab0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101ab7:	eb 34                	jmp    c0101aed <ide_init+0x251>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101ab9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101abc:	8d 50 01             	lea    0x1(%eax),%edx
c0101abf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101ac2:	01 c2                	add    %eax,%edx
c0101ac4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0101ac7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101aca:	01 c8                	add    %ecx,%eax
c0101acc:	0f b6 12             	movzbl (%edx),%edx
c0101acf:	88 10                	mov    %dl,(%eax)
c0101ad1:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0101ad4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101ad7:	01 c2                	add    %eax,%edx
c0101ad9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101adc:	8d 48 01             	lea    0x1(%eax),%ecx
c0101adf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101ae2:	01 c8                	add    %ecx,%eax
c0101ae4:	0f b6 12             	movzbl (%edx),%edx
c0101ae7:	88 10                	mov    %dl,(%eax)
        for (i = 0; i < length; i += 2) {
c0101ae9:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101aed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101af0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101af3:	72 c4                	jb     c0101ab9 <ide_init+0x21d>
        }
        do {
            model[i] = '\0';
c0101af5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101af8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101afb:	01 d0                	add    %edx,%eax
c0101afd:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b03:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101b06:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101b09:	85 c0                	test   %eax,%eax
c0101b0b:	74 0f                	je     c0101b1c <ide_init+0x280>
c0101b0d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b10:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101b13:	01 d0                	add    %edx,%eax
c0101b15:	0f b6 00             	movzbl (%eax),%eax
c0101b18:	3c 20                	cmp    $0x20,%al
c0101b1a:	74 d9                	je     c0101af5 <ide_init+0x259>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101b1c:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101b20:	89 d0                	mov    %edx,%eax
c0101b22:	c1 e0 03             	shl    $0x3,%eax
c0101b25:	29 d0                	sub    %edx,%eax
c0101b27:	c1 e0 03             	shl    $0x3,%eax
c0101b2a:	05 80 c6 1c c0       	add    $0xc01cc680,%eax
c0101b2f:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101b32:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101b36:	89 d0                	mov    %edx,%eax
c0101b38:	c1 e0 03             	shl    $0x3,%eax
c0101b3b:	29 d0                	sub    %edx,%eax
c0101b3d:	c1 e0 03             	shl    $0x3,%eax
c0101b40:	05 88 c6 1c c0       	add    $0xc01cc688,%eax
c0101b45:	8b 10                	mov    (%eax),%edx
c0101b47:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b4b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101b4f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101b53:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101b57:	c7 04 24 be e1 10 c0 	movl   $0xc010e1be,(%esp)
c0101b5e:	e8 0f e8 ff ff       	call   c0100372 <cprintf>
c0101b63:	eb 01                	jmp    c0101b66 <ide_init+0x2ca>
            continue ;
c0101b65:	90                   	nop
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101b66:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b6a:	40                   	inc    %eax
c0101b6b:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101b6f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101b73:	83 f8 03             	cmp    $0x3,%eax
c0101b76:	0f 86 36 fd ff ff    	jbe    c01018b2 <ide_init+0x16>
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101b7c:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101b83:	e8 83 05 00 00       	call   c010210b <pic_enable>
    pic_enable(IRQ_IDE2);
c0101b88:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101b8f:	e8 77 05 00 00       	call   c010210b <pic_enable>
}
c0101b94:	90                   	nop
c0101b95:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101b9b:	5b                   	pop    %ebx
c0101b9c:	5f                   	pop    %edi
c0101b9d:	5d                   	pop    %ebp
c0101b9e:	c3                   	ret    

c0101b9f <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101b9f:	55                   	push   %ebp
c0101ba0:	89 e5                	mov    %esp,%ebp
c0101ba2:	83 ec 04             	sub    $0x4,%esp
c0101ba5:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ba8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101bac:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101bb0:	83 f8 03             	cmp    $0x3,%eax
c0101bb3:	77 21                	ja     c0101bd6 <ide_device_valid+0x37>
c0101bb5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0101bb9:	89 d0                	mov    %edx,%eax
c0101bbb:	c1 e0 03             	shl    $0x3,%eax
c0101bbe:	29 d0                	sub    %edx,%eax
c0101bc0:	c1 e0 03             	shl    $0x3,%eax
c0101bc3:	05 80 c6 1c c0       	add    $0xc01cc680,%eax
c0101bc8:	0f b6 00             	movzbl (%eax),%eax
c0101bcb:	84 c0                	test   %al,%al
c0101bcd:	74 07                	je     c0101bd6 <ide_device_valid+0x37>
c0101bcf:	b8 01 00 00 00       	mov    $0x1,%eax
c0101bd4:	eb 05                	jmp    c0101bdb <ide_device_valid+0x3c>
c0101bd6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101bdb:	89 ec                	mov    %ebp,%esp
c0101bdd:	5d                   	pop    %ebp
c0101bde:	c3                   	ret    

c0101bdf <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101bdf:	55                   	push   %ebp
c0101be0:	89 e5                	mov    %esp,%ebp
c0101be2:	83 ec 08             	sub    $0x8,%esp
c0101be5:	8b 45 08             	mov    0x8(%ebp),%eax
c0101be8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101bec:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101bf0:	89 04 24             	mov    %eax,(%esp)
c0101bf3:	e8 a7 ff ff ff       	call   c0101b9f <ide_device_valid>
c0101bf8:	85 c0                	test   %eax,%eax
c0101bfa:	74 17                	je     c0101c13 <ide_device_size+0x34>
        return ide_devices[ideno].size;
c0101bfc:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0101c00:	89 d0                	mov    %edx,%eax
c0101c02:	c1 e0 03             	shl    $0x3,%eax
c0101c05:	29 d0                	sub    %edx,%eax
c0101c07:	c1 e0 03             	shl    $0x3,%eax
c0101c0a:	05 88 c6 1c c0       	add    $0xc01cc688,%eax
c0101c0f:	8b 00                	mov    (%eax),%eax
c0101c11:	eb 05                	jmp    c0101c18 <ide_device_size+0x39>
    }
    return 0;
c0101c13:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c18:	89 ec                	mov    %ebp,%esp
c0101c1a:	5d                   	pop    %ebp
c0101c1b:	c3                   	ret    

c0101c1c <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101c1c:	55                   	push   %ebp
c0101c1d:	89 e5                	mov    %esp,%ebp
c0101c1f:	57                   	push   %edi
c0101c20:	53                   	push   %ebx
c0101c21:	83 ec 50             	sub    $0x50,%esp
c0101c24:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c27:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101c2b:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101c32:	77 23                	ja     c0101c57 <ide_read_secs+0x3b>
c0101c34:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c38:	83 f8 03             	cmp    $0x3,%eax
c0101c3b:	77 1a                	ja     c0101c57 <ide_read_secs+0x3b>
c0101c3d:	0f b7 55 c4          	movzwl -0x3c(%ebp),%edx
c0101c41:	89 d0                	mov    %edx,%eax
c0101c43:	c1 e0 03             	shl    $0x3,%eax
c0101c46:	29 d0                	sub    %edx,%eax
c0101c48:	c1 e0 03             	shl    $0x3,%eax
c0101c4b:	05 80 c6 1c c0       	add    $0xc01cc680,%eax
c0101c50:	0f b6 00             	movzbl (%eax),%eax
c0101c53:	84 c0                	test   %al,%al
c0101c55:	75 24                	jne    c0101c7b <ide_read_secs+0x5f>
c0101c57:	c7 44 24 0c dc e1 10 	movl   $0xc010e1dc,0xc(%esp)
c0101c5e:	c0 
c0101c5f:	c7 44 24 08 97 e1 10 	movl   $0xc010e197,0x8(%esp)
c0101c66:	c0 
c0101c67:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101c6e:	00 
c0101c6f:	c7 04 24 ac e1 10 c0 	movl   $0xc010e1ac,(%esp)
c0101c76:	e8 75 f1 ff ff       	call   c0100df0 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101c7b:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101c82:	77 0f                	ja     c0101c93 <ide_read_secs+0x77>
c0101c84:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101c87:	8b 45 14             	mov    0x14(%ebp),%eax
c0101c8a:	01 d0                	add    %edx,%eax
c0101c8c:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101c91:	76 24                	jbe    c0101cb7 <ide_read_secs+0x9b>
c0101c93:	c7 44 24 0c 04 e2 10 	movl   $0xc010e204,0xc(%esp)
c0101c9a:	c0 
c0101c9b:	c7 44 24 08 97 e1 10 	movl   $0xc010e197,0x8(%esp)
c0101ca2:	c0 
c0101ca3:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101caa:	00 
c0101cab:	c7 04 24 ac e1 10 c0 	movl   $0xc010e1ac,(%esp)
c0101cb2:	e8 39 f1 ff ff       	call   c0100df0 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101cb7:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101cbb:	d1 e8                	shr    %eax
c0101cbd:	0f b7 c0             	movzwl %ax,%eax
c0101cc0:	8b 04 85 4c e1 10 c0 	mov    -0x3fef1eb4(,%eax,4),%eax
c0101cc7:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101ccb:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101ccf:	d1 e8                	shr    %eax
c0101cd1:	0f b7 c0             	movzwl %ax,%eax
c0101cd4:	0f b7 04 85 4e e1 10 	movzwl -0x3fef1eb2(,%eax,4),%eax
c0101cdb:	c0 
c0101cdc:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101ce0:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101ce4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101ceb:	00 
c0101cec:	89 04 24             	mov    %eax,(%esp)
c0101cef:	e8 4d fb ff ff       	call   c0101841 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101cf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101cf7:	83 c0 02             	add    $0x2,%eax
c0101cfa:	0f b7 c0             	movzwl %ax,%eax
c0101cfd:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101d01:	c6 45 d5 00          	movb   $0x0,-0x2b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d05:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101d09:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101d0d:	ee                   	out    %al,(%dx)
}
c0101d0e:	90                   	nop
    outb(iobase + ISA_SECCNT, nsecs);
c0101d0f:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d12:	0f b6 c0             	movzbl %al,%eax
c0101d15:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d19:	83 c2 02             	add    $0x2,%edx
c0101d1c:	0f b7 d2             	movzwl %dx,%edx
c0101d1f:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101d23:	88 45 d9             	mov    %al,-0x27(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d26:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101d2a:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101d2e:	ee                   	out    %al,(%dx)
}
c0101d2f:	90                   	nop
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101d30:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d33:	0f b6 c0             	movzbl %al,%eax
c0101d36:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d3a:	83 c2 03             	add    $0x3,%edx
c0101d3d:	0f b7 d2             	movzwl %dx,%edx
c0101d40:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101d44:	88 45 dd             	mov    %al,-0x23(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d47:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101d4b:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101d4f:	ee                   	out    %al,(%dx)
}
c0101d50:	90                   	nop
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101d51:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d54:	c1 e8 08             	shr    $0x8,%eax
c0101d57:	0f b6 c0             	movzbl %al,%eax
c0101d5a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d5e:	83 c2 04             	add    $0x4,%edx
c0101d61:	0f b7 d2             	movzwl %dx,%edx
c0101d64:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101d68:	88 45 e1             	mov    %al,-0x1f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d6b:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101d6f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d73:	ee                   	out    %al,(%dx)
}
c0101d74:	90                   	nop
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101d75:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d78:	c1 e8 10             	shr    $0x10,%eax
c0101d7b:	0f b6 c0             	movzbl %al,%eax
c0101d7e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d82:	83 c2 05             	add    $0x5,%edx
c0101d85:	0f b7 d2             	movzwl %dx,%edx
c0101d88:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101d8c:	88 45 e5             	mov    %al,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d8f:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101d93:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101d97:	ee                   	out    %al,(%dx)
}
c0101d98:	90                   	nop
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101d99:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0101d9c:	c0 e0 04             	shl    $0x4,%al
c0101d9f:	24 10                	and    $0x10,%al
c0101da1:	88 c2                	mov    %al,%dl
c0101da3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101da6:	c1 e8 18             	shr    $0x18,%eax
c0101da9:	24 0f                	and    $0xf,%al
c0101dab:	08 d0                	or     %dl,%al
c0101dad:	0c e0                	or     $0xe0,%al
c0101daf:	0f b6 c0             	movzbl %al,%eax
c0101db2:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101db6:	83 c2 06             	add    $0x6,%edx
c0101db9:	0f b7 d2             	movzwl %dx,%edx
c0101dbc:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101dc0:	88 45 e9             	mov    %al,-0x17(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101dc3:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101dc7:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101dcb:	ee                   	out    %al,(%dx)
}
c0101dcc:	90                   	nop
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101dcd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101dd1:	83 c0 07             	add    $0x7,%eax
c0101dd4:	0f b7 c0             	movzwl %ax,%eax
c0101dd7:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101ddb:	c6 45 ed 20          	movb   $0x20,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ddf:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101de3:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101de7:	ee                   	out    %al,(%dx)
}
c0101de8:	90                   	nop

    int ret = 0;
c0101de9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101df0:	eb 58                	jmp    c0101e4a <ide_read_secs+0x22e>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101df2:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101df6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101dfd:	00 
c0101dfe:	89 04 24             	mov    %eax,(%esp)
c0101e01:	e8 3b fa ff ff       	call   c0101841 <ide_wait_ready>
c0101e06:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101e09:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101e0d:	75 43                	jne    c0101e52 <ide_read_secs+0x236>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101e0f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101e13:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101e16:	8b 45 10             	mov    0x10(%ebp),%eax
c0101e19:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101e1c:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile (
c0101e23:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101e26:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101e29:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101e2c:	89 cb                	mov    %ecx,%ebx
c0101e2e:	89 df                	mov    %ebx,%edi
c0101e30:	89 c1                	mov    %eax,%ecx
c0101e32:	fc                   	cld    
c0101e33:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101e35:	89 c8                	mov    %ecx,%eax
c0101e37:	89 fb                	mov    %edi,%ebx
c0101e39:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101e3c:	89 45 c8             	mov    %eax,-0x38(%ebp)
}
c0101e3f:	90                   	nop
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e40:	ff 4d 14             	decl   0x14(%ebp)
c0101e43:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101e4a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101e4e:	75 a2                	jne    c0101df2 <ide_read_secs+0x1d6>
    }

out:
c0101e50:	eb 01                	jmp    c0101e53 <ide_read_secs+0x237>
            goto out;
c0101e52:	90                   	nop
    return ret;
c0101e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101e56:	83 c4 50             	add    $0x50,%esp
c0101e59:	5b                   	pop    %ebx
c0101e5a:	5f                   	pop    %edi
c0101e5b:	5d                   	pop    %ebp
c0101e5c:	c3                   	ret    

c0101e5d <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101e5d:	55                   	push   %ebp
c0101e5e:	89 e5                	mov    %esp,%ebp
c0101e60:	56                   	push   %esi
c0101e61:	53                   	push   %ebx
c0101e62:	83 ec 50             	sub    $0x50,%esp
c0101e65:	8b 45 08             	mov    0x8(%ebp),%eax
c0101e68:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101e6c:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101e73:	77 23                	ja     c0101e98 <ide_write_secs+0x3b>
c0101e75:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e79:	83 f8 03             	cmp    $0x3,%eax
c0101e7c:	77 1a                	ja     c0101e98 <ide_write_secs+0x3b>
c0101e7e:	0f b7 55 c4          	movzwl -0x3c(%ebp),%edx
c0101e82:	89 d0                	mov    %edx,%eax
c0101e84:	c1 e0 03             	shl    $0x3,%eax
c0101e87:	29 d0                	sub    %edx,%eax
c0101e89:	c1 e0 03             	shl    $0x3,%eax
c0101e8c:	05 80 c6 1c c0       	add    $0xc01cc680,%eax
c0101e91:	0f b6 00             	movzbl (%eax),%eax
c0101e94:	84 c0                	test   %al,%al
c0101e96:	75 24                	jne    c0101ebc <ide_write_secs+0x5f>
c0101e98:	c7 44 24 0c dc e1 10 	movl   $0xc010e1dc,0xc(%esp)
c0101e9f:	c0 
c0101ea0:	c7 44 24 08 97 e1 10 	movl   $0xc010e197,0x8(%esp)
c0101ea7:	c0 
c0101ea8:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101eaf:	00 
c0101eb0:	c7 04 24 ac e1 10 c0 	movl   $0xc010e1ac,(%esp)
c0101eb7:	e8 34 ef ff ff       	call   c0100df0 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101ebc:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101ec3:	77 0f                	ja     c0101ed4 <ide_write_secs+0x77>
c0101ec5:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101ec8:	8b 45 14             	mov    0x14(%ebp),%eax
c0101ecb:	01 d0                	add    %edx,%eax
c0101ecd:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101ed2:	76 24                	jbe    c0101ef8 <ide_write_secs+0x9b>
c0101ed4:	c7 44 24 0c 04 e2 10 	movl   $0xc010e204,0xc(%esp)
c0101edb:	c0 
c0101edc:	c7 44 24 08 97 e1 10 	movl   $0xc010e197,0x8(%esp)
c0101ee3:	c0 
c0101ee4:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101eeb:	00 
c0101eec:	c7 04 24 ac e1 10 c0 	movl   $0xc010e1ac,(%esp)
c0101ef3:	e8 f8 ee ff ff       	call   c0100df0 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101ef8:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101efc:	d1 e8                	shr    %eax
c0101efe:	0f b7 c0             	movzwl %ax,%eax
c0101f01:	8b 04 85 4c e1 10 c0 	mov    -0x3fef1eb4(,%eax,4),%eax
c0101f08:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101f0c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f10:	d1 e8                	shr    %eax
c0101f12:	0f b7 c0             	movzwl %ax,%eax
c0101f15:	0f b7 04 85 4e e1 10 	movzwl -0x3fef1eb2(,%eax,4),%eax
c0101f1c:	c0 
c0101f1d:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101f21:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101f25:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101f2c:	00 
c0101f2d:	89 04 24             	mov    %eax,(%esp)
c0101f30:	e8 0c f9 ff ff       	call   c0101841 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101f35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101f38:	83 c0 02             	add    $0x2,%eax
c0101f3b:	0f b7 c0             	movzwl %ax,%eax
c0101f3e:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101f42:	c6 45 d5 00          	movb   $0x0,-0x2b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101f46:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101f4a:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101f4e:	ee                   	out    %al,(%dx)
}
c0101f4f:	90                   	nop
    outb(iobase + ISA_SECCNT, nsecs);
c0101f50:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f53:	0f b6 c0             	movzbl %al,%eax
c0101f56:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f5a:	83 c2 02             	add    $0x2,%edx
c0101f5d:	0f b7 d2             	movzwl %dx,%edx
c0101f60:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101f64:	88 45 d9             	mov    %al,-0x27(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101f67:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101f6b:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101f6f:	ee                   	out    %al,(%dx)
}
c0101f70:	90                   	nop
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101f71:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f74:	0f b6 c0             	movzbl %al,%eax
c0101f77:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f7b:	83 c2 03             	add    $0x3,%edx
c0101f7e:	0f b7 d2             	movzwl %dx,%edx
c0101f81:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101f85:	88 45 dd             	mov    %al,-0x23(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101f88:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101f8c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101f90:	ee                   	out    %al,(%dx)
}
c0101f91:	90                   	nop
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101f92:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f95:	c1 e8 08             	shr    $0x8,%eax
c0101f98:	0f b6 c0             	movzbl %al,%eax
c0101f9b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f9f:	83 c2 04             	add    $0x4,%edx
c0101fa2:	0f b7 d2             	movzwl %dx,%edx
c0101fa5:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101fa9:	88 45 e1             	mov    %al,-0x1f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101fac:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101fb0:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101fb4:	ee                   	out    %al,(%dx)
}
c0101fb5:	90                   	nop
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101fb6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101fb9:	c1 e8 10             	shr    $0x10,%eax
c0101fbc:	0f b6 c0             	movzbl %al,%eax
c0101fbf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101fc3:	83 c2 05             	add    $0x5,%edx
c0101fc6:	0f b7 d2             	movzwl %dx,%edx
c0101fc9:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101fcd:	88 45 e5             	mov    %al,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101fd0:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101fd4:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101fd8:	ee                   	out    %al,(%dx)
}
c0101fd9:	90                   	nop
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101fda:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0101fdd:	c0 e0 04             	shl    $0x4,%al
c0101fe0:	24 10                	and    $0x10,%al
c0101fe2:	88 c2                	mov    %al,%dl
c0101fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101fe7:	c1 e8 18             	shr    $0x18,%eax
c0101fea:	24 0f                	and    $0xf,%al
c0101fec:	08 d0                	or     %dl,%al
c0101fee:	0c e0                	or     $0xe0,%al
c0101ff0:	0f b6 c0             	movzbl %al,%eax
c0101ff3:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ff7:	83 c2 06             	add    $0x6,%edx
c0101ffa:	0f b7 d2             	movzwl %dx,%edx
c0101ffd:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0102001:	88 45 e9             	mov    %al,-0x17(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102004:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102008:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010200c:	ee                   	out    %al,(%dx)
}
c010200d:	90                   	nop
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c010200e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102012:	83 c0 07             	add    $0x7,%eax
c0102015:	0f b7 c0             	movzwl %ax,%eax
c0102018:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c010201c:	c6 45 ed 30          	movb   $0x30,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102020:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102024:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102028:	ee                   	out    %al,(%dx)
}
c0102029:	90                   	nop

    int ret = 0;
c010202a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102031:	eb 58                	jmp    c010208b <ide_write_secs+0x22e>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0102033:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102037:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010203e:	00 
c010203f:	89 04 24             	mov    %eax,(%esp)
c0102042:	e8 fa f7 ff ff       	call   c0101841 <ide_wait_ready>
c0102047:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010204a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010204e:	75 43                	jne    c0102093 <ide_write_secs+0x236>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0102050:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102054:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0102057:	8b 45 10             	mov    0x10(%ebp),%eax
c010205a:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010205d:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile (
c0102064:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0102067:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c010206a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010206d:	89 cb                	mov    %ecx,%ebx
c010206f:	89 de                	mov    %ebx,%esi
c0102071:	89 c1                	mov    %eax,%ecx
c0102073:	fc                   	cld    
c0102074:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0102076:	89 c8                	mov    %ecx,%eax
c0102078:	89 f3                	mov    %esi,%ebx
c010207a:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c010207d:	89 45 c8             	mov    %eax,-0x38(%ebp)
}
c0102080:	90                   	nop
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102081:	ff 4d 14             	decl   0x14(%ebp)
c0102084:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010208b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010208f:	75 a2                	jne    c0102033 <ide_write_secs+0x1d6>
    }

out:
c0102091:	eb 01                	jmp    c0102094 <ide_write_secs+0x237>
            goto out;
c0102093:	90                   	nop
    return ret;
c0102094:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0102097:	83 c4 50             	add    $0x50,%esp
c010209a:	5b                   	pop    %ebx
c010209b:	5e                   	pop    %esi
c010209c:	5d                   	pop    %ebp
c010209d:	c3                   	ret    

c010209e <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c010209e:	55                   	push   %ebp
c010209f:	89 e5                	mov    %esp,%ebp
    asm volatile ("sti");
c01020a1:	fb                   	sti    
}
c01020a2:	90                   	nop
    sti();
}
c01020a3:	90                   	nop
c01020a4:	5d                   	pop    %ebp
c01020a5:	c3                   	ret    

c01020a6 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01020a6:	55                   	push   %ebp
c01020a7:	89 e5                	mov    %esp,%ebp
    asm volatile ("cli" ::: "memory");
c01020a9:	fa                   	cli    
}
c01020aa:	90                   	nop
    cli();
}
c01020ab:	90                   	nop
c01020ac:	5d                   	pop    %ebp
c01020ad:	c3                   	ret    

c01020ae <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c01020ae:	55                   	push   %ebp
c01020af:	89 e5                	mov    %esp,%ebp
c01020b1:	83 ec 14             	sub    $0x14,%esp
c01020b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01020b7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c01020bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01020be:	66 a3 50 95 13 c0    	mov    %ax,0xc0139550
    if (did_init) {
c01020c4:	a1 60 c7 1c c0       	mov    0xc01cc760,%eax
c01020c9:	85 c0                	test   %eax,%eax
c01020cb:	74 39                	je     c0102106 <pic_setmask+0x58>
        outb(IO_PIC1 + 1, mask);
c01020cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01020d0:	0f b6 c0             	movzbl %al,%eax
c01020d3:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
c01020d9:	88 45 f9             	mov    %al,-0x7(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01020dc:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01020e0:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020e4:	ee                   	out    %al,(%dx)
}
c01020e5:	90                   	nop
        outb(IO_PIC2 + 1, mask >> 8);
c01020e6:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01020ea:	c1 e8 08             	shr    $0x8,%eax
c01020ed:	0f b7 c0             	movzwl %ax,%eax
c01020f0:	0f b6 c0             	movzbl %al,%eax
c01020f3:	66 c7 45 fe a1 00    	movw   $0xa1,-0x2(%ebp)
c01020f9:	88 45 fd             	mov    %al,-0x3(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01020fc:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102100:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102104:	ee                   	out    %al,(%dx)
}
c0102105:	90                   	nop
    }
}
c0102106:	90                   	nop
c0102107:	89 ec                	mov    %ebp,%esp
c0102109:	5d                   	pop    %ebp
c010210a:	c3                   	ret    

c010210b <pic_enable>:

void
pic_enable(unsigned int irq) {
c010210b:	55                   	push   %ebp
c010210c:	89 e5                	mov    %esp,%ebp
c010210e:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c0102111:	8b 45 08             	mov    0x8(%ebp),%eax
c0102114:	ba 01 00 00 00       	mov    $0x1,%edx
c0102119:	88 c1                	mov    %al,%cl
c010211b:	d3 e2                	shl    %cl,%edx
c010211d:	89 d0                	mov    %edx,%eax
c010211f:	98                   	cwtl   
c0102120:	f7 d0                	not    %eax
c0102122:	0f bf d0             	movswl %ax,%edx
c0102125:	0f b7 05 50 95 13 c0 	movzwl 0xc0139550,%eax
c010212c:	98                   	cwtl   
c010212d:	21 d0                	and    %edx,%eax
c010212f:	98                   	cwtl   
c0102130:	0f b7 c0             	movzwl %ax,%eax
c0102133:	89 04 24             	mov    %eax,(%esp)
c0102136:	e8 73 ff ff ff       	call   c01020ae <pic_setmask>
}
c010213b:	90                   	nop
c010213c:	89 ec                	mov    %ebp,%esp
c010213e:	5d                   	pop    %ebp
c010213f:	c3                   	ret    

c0102140 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0102140:	55                   	push   %ebp
c0102141:	89 e5                	mov    %esp,%ebp
c0102143:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c0102146:	c7 05 60 c7 1c c0 01 	movl   $0x1,0xc01cc760
c010214d:	00 00 00 
c0102150:	66 c7 45 ca 21 00    	movw   $0x21,-0x36(%ebp)
c0102156:	c6 45 c9 ff          	movb   $0xff,-0x37(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010215a:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c010215e:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0102162:	ee                   	out    %al,(%dx)
}
c0102163:	90                   	nop
c0102164:	66 c7 45 ce a1 00    	movw   $0xa1,-0x32(%ebp)
c010216a:	c6 45 cd ff          	movb   $0xff,-0x33(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010216e:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0102172:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0102176:	ee                   	out    %al,(%dx)
}
c0102177:	90                   	nop
c0102178:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c010217e:	c6 45 d1 11          	movb   $0x11,-0x2f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102182:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0102186:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010218a:	ee                   	out    %al,(%dx)
}
c010218b:	90                   	nop
c010218c:	66 c7 45 d6 21 00    	movw   $0x21,-0x2a(%ebp)
c0102192:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102196:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c010219a:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010219e:	ee                   	out    %al,(%dx)
}
c010219f:	90                   	nop
c01021a0:	66 c7 45 da 21 00    	movw   $0x21,-0x26(%ebp)
c01021a6:	c6 45 d9 04          	movb   $0x4,-0x27(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01021aa:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01021ae:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01021b2:	ee                   	out    %al,(%dx)
}
c01021b3:	90                   	nop
c01021b4:	66 c7 45 de 21 00    	movw   $0x21,-0x22(%ebp)
c01021ba:	c6 45 dd 03          	movb   $0x3,-0x23(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01021be:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01021c2:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01021c6:	ee                   	out    %al,(%dx)
}
c01021c7:	90                   	nop
c01021c8:	66 c7 45 e2 a0 00    	movw   $0xa0,-0x1e(%ebp)
c01021ce:	c6 45 e1 11          	movb   $0x11,-0x1f(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01021d2:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01021d6:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01021da:	ee                   	out    %al,(%dx)
}
c01021db:	90                   	nop
c01021dc:	66 c7 45 e6 a1 00    	movw   $0xa1,-0x1a(%ebp)
c01021e2:	c6 45 e5 28          	movb   $0x28,-0x1b(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01021e6:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01021ea:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01021ee:	ee                   	out    %al,(%dx)
}
c01021ef:	90                   	nop
c01021f0:	66 c7 45 ea a1 00    	movw   $0xa1,-0x16(%ebp)
c01021f6:	c6 45 e9 02          	movb   $0x2,-0x17(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01021fa:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01021fe:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102202:	ee                   	out    %al,(%dx)
}
c0102203:	90                   	nop
c0102204:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c010220a:	c6 45 ed 03          	movb   $0x3,-0x13(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010220e:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102212:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102216:	ee                   	out    %al,(%dx)
}
c0102217:	90                   	nop
c0102218:	66 c7 45 f2 20 00    	movw   $0x20,-0xe(%ebp)
c010221e:	c6 45 f1 68          	movb   $0x68,-0xf(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102222:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0102226:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010222a:	ee                   	out    %al,(%dx)
}
c010222b:	90                   	nop
c010222c:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c0102232:	c6 45 f5 0a          	movb   $0xa,-0xb(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102236:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010223a:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010223e:	ee                   	out    %al,(%dx)
}
c010223f:	90                   	nop
c0102240:	66 c7 45 fa a0 00    	movw   $0xa0,-0x6(%ebp)
c0102246:	c6 45 f9 68          	movb   $0x68,-0x7(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010224a:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010224e:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102252:	ee                   	out    %al,(%dx)
}
c0102253:	90                   	nop
c0102254:	66 c7 45 fe a0 00    	movw   $0xa0,-0x2(%ebp)
c010225a:	c6 45 fd 0a          	movb   $0xa,-0x3(%ebp)
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010225e:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102262:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102266:	ee                   	out    %al,(%dx)
}
c0102267:	90                   	nop
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c0102268:	0f b7 05 50 95 13 c0 	movzwl 0xc0139550,%eax
c010226f:	3d ff ff 00 00       	cmp    $0xffff,%eax
c0102274:	74 0f                	je     c0102285 <pic_init+0x145>
        pic_setmask(irq_mask);
c0102276:	0f b7 05 50 95 13 c0 	movzwl 0xc0139550,%eax
c010227d:	89 04 24             	mov    %eax,(%esp)
c0102280:	e8 29 fe ff ff       	call   c01020ae <pic_setmask>
    }
}
c0102285:	90                   	nop
c0102286:	89 ec                	mov    %ebp,%esp
c0102288:	5d                   	pop    %ebp
c0102289:	c3                   	ret    

c010228a <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c010228a:	55                   	push   %ebp
c010228b:	89 e5                	mov    %esp,%ebp
c010228d:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c0102290:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0102297:	00 
c0102298:	c7 04 24 40 e2 10 c0 	movl   $0xc010e240,(%esp)
c010229f:	e8 ce e0 ff ff       	call   c0100372 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c01022a4:	90                   	nop
c01022a5:	89 ec                	mov    %ebp,%esp
c01022a7:	5d                   	pop    %ebp
c01022a8:	c3                   	ret    

c01022a9 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01022a9:	55                   	push   %ebp
c01022aa:	89 e5                	mov    %esp,%ebp
c01022ac:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
     extern uintptr_t __vectors[];
    int i;
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++)
c01022af:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01022b6:	e9 c4 00 00 00       	jmp    c010237f <idt_init+0xd6>
        // 目标idt项为idt[i]
        // 该idt项为内核代码，所以使用GD_KTEXT段选择子
        // 中断处理程序的入口地址存放于__vectors[i]
        // 特权级为DPL_KERNEL
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c01022bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022be:	8b 04 85 e0 95 13 c0 	mov    -0x3fec6a20(,%eax,4),%eax
c01022c5:	0f b7 d0             	movzwl %ax,%edx
c01022c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022cb:	66 89 14 c5 80 c7 1c 	mov    %dx,-0x3fe33880(,%eax,8)
c01022d2:	c0 
c01022d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022d6:	66 c7 04 c5 82 c7 1c 	movw   $0x8,-0x3fe3387e(,%eax,8)
c01022dd:	c0 08 00 
c01022e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022e3:	0f b6 14 c5 84 c7 1c 	movzbl -0x3fe3387c(,%eax,8),%edx
c01022ea:	c0 
c01022eb:	80 e2 e0             	and    $0xe0,%dl
c01022ee:	88 14 c5 84 c7 1c c0 	mov    %dl,-0x3fe3387c(,%eax,8)
c01022f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022f8:	0f b6 14 c5 84 c7 1c 	movzbl -0x3fe3387c(,%eax,8),%edx
c01022ff:	c0 
c0102300:	80 e2 1f             	and    $0x1f,%dl
c0102303:	88 14 c5 84 c7 1c c0 	mov    %dl,-0x3fe3387c(,%eax,8)
c010230a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010230d:	0f b6 14 c5 85 c7 1c 	movzbl -0x3fe3387b(,%eax,8),%edx
c0102314:	c0 
c0102315:	80 e2 f0             	and    $0xf0,%dl
c0102318:	80 ca 0e             	or     $0xe,%dl
c010231b:	88 14 c5 85 c7 1c c0 	mov    %dl,-0x3fe3387b(,%eax,8)
c0102322:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102325:	0f b6 14 c5 85 c7 1c 	movzbl -0x3fe3387b(,%eax,8),%edx
c010232c:	c0 
c010232d:	80 e2 ef             	and    $0xef,%dl
c0102330:	88 14 c5 85 c7 1c c0 	mov    %dl,-0x3fe3387b(,%eax,8)
c0102337:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010233a:	0f b6 14 c5 85 c7 1c 	movzbl -0x3fe3387b(,%eax,8),%edx
c0102341:	c0 
c0102342:	80 e2 9f             	and    $0x9f,%dl
c0102345:	88 14 c5 85 c7 1c c0 	mov    %dl,-0x3fe3387b(,%eax,8)
c010234c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010234f:	0f b6 14 c5 85 c7 1c 	movzbl -0x3fe3387b(,%eax,8),%edx
c0102356:	c0 
c0102357:	80 ca 80             	or     $0x80,%dl
c010235a:	88 14 c5 85 c7 1c c0 	mov    %dl,-0x3fe3387b(,%eax,8)
c0102361:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102364:	8b 04 85 e0 95 13 c0 	mov    -0x3fec6a20(,%eax,4),%eax
c010236b:	c1 e8 10             	shr    $0x10,%eax
c010236e:	0f b7 d0             	movzwl %ax,%edx
c0102371:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102374:	66 89 14 c5 86 c7 1c 	mov    %dx,-0x3fe3387a(,%eax,8)
c010237b:	c0 
    for (i = 0; i < sizeof(idt) / sizeof(struct gatedesc); i ++)
c010237c:	ff 45 fc             	incl   -0x4(%ebp)
c010237f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102382:	3d ff 00 00 00       	cmp    $0xff,%eax
c0102387:	0f 86 2e ff ff ff    	jbe    c01022bb <idt_init+0x12>
	// 设置从用户态转为内核态的中断的特权级为DPL_USER
    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
c010238d:	a1 c4 97 13 c0       	mov    0xc01397c4,%eax
c0102392:	0f b7 c0             	movzwl %ax,%eax
c0102395:	66 a3 48 cb 1c c0    	mov    %ax,0xc01ccb48
c010239b:	66 c7 05 4a cb 1c c0 	movw   $0x8,0xc01ccb4a
c01023a2:	08 00 
c01023a4:	0f b6 05 4c cb 1c c0 	movzbl 0xc01ccb4c,%eax
c01023ab:	24 e0                	and    $0xe0,%al
c01023ad:	a2 4c cb 1c c0       	mov    %al,0xc01ccb4c
c01023b2:	0f b6 05 4c cb 1c c0 	movzbl 0xc01ccb4c,%eax
c01023b9:	24 1f                	and    $0x1f,%al
c01023bb:	a2 4c cb 1c c0       	mov    %al,0xc01ccb4c
c01023c0:	0f b6 05 4d cb 1c c0 	movzbl 0xc01ccb4d,%eax
c01023c7:	24 f0                	and    $0xf0,%al
c01023c9:	0c 0e                	or     $0xe,%al
c01023cb:	a2 4d cb 1c c0       	mov    %al,0xc01ccb4d
c01023d0:	0f b6 05 4d cb 1c c0 	movzbl 0xc01ccb4d,%eax
c01023d7:	24 ef                	and    $0xef,%al
c01023d9:	a2 4d cb 1c c0       	mov    %al,0xc01ccb4d
c01023de:	0f b6 05 4d cb 1c c0 	movzbl 0xc01ccb4d,%eax
c01023e5:	0c 60                	or     $0x60,%al
c01023e7:	a2 4d cb 1c c0       	mov    %al,0xc01ccb4d
c01023ec:	0f b6 05 4d cb 1c c0 	movzbl 0xc01ccb4d,%eax
c01023f3:	0c 80                	or     $0x80,%al
c01023f5:	a2 4d cb 1c c0       	mov    %al,0xc01ccb4d
c01023fa:	a1 c4 97 13 c0       	mov    0xc01397c4,%eax
c01023ff:	c1 e8 10             	shr    $0x10,%eax
c0102402:	0f b7 c0             	movzwl %ax,%eax
c0102405:	66 a3 4e cb 1c c0    	mov    %ax,0xc01ccb4e
    // Lab5 code
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c010240b:	a1 e0 97 13 c0       	mov    0xc01397e0,%eax
c0102410:	0f b7 c0             	movzwl %ax,%eax
c0102413:	66 a3 80 cb 1c c0    	mov    %ax,0xc01ccb80
c0102419:	66 c7 05 82 cb 1c c0 	movw   $0x8,0xc01ccb82
c0102420:	08 00 
c0102422:	0f b6 05 84 cb 1c c0 	movzbl 0xc01ccb84,%eax
c0102429:	24 e0                	and    $0xe0,%al
c010242b:	a2 84 cb 1c c0       	mov    %al,0xc01ccb84
c0102430:	0f b6 05 84 cb 1c c0 	movzbl 0xc01ccb84,%eax
c0102437:	24 1f                	and    $0x1f,%al
c0102439:	a2 84 cb 1c c0       	mov    %al,0xc01ccb84
c010243e:	0f b6 05 85 cb 1c c0 	movzbl 0xc01ccb85,%eax
c0102445:	0c 0f                	or     $0xf,%al
c0102447:	a2 85 cb 1c c0       	mov    %al,0xc01ccb85
c010244c:	0f b6 05 85 cb 1c c0 	movzbl 0xc01ccb85,%eax
c0102453:	24 ef                	and    $0xef,%al
c0102455:	a2 85 cb 1c c0       	mov    %al,0xc01ccb85
c010245a:	0f b6 05 85 cb 1c c0 	movzbl 0xc01ccb85,%eax
c0102461:	0c 60                	or     $0x60,%al
c0102463:	a2 85 cb 1c c0       	mov    %al,0xc01ccb85
c0102468:	0f b6 05 85 cb 1c c0 	movzbl 0xc01ccb85,%eax
c010246f:	0c 80                	or     $0x80,%al
c0102471:	a2 85 cb 1c c0       	mov    %al,0xc01ccb85
c0102476:	a1 e0 97 13 c0       	mov    0xc01397e0,%eax
c010247b:	c1 e8 10             	shr    $0x10,%eax
c010247e:	0f b7 c0             	movzwl %ax,%eax
c0102481:	66 a3 86 cb 1c c0    	mov    %ax,0xc01ccb86
c0102487:	c7 45 f8 60 95 13 c0 	movl   $0xc0139560,-0x8(%ebp)
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010248e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102491:	0f 01 18             	lidtl  (%eax)
}
c0102494:	90                   	nop
    // 加载该IDT
    lidt(&idt_pd); 
}
c0102495:	90                   	nop
c0102496:	89 ec                	mov    %ebp,%esp
c0102498:	5d                   	pop    %ebp
c0102499:	c3                   	ret    

c010249a <trapname>:

static const char *
trapname(int trapno) {
c010249a:	55                   	push   %ebp
c010249b:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010249d:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a0:	83 f8 13             	cmp    $0x13,%eax
c01024a3:	77 0c                	ja     c01024b1 <trapname+0x17>
        return excnames[trapno];
c01024a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a8:	8b 04 85 60 e7 10 c0 	mov    -0x3fef18a0(,%eax,4),%eax
c01024af:	eb 18                	jmp    c01024c9 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01024b1:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01024b5:	7e 0d                	jle    c01024c4 <trapname+0x2a>
c01024b7:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01024bb:	7f 07                	jg     c01024c4 <trapname+0x2a>
        return "Hardware Interrupt";
c01024bd:	b8 4a e2 10 c0       	mov    $0xc010e24a,%eax
c01024c2:	eb 05                	jmp    c01024c9 <trapname+0x2f>
    }
    return "(unknown trap)";
c01024c4:	b8 5d e2 10 c0       	mov    $0xc010e25d,%eax
}
c01024c9:	5d                   	pop    %ebp
c01024ca:	c3                   	ret    

c01024cb <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01024cb:	55                   	push   %ebp
c01024cc:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01024ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d1:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024d5:	83 f8 08             	cmp    $0x8,%eax
c01024d8:	0f 94 c0             	sete   %al
c01024db:	0f b6 c0             	movzbl %al,%eax
}
c01024de:	5d                   	pop    %ebp
c01024df:	c3                   	ret    

c01024e0 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01024e0:	55                   	push   %ebp
c01024e1:	89 e5                	mov    %esp,%ebp
c01024e3:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01024e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01024e9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024ed:	c7 04 24 9e e2 10 c0 	movl   $0xc010e29e,(%esp)
c01024f4:	e8 79 de ff ff       	call   c0100372 <cprintf>
    print_regs(&tf->tf_regs);
c01024f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01024fc:	89 04 24             	mov    %eax,(%esp)
c01024ff:	e8 8f 01 00 00       	call   c0102693 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0102504:	8b 45 08             	mov    0x8(%ebp),%eax
c0102507:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010250b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010250f:	c7 04 24 af e2 10 c0 	movl   $0xc010e2af,(%esp)
c0102516:	e8 57 de ff ff       	call   c0100372 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c010251b:	8b 45 08             	mov    0x8(%ebp),%eax
c010251e:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c0102522:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102526:	c7 04 24 c2 e2 10 c0 	movl   $0xc010e2c2,(%esp)
c010252d:	e8 40 de ff ff       	call   c0100372 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102532:	8b 45 08             	mov    0x8(%ebp),%eax
c0102535:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102539:	89 44 24 04          	mov    %eax,0x4(%esp)
c010253d:	c7 04 24 d5 e2 10 c0 	movl   $0xc010e2d5,(%esp)
c0102544:	e8 29 de ff ff       	call   c0100372 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102549:	8b 45 08             	mov    0x8(%ebp),%eax
c010254c:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102550:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102554:	c7 04 24 e8 e2 10 c0 	movl   $0xc010e2e8,(%esp)
c010255b:	e8 12 de ff ff       	call   c0100372 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102560:	8b 45 08             	mov    0x8(%ebp),%eax
c0102563:	8b 40 30             	mov    0x30(%eax),%eax
c0102566:	89 04 24             	mov    %eax,(%esp)
c0102569:	e8 2c ff ff ff       	call   c010249a <trapname>
c010256e:	8b 55 08             	mov    0x8(%ebp),%edx
c0102571:	8b 52 30             	mov    0x30(%edx),%edx
c0102574:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102578:	89 54 24 04          	mov    %edx,0x4(%esp)
c010257c:	c7 04 24 fb e2 10 c0 	movl   $0xc010e2fb,(%esp)
c0102583:	e8 ea dd ff ff       	call   c0100372 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c0102588:	8b 45 08             	mov    0x8(%ebp),%eax
c010258b:	8b 40 34             	mov    0x34(%eax),%eax
c010258e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102592:	c7 04 24 0d e3 10 c0 	movl   $0xc010e30d,(%esp)
c0102599:	e8 d4 dd ff ff       	call   c0100372 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c010259e:	8b 45 08             	mov    0x8(%ebp),%eax
c01025a1:	8b 40 38             	mov    0x38(%eax),%eax
c01025a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025a8:	c7 04 24 1c e3 10 c0 	movl   $0xc010e31c,(%esp)
c01025af:	e8 be dd ff ff       	call   c0100372 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01025b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01025b7:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01025bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025bf:	c7 04 24 2b e3 10 c0 	movl   $0xc010e32b,(%esp)
c01025c6:	e8 a7 dd ff ff       	call   c0100372 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01025cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ce:	8b 40 40             	mov    0x40(%eax),%eax
c01025d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025d5:	c7 04 24 3e e3 10 c0 	movl   $0xc010e33e,(%esp)
c01025dc:	e8 91 dd ff ff       	call   c0100372 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01025e8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01025ef:	eb 3d                	jmp    c010262e <print_trapframe+0x14e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01025f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f4:	8b 50 40             	mov    0x40(%eax),%edx
c01025f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025fa:	21 d0                	and    %edx,%eax
c01025fc:	85 c0                	test   %eax,%eax
c01025fe:	74 28                	je     c0102628 <print_trapframe+0x148>
c0102600:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102603:	8b 04 85 80 95 13 c0 	mov    -0x3fec6a80(,%eax,4),%eax
c010260a:	85 c0                	test   %eax,%eax
c010260c:	74 1a                	je     c0102628 <print_trapframe+0x148>
            cprintf("%s,", IA32flags[i]);
c010260e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102611:	8b 04 85 80 95 13 c0 	mov    -0x3fec6a80(,%eax,4),%eax
c0102618:	89 44 24 04          	mov    %eax,0x4(%esp)
c010261c:	c7 04 24 4d e3 10 c0 	movl   $0xc010e34d,(%esp)
c0102623:	e8 4a dd ff ff       	call   c0100372 <cprintf>
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102628:	ff 45 f4             	incl   -0xc(%ebp)
c010262b:	d1 65 f0             	shll   -0x10(%ebp)
c010262e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102631:	83 f8 17             	cmp    $0x17,%eax
c0102634:	76 bb                	jbe    c01025f1 <print_trapframe+0x111>
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102636:	8b 45 08             	mov    0x8(%ebp),%eax
c0102639:	8b 40 40             	mov    0x40(%eax),%eax
c010263c:	c1 e8 0c             	shr    $0xc,%eax
c010263f:	83 e0 03             	and    $0x3,%eax
c0102642:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102646:	c7 04 24 51 e3 10 c0 	movl   $0xc010e351,(%esp)
c010264d:	e8 20 dd ff ff       	call   c0100372 <cprintf>

    if (!trap_in_kernel(tf)) {
c0102652:	8b 45 08             	mov    0x8(%ebp),%eax
c0102655:	89 04 24             	mov    %eax,(%esp)
c0102658:	e8 6e fe ff ff       	call   c01024cb <trap_in_kernel>
c010265d:	85 c0                	test   %eax,%eax
c010265f:	75 2d                	jne    c010268e <print_trapframe+0x1ae>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102661:	8b 45 08             	mov    0x8(%ebp),%eax
c0102664:	8b 40 44             	mov    0x44(%eax),%eax
c0102667:	89 44 24 04          	mov    %eax,0x4(%esp)
c010266b:	c7 04 24 5a e3 10 c0 	movl   $0xc010e35a,(%esp)
c0102672:	e8 fb dc ff ff       	call   c0100372 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102677:	8b 45 08             	mov    0x8(%ebp),%eax
c010267a:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c010267e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102682:	c7 04 24 69 e3 10 c0 	movl   $0xc010e369,(%esp)
c0102689:	e8 e4 dc ff ff       	call   c0100372 <cprintf>
    }
}
c010268e:	90                   	nop
c010268f:	89 ec                	mov    %ebp,%esp
c0102691:	5d                   	pop    %ebp
c0102692:	c3                   	ret    

c0102693 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102693:	55                   	push   %ebp
c0102694:	89 e5                	mov    %esp,%ebp
c0102696:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102699:	8b 45 08             	mov    0x8(%ebp),%eax
c010269c:	8b 00                	mov    (%eax),%eax
c010269e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026a2:	c7 04 24 7c e3 10 c0 	movl   $0xc010e37c,(%esp)
c01026a9:	e8 c4 dc ff ff       	call   c0100372 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01026ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b1:	8b 40 04             	mov    0x4(%eax),%eax
c01026b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026b8:	c7 04 24 8b e3 10 c0 	movl   $0xc010e38b,(%esp)
c01026bf:	e8 ae dc ff ff       	call   c0100372 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01026c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01026c7:	8b 40 08             	mov    0x8(%eax),%eax
c01026ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026ce:	c7 04 24 9a e3 10 c0 	movl   $0xc010e39a,(%esp)
c01026d5:	e8 98 dc ff ff       	call   c0100372 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01026da:	8b 45 08             	mov    0x8(%ebp),%eax
c01026dd:	8b 40 0c             	mov    0xc(%eax),%eax
c01026e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026e4:	c7 04 24 a9 e3 10 c0 	movl   $0xc010e3a9,(%esp)
c01026eb:	e8 82 dc ff ff       	call   c0100372 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01026f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01026f3:	8b 40 10             	mov    0x10(%eax),%eax
c01026f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026fa:	c7 04 24 b8 e3 10 c0 	movl   $0xc010e3b8,(%esp)
c0102701:	e8 6c dc ff ff       	call   c0100372 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102706:	8b 45 08             	mov    0x8(%ebp),%eax
c0102709:	8b 40 14             	mov    0x14(%eax),%eax
c010270c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102710:	c7 04 24 c7 e3 10 c0 	movl   $0xc010e3c7,(%esp)
c0102717:	e8 56 dc ff ff       	call   c0100372 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c010271c:	8b 45 08             	mov    0x8(%ebp),%eax
c010271f:	8b 40 18             	mov    0x18(%eax),%eax
c0102722:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102726:	c7 04 24 d6 e3 10 c0 	movl   $0xc010e3d6,(%esp)
c010272d:	e8 40 dc ff ff       	call   c0100372 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102732:	8b 45 08             	mov    0x8(%ebp),%eax
c0102735:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102738:	89 44 24 04          	mov    %eax,0x4(%esp)
c010273c:	c7 04 24 e5 e3 10 c0 	movl   $0xc010e3e5,(%esp)
c0102743:	e8 2a dc ff ff       	call   c0100372 <cprintf>
}
c0102748:	90                   	nop
c0102749:	89 ec                	mov    %ebp,%esp
c010274b:	5d                   	pop    %ebp
c010274c:	c3                   	ret    

c010274d <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010274d:	55                   	push   %ebp
c010274e:	89 e5                	mov    %esp,%ebp
c0102750:	83 ec 38             	sub    $0x38,%esp
c0102753:	89 5d fc             	mov    %ebx,-0x4(%ebp)
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102756:	8b 45 08             	mov    0x8(%ebp),%eax
c0102759:	8b 40 34             	mov    0x34(%eax),%eax
c010275c:	83 e0 01             	and    $0x1,%eax
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010275f:	85 c0                	test   %eax,%eax
c0102761:	74 07                	je     c010276a <print_pgfault+0x1d>
c0102763:	bb f4 e3 10 c0       	mov    $0xc010e3f4,%ebx
c0102768:	eb 05                	jmp    c010276f <print_pgfault+0x22>
c010276a:	bb 05 e4 10 c0       	mov    $0xc010e405,%ebx
            (tf->tf_err & 2) ? 'W' : 'R',
c010276f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102772:	8b 40 34             	mov    0x34(%eax),%eax
c0102775:	83 e0 02             	and    $0x2,%eax
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102778:	85 c0                	test   %eax,%eax
c010277a:	74 07                	je     c0102783 <print_pgfault+0x36>
c010277c:	b9 57 00 00 00       	mov    $0x57,%ecx
c0102781:	eb 05                	jmp    c0102788 <print_pgfault+0x3b>
c0102783:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102788:	8b 45 08             	mov    0x8(%ebp),%eax
c010278b:	8b 40 34             	mov    0x34(%eax),%eax
c010278e:	83 e0 04             	and    $0x4,%eax
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102791:	85 c0                	test   %eax,%eax
c0102793:	74 07                	je     c010279c <print_pgfault+0x4f>
c0102795:	ba 55 00 00 00       	mov    $0x55,%edx
c010279a:	eb 05                	jmp    c01027a1 <print_pgfault+0x54>
c010279c:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027a1:	0f 20 d0             	mov    %cr2,%eax
c01027a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c01027a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027aa:	89 5c 24 10          	mov    %ebx,0x10(%esp)
c01027ae:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01027b2:	89 54 24 08          	mov    %edx,0x8(%esp)
c01027b6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027ba:	c7 04 24 14 e4 10 c0 	movl   $0xc010e414,(%esp)
c01027c1:	e8 ac db ff ff       	call   c0100372 <cprintf>
}
c01027c6:	90                   	nop
c01027c7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01027ca:	89 ec                	mov    %ebp,%esp
c01027cc:	5d                   	pop    %ebp
c01027cd:	c3                   	ret    

c01027ce <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01027ce:	55                   	push   %ebp
c01027cf:	89 e5                	mov    %esp,%ebp
c01027d1:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01027d4:	a1 0c d1 1c c0       	mov    0xc01cd10c,%eax
c01027d9:	85 c0                	test   %eax,%eax
c01027db:	74 0b                	je     c01027e8 <pgfault_handler+0x1a>
            print_pgfault(tf);
c01027dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01027e0:	89 04 24             	mov    %eax,(%esp)
c01027e3:	e8 65 ff ff ff       	call   c010274d <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01027e8:	a1 0c d1 1c c0       	mov    0xc01cd10c,%eax
c01027ed:	85 c0                	test   %eax,%eax
c01027ef:	74 3d                	je     c010282e <pgfault_handler+0x60>
        assert(current == idleproc);
c01027f1:	8b 15 f0 d1 1c c0    	mov    0xc01cd1f0,%edx
c01027f7:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c01027fc:	39 c2                	cmp    %eax,%edx
c01027fe:	74 24                	je     c0102824 <pgfault_handler+0x56>
c0102800:	c7 44 24 0c 37 e4 10 	movl   $0xc010e437,0xc(%esp)
c0102807:	c0 
c0102808:	c7 44 24 08 4b e4 10 	movl   $0xc010e44b,0x8(%esp)
c010280f:	c0 
c0102810:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0102817:	00 
c0102818:	c7 04 24 60 e4 10 c0 	movl   $0xc010e460,(%esp)
c010281f:	e8 cc e5 ff ff       	call   c0100df0 <__panic>
        mm = check_mm_struct;
c0102824:	a1 0c d1 1c c0       	mov    0xc01cd10c,%eax
c0102829:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010282c:	eb 46                	jmp    c0102874 <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c010282e:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c0102833:	85 c0                	test   %eax,%eax
c0102835:	75 32                	jne    c0102869 <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102837:	8b 45 08             	mov    0x8(%ebp),%eax
c010283a:	89 04 24             	mov    %eax,(%esp)
c010283d:	e8 9e fc ff ff       	call   c01024e0 <print_trapframe>
            print_pgfault(tf);
c0102842:	8b 45 08             	mov    0x8(%ebp),%eax
c0102845:	89 04 24             	mov    %eax,(%esp)
c0102848:	e8 00 ff ff ff       	call   c010274d <print_pgfault>
            panic("unhandled page fault.\n");
c010284d:	c7 44 24 08 71 e4 10 	movl   $0xc010e471,0x8(%esp)
c0102854:	c0 
c0102855:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c010285c:	00 
c010285d:	c7 04 24 60 e4 10 c0 	movl   $0xc010e460,(%esp)
c0102864:	e8 87 e5 ff ff       	call   c0100df0 <__panic>
        }
        mm = current->mm;
c0102869:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010286e:	8b 40 18             	mov    0x18(%eax),%eax
c0102871:	89 45 f4             	mov    %eax,-0xc(%ebp)
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102874:	0f 20 d0             	mov    %cr2,%eax
c0102877:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c010287a:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c010287d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102880:	8b 40 34             	mov    0x34(%eax),%eax
c0102883:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102887:	89 44 24 04          	mov    %eax,0x4(%esp)
c010288b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010288e:	89 04 24             	mov    %eax,(%esp)
c0102891:	e8 fb 67 00 00       	call   c0109091 <do_pgfault>
}
c0102896:	89 ec                	mov    %ebp,%esp
c0102898:	5d                   	pop    %ebp
c0102899:	c3                   	ret    

c010289a <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c010289a:	55                   	push   %ebp
c010289b:	89 e5                	mov    %esp,%ebp
c010289d:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c01028a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01028a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01028aa:	8b 40 30             	mov    0x30(%eax),%eax
c01028ad:	3d 80 00 00 00       	cmp    $0x80,%eax
c01028b2:	0f 84 ef 00 00 00    	je     c01029a7 <trap_dispatch+0x10d>
c01028b8:	3d 80 00 00 00       	cmp    $0x80,%eax
c01028bd:	0f 87 9b 01 00 00    	ja     c0102a5e <trap_dispatch+0x1c4>
c01028c3:	83 f8 2f             	cmp    $0x2f,%eax
c01028c6:	77 1e                	ja     c01028e6 <trap_dispatch+0x4c>
c01028c8:	83 f8 0e             	cmp    $0xe,%eax
c01028cb:	0f 82 8d 01 00 00    	jb     c0102a5e <trap_dispatch+0x1c4>
c01028d1:	83 e8 0e             	sub    $0xe,%eax
c01028d4:	83 f8 21             	cmp    $0x21,%eax
c01028d7:	0f 87 81 01 00 00    	ja     c0102a5e <trap_dispatch+0x1c4>
c01028dd:	8b 04 85 84 e5 10 c0 	mov    -0x3fef1a7c(,%eax,4),%eax
c01028e4:	ff e0                	jmp    *%eax
c01028e6:	83 e8 78             	sub    $0x78,%eax
c01028e9:	83 f8 01             	cmp    $0x1,%eax
c01028ec:	0f 87 6c 01 00 00    	ja     c0102a5e <trap_dispatch+0x1c4>
c01028f2:	e9 4b 01 00 00       	jmp    c0102a42 <trap_dispatch+0x1a8>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c01028f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01028fa:	89 04 24             	mov    %eax,(%esp)
c01028fd:	e8 cc fe ff ff       	call   c01027ce <pgfault_handler>
c0102902:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102905:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102909:	0f 84 9a 01 00 00    	je     c0102aa9 <trap_dispatch+0x20f>
            print_trapframe(tf);
c010290f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102912:	89 04 24             	mov    %eax,(%esp)
c0102915:	e8 c6 fb ff ff       	call   c01024e0 <print_trapframe>
            if (current == NULL) {
c010291a:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010291f:	85 c0                	test   %eax,%eax
c0102921:	75 23                	jne    c0102946 <trap_dispatch+0xac>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102923:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102926:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010292a:	c7 44 24 08 88 e4 10 	movl   $0xc010e488,0x8(%esp)
c0102931:	c0 
c0102932:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0102939:	00 
c010293a:	c7 04 24 60 e4 10 c0 	movl   $0xc010e460,(%esp)
c0102941:	e8 aa e4 ff ff       	call   c0100df0 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102946:	8b 45 08             	mov    0x8(%ebp),%eax
c0102949:	89 04 24             	mov    %eax,(%esp)
c010294c:	e8 7a fb ff ff       	call   c01024cb <trap_in_kernel>
c0102951:	85 c0                	test   %eax,%eax
c0102953:	74 23                	je     c0102978 <trap_dispatch+0xde>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102955:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102958:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010295c:	c7 44 24 08 a8 e4 10 	movl   $0xc010e4a8,0x8(%esp)
c0102963:	c0 
c0102964:	c7 44 24 04 d7 00 00 	movl   $0xd7,0x4(%esp)
c010296b:	00 
c010296c:	c7 04 24 60 e4 10 c0 	movl   $0xc010e460,(%esp)
c0102973:	e8 78 e4 ff ff       	call   c0100df0 <__panic>
                }
                cprintf("killed by kernel.\n");
c0102978:	c7 04 24 d6 e4 10 c0 	movl   $0xc010e4d6,(%esp)
c010297f:	e8 ee d9 ff ff       	call   c0100372 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0102984:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102987:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010298b:	c7 44 24 08 ec e4 10 	movl   $0xc010e4ec,0x8(%esp)
c0102992:	c0 
c0102993:	c7 44 24 04 da 00 00 	movl   $0xda,0x4(%esp)
c010299a:	00 
c010299b:	c7 04 24 60 e4 10 c0 	movl   $0xc010e460,(%esp)
c01029a2:	e8 49 e4 ff ff       	call   c0100df0 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c01029a7:	e8 22 a7 00 00       	call   c010d0ce <syscall>
        break;
c01029ac:	e9 f9 00 00 00       	jmp    c0102aaa <trap_dispatch+0x210>
        /* LAB7 YOUR CODE */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
        ticks++;
c01029b1:	a1 24 c4 1c c0       	mov    0xc01cc424,%eax
c01029b6:	40                   	inc    %eax
c01029b7:	a3 24 c4 1c c0       	mov    %eax,0xc01cc424
        assert(current != NULL);
c01029bc:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c01029c1:	85 c0                	test   %eax,%eax
c01029c3:	75 24                	jne    c01029e9 <trap_dispatch+0x14f>
c01029c5:	c7 44 24 0c 15 e5 10 	movl   $0xc010e515,0xc(%esp)
c01029cc:	c0 
c01029cd:	c7 44 24 08 4b e4 10 	movl   $0xc010e44b,0x8(%esp)
c01029d4:	c0 
c01029d5:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01029dc:	00 
c01029dd:	c7 04 24 60 e4 10 c0 	movl   $0xc010e460,(%esp)
c01029e4:	e8 07 e4 ff ff       	call   c0100df0 <__panic>
        run_timer_list();
c01029e9:	e8 0d a4 00 00       	call   c010cdfb <run_timer_list>
        //sched_class_proc_tick(current);
        break;
c01029ee:	e9 b7 00 00 00       	jmp    c0102aaa <trap_dispatch+0x210>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c01029f3:	e8 d8 ed ff ff       	call   c01017d0 <cons_getc>
c01029f8:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c01029fb:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c01029ff:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102a03:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102a07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102a0b:	c7 04 24 25 e5 10 c0 	movl   $0xc010e525,(%esp)
c0102a12:	e8 5b d9 ff ff       	call   c0100372 <cprintf>
        break;
c0102a17:	e9 8e 00 00 00       	jmp    c0102aaa <trap_dispatch+0x210>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102a1c:	e8 af ed ff ff       	call   c01017d0 <cons_getc>
c0102a21:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0102a24:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0102a28:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102a2c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102a30:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102a34:	c7 04 24 37 e5 10 c0 	movl   $0xc010e537,(%esp)
c0102a3b:	e8 32 d9 ff ff       	call   c0100372 <cprintf>
        break;
c0102a40:	eb 68                	jmp    c0102aaa <trap_dispatch+0x210>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102a42:	c7 44 24 08 46 e5 10 	movl   $0xc010e546,0x8(%esp)
c0102a49:	c0 
c0102a4a:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c0102a51:	00 
c0102a52:	c7 04 24 60 e4 10 c0 	movl   $0xc010e460,(%esp)
c0102a59:	e8 92 e3 ff ff       	call   c0100df0 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a61:	89 04 24             	mov    %eax,(%esp)
c0102a64:	e8 77 fa ff ff       	call   c01024e0 <print_trapframe>
        if (current != NULL) {
c0102a69:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c0102a6e:	85 c0                	test   %eax,%eax
c0102a70:	74 18                	je     c0102a8a <trap_dispatch+0x1f0>
            cprintf("unhandled trap.\n");
c0102a72:	c7 04 24 56 e5 10 c0 	movl   $0xc010e556,(%esp)
c0102a79:	e8 f4 d8 ff ff       	call   c0100372 <cprintf>
            do_exit(-E_KILLED);
c0102a7e:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a85:	e8 94 88 00 00       	call   c010b31e <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a8a:	c7 44 24 08 67 e5 10 	movl   $0xc010e567,0x8(%esp)
c0102a91:	c0 
c0102a92:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c0102a99:	00 
c0102a9a:	c7 04 24 60 e4 10 c0 	movl   $0xc010e460,(%esp)
c0102aa1:	e8 4a e3 ff ff       	call   c0100df0 <__panic>
        break;
c0102aa6:	90                   	nop
c0102aa7:	eb 01                	jmp    c0102aaa <trap_dispatch+0x210>
        break;
c0102aa9:	90                   	nop

    }
}
c0102aaa:	90                   	nop
c0102aab:	89 ec                	mov    %ebp,%esp
c0102aad:	5d                   	pop    %ebp
c0102aae:	c3                   	ret    

c0102aaf <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102aaf:	55                   	push   %ebp
c0102ab0:	89 e5                	mov    %esp,%ebp
c0102ab2:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102ab5:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c0102aba:	85 c0                	test   %eax,%eax
c0102abc:	75 0d                	jne    c0102acb <trap+0x1c>
        trap_dispatch(tf);
c0102abe:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ac1:	89 04 24             	mov    %eax,(%esp)
c0102ac4:	e8 d1 fd ff ff       	call   c010289a <trap_dispatch>
            if (current->need_resched) {
                schedule();
            }
        }
    }
}
c0102ac9:	eb 6c                	jmp    c0102b37 <trap+0x88>
        struct trapframe *otf = current->tf;
c0102acb:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c0102ad0:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102ad3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102ad6:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c0102adb:	8b 55 08             	mov    0x8(%ebp),%edx
c0102ade:	89 50 3c             	mov    %edx,0x3c(%eax)
        bool in_kernel = trap_in_kernel(tf);
c0102ae1:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ae4:	89 04 24             	mov    %eax,(%esp)
c0102ae7:	e8 df f9 ff ff       	call   c01024cb <trap_in_kernel>
c0102aec:	89 45 f0             	mov    %eax,-0x10(%ebp)
        trap_dispatch(tf);
c0102aef:	8b 45 08             	mov    0x8(%ebp),%eax
c0102af2:	89 04 24             	mov    %eax,(%esp)
c0102af5:	e8 a0 fd ff ff       	call   c010289a <trap_dispatch>
        current->tf = otf;
c0102afa:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c0102aff:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102b02:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102b05:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102b09:	75 2c                	jne    c0102b37 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102b0b:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c0102b10:	8b 40 44             	mov    0x44(%eax),%eax
c0102b13:	83 e0 01             	and    $0x1,%eax
c0102b16:	85 c0                	test   %eax,%eax
c0102b18:	74 0c                	je     c0102b26 <trap+0x77>
                do_exit(-E_KILLED);
c0102b1a:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102b21:	e8 f8 87 00 00       	call   c010b31e <do_exit>
            if (current->need_resched) {
c0102b26:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c0102b2b:	8b 40 10             	mov    0x10(%eax),%eax
c0102b2e:	85 c0                	test   %eax,%eax
c0102b30:	74 05                	je     c0102b37 <trap+0x88>
                schedule();
c0102b32:	e8 28 a0 00 00       	call   c010cb5f <schedule>
}
c0102b37:	90                   	nop
c0102b38:	89 ec                	mov    %ebp,%esp
c0102b3a:	5d                   	pop    %ebp
c0102b3b:	c3                   	ret    

c0102b3c <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102b3c:	1e                   	push   %ds
    pushl %es
c0102b3d:	06                   	push   %es
    pushl %fs
c0102b3e:	0f a0                	push   %fs
    pushl %gs
c0102b40:	0f a8                	push   %gs
    pushal
c0102b42:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102b43:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102b48:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102b4a:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102b4c:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102b4d:	e8 5d ff ff ff       	call   c0102aaf <trap>

    # pop the pushed stack pointer
    popl %esp
c0102b52:	5c                   	pop    %esp

c0102b53 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102b53:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102b54:	0f a9                	pop    %gs
    popl %fs
c0102b56:	0f a1                	pop    %fs
    popl %es
c0102b58:	07                   	pop    %es
    popl %ds
c0102b59:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102b5a:	83 c4 08             	add    $0x8,%esp
    iret
c0102b5d:	cf                   	iret   

c0102b5e <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102b5e:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102b62:	eb ef                	jmp    c0102b53 <__trapret>

c0102b64 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b64:	6a 00                	push   $0x0
  pushl $0
c0102b66:	6a 00                	push   $0x0
  jmp __alltraps
c0102b68:	e9 cf ff ff ff       	jmp    c0102b3c <__alltraps>

c0102b6d <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b6d:	6a 00                	push   $0x0
  pushl $1
c0102b6f:	6a 01                	push   $0x1
  jmp __alltraps
c0102b71:	e9 c6 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102b76 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b76:	6a 00                	push   $0x0
  pushl $2
c0102b78:	6a 02                	push   $0x2
  jmp __alltraps
c0102b7a:	e9 bd ff ff ff       	jmp    c0102b3c <__alltraps>

c0102b7f <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b7f:	6a 00                	push   $0x0
  pushl $3
c0102b81:	6a 03                	push   $0x3
  jmp __alltraps
c0102b83:	e9 b4 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102b88 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b88:	6a 00                	push   $0x0
  pushl $4
c0102b8a:	6a 04                	push   $0x4
  jmp __alltraps
c0102b8c:	e9 ab ff ff ff       	jmp    c0102b3c <__alltraps>

c0102b91 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b91:	6a 00                	push   $0x0
  pushl $5
c0102b93:	6a 05                	push   $0x5
  jmp __alltraps
c0102b95:	e9 a2 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102b9a <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b9a:	6a 00                	push   $0x0
  pushl $6
c0102b9c:	6a 06                	push   $0x6
  jmp __alltraps
c0102b9e:	e9 99 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102ba3 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102ba3:	6a 00                	push   $0x0
  pushl $7
c0102ba5:	6a 07                	push   $0x7
  jmp __alltraps
c0102ba7:	e9 90 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102bac <vector8>:
.globl vector8
vector8:
  pushl $8
c0102bac:	6a 08                	push   $0x8
  jmp __alltraps
c0102bae:	e9 89 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102bb3 <vector9>:
.globl vector9
vector9:
  pushl $0
c0102bb3:	6a 00                	push   $0x0
  pushl $9
c0102bb5:	6a 09                	push   $0x9
  jmp __alltraps
c0102bb7:	e9 80 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102bbc <vector10>:
.globl vector10
vector10:
  pushl $10
c0102bbc:	6a 0a                	push   $0xa
  jmp __alltraps
c0102bbe:	e9 79 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102bc3 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102bc3:	6a 0b                	push   $0xb
  jmp __alltraps
c0102bc5:	e9 72 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102bca <vector12>:
.globl vector12
vector12:
  pushl $12
c0102bca:	6a 0c                	push   $0xc
  jmp __alltraps
c0102bcc:	e9 6b ff ff ff       	jmp    c0102b3c <__alltraps>

c0102bd1 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102bd1:	6a 0d                	push   $0xd
  jmp __alltraps
c0102bd3:	e9 64 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102bd8 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102bd8:	6a 0e                	push   $0xe
  jmp __alltraps
c0102bda:	e9 5d ff ff ff       	jmp    c0102b3c <__alltraps>

c0102bdf <vector15>:
.globl vector15
vector15:
  pushl $0
c0102bdf:	6a 00                	push   $0x0
  pushl $15
c0102be1:	6a 0f                	push   $0xf
  jmp __alltraps
c0102be3:	e9 54 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102be8 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102be8:	6a 00                	push   $0x0
  pushl $16
c0102bea:	6a 10                	push   $0x10
  jmp __alltraps
c0102bec:	e9 4b ff ff ff       	jmp    c0102b3c <__alltraps>

c0102bf1 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bf1:	6a 11                	push   $0x11
  jmp __alltraps
c0102bf3:	e9 44 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102bf8 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bf8:	6a 00                	push   $0x0
  pushl $18
c0102bfa:	6a 12                	push   $0x12
  jmp __alltraps
c0102bfc:	e9 3b ff ff ff       	jmp    c0102b3c <__alltraps>

c0102c01 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102c01:	6a 00                	push   $0x0
  pushl $19
c0102c03:	6a 13                	push   $0x13
  jmp __alltraps
c0102c05:	e9 32 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102c0a <vector20>:
.globl vector20
vector20:
  pushl $0
c0102c0a:	6a 00                	push   $0x0
  pushl $20
c0102c0c:	6a 14                	push   $0x14
  jmp __alltraps
c0102c0e:	e9 29 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102c13 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102c13:	6a 00                	push   $0x0
  pushl $21
c0102c15:	6a 15                	push   $0x15
  jmp __alltraps
c0102c17:	e9 20 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102c1c <vector22>:
.globl vector22
vector22:
  pushl $0
c0102c1c:	6a 00                	push   $0x0
  pushl $22
c0102c1e:	6a 16                	push   $0x16
  jmp __alltraps
c0102c20:	e9 17 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102c25 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102c25:	6a 00                	push   $0x0
  pushl $23
c0102c27:	6a 17                	push   $0x17
  jmp __alltraps
c0102c29:	e9 0e ff ff ff       	jmp    c0102b3c <__alltraps>

c0102c2e <vector24>:
.globl vector24
vector24:
  pushl $0
c0102c2e:	6a 00                	push   $0x0
  pushl $24
c0102c30:	6a 18                	push   $0x18
  jmp __alltraps
c0102c32:	e9 05 ff ff ff       	jmp    c0102b3c <__alltraps>

c0102c37 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c37:	6a 00                	push   $0x0
  pushl $25
c0102c39:	6a 19                	push   $0x19
  jmp __alltraps
c0102c3b:	e9 fc fe ff ff       	jmp    c0102b3c <__alltraps>

c0102c40 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c40:	6a 00                	push   $0x0
  pushl $26
c0102c42:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c44:	e9 f3 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102c49 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c49:	6a 00                	push   $0x0
  pushl $27
c0102c4b:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c4d:	e9 ea fe ff ff       	jmp    c0102b3c <__alltraps>

c0102c52 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c52:	6a 00                	push   $0x0
  pushl $28
c0102c54:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c56:	e9 e1 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102c5b <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c5b:	6a 00                	push   $0x0
  pushl $29
c0102c5d:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c5f:	e9 d8 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102c64 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c64:	6a 00                	push   $0x0
  pushl $30
c0102c66:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c68:	e9 cf fe ff ff       	jmp    c0102b3c <__alltraps>

c0102c6d <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c6d:	6a 00                	push   $0x0
  pushl $31
c0102c6f:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c71:	e9 c6 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102c76 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c76:	6a 00                	push   $0x0
  pushl $32
c0102c78:	6a 20                	push   $0x20
  jmp __alltraps
c0102c7a:	e9 bd fe ff ff       	jmp    c0102b3c <__alltraps>

c0102c7f <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c7f:	6a 00                	push   $0x0
  pushl $33
c0102c81:	6a 21                	push   $0x21
  jmp __alltraps
c0102c83:	e9 b4 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102c88 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c88:	6a 00                	push   $0x0
  pushl $34
c0102c8a:	6a 22                	push   $0x22
  jmp __alltraps
c0102c8c:	e9 ab fe ff ff       	jmp    c0102b3c <__alltraps>

c0102c91 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c91:	6a 00                	push   $0x0
  pushl $35
c0102c93:	6a 23                	push   $0x23
  jmp __alltraps
c0102c95:	e9 a2 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102c9a <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c9a:	6a 00                	push   $0x0
  pushl $36
c0102c9c:	6a 24                	push   $0x24
  jmp __alltraps
c0102c9e:	e9 99 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102ca3 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102ca3:	6a 00                	push   $0x0
  pushl $37
c0102ca5:	6a 25                	push   $0x25
  jmp __alltraps
c0102ca7:	e9 90 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102cac <vector38>:
.globl vector38
vector38:
  pushl $0
c0102cac:	6a 00                	push   $0x0
  pushl $38
c0102cae:	6a 26                	push   $0x26
  jmp __alltraps
c0102cb0:	e9 87 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102cb5 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102cb5:	6a 00                	push   $0x0
  pushl $39
c0102cb7:	6a 27                	push   $0x27
  jmp __alltraps
c0102cb9:	e9 7e fe ff ff       	jmp    c0102b3c <__alltraps>

c0102cbe <vector40>:
.globl vector40
vector40:
  pushl $0
c0102cbe:	6a 00                	push   $0x0
  pushl $40
c0102cc0:	6a 28                	push   $0x28
  jmp __alltraps
c0102cc2:	e9 75 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102cc7 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102cc7:	6a 00                	push   $0x0
  pushl $41
c0102cc9:	6a 29                	push   $0x29
  jmp __alltraps
c0102ccb:	e9 6c fe ff ff       	jmp    c0102b3c <__alltraps>

c0102cd0 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102cd0:	6a 00                	push   $0x0
  pushl $42
c0102cd2:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102cd4:	e9 63 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102cd9 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102cd9:	6a 00                	push   $0x0
  pushl $43
c0102cdb:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102cdd:	e9 5a fe ff ff       	jmp    c0102b3c <__alltraps>

c0102ce2 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102ce2:	6a 00                	push   $0x0
  pushl $44
c0102ce4:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102ce6:	e9 51 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102ceb <vector45>:
.globl vector45
vector45:
  pushl $0
c0102ceb:	6a 00                	push   $0x0
  pushl $45
c0102ced:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102cef:	e9 48 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102cf4 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cf4:	6a 00                	push   $0x0
  pushl $46
c0102cf6:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cf8:	e9 3f fe ff ff       	jmp    c0102b3c <__alltraps>

c0102cfd <vector47>:
.globl vector47
vector47:
  pushl $0
c0102cfd:	6a 00                	push   $0x0
  pushl $47
c0102cff:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102d01:	e9 36 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102d06 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102d06:	6a 00                	push   $0x0
  pushl $48
c0102d08:	6a 30                	push   $0x30
  jmp __alltraps
c0102d0a:	e9 2d fe ff ff       	jmp    c0102b3c <__alltraps>

c0102d0f <vector49>:
.globl vector49
vector49:
  pushl $0
c0102d0f:	6a 00                	push   $0x0
  pushl $49
c0102d11:	6a 31                	push   $0x31
  jmp __alltraps
c0102d13:	e9 24 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102d18 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102d18:	6a 00                	push   $0x0
  pushl $50
c0102d1a:	6a 32                	push   $0x32
  jmp __alltraps
c0102d1c:	e9 1b fe ff ff       	jmp    c0102b3c <__alltraps>

c0102d21 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102d21:	6a 00                	push   $0x0
  pushl $51
c0102d23:	6a 33                	push   $0x33
  jmp __alltraps
c0102d25:	e9 12 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102d2a <vector52>:
.globl vector52
vector52:
  pushl $0
c0102d2a:	6a 00                	push   $0x0
  pushl $52
c0102d2c:	6a 34                	push   $0x34
  jmp __alltraps
c0102d2e:	e9 09 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102d33 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d33:	6a 00                	push   $0x0
  pushl $53
c0102d35:	6a 35                	push   $0x35
  jmp __alltraps
c0102d37:	e9 00 fe ff ff       	jmp    c0102b3c <__alltraps>

c0102d3c <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d3c:	6a 00                	push   $0x0
  pushl $54
c0102d3e:	6a 36                	push   $0x36
  jmp __alltraps
c0102d40:	e9 f7 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102d45 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d45:	6a 00                	push   $0x0
  pushl $55
c0102d47:	6a 37                	push   $0x37
  jmp __alltraps
c0102d49:	e9 ee fd ff ff       	jmp    c0102b3c <__alltraps>

c0102d4e <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d4e:	6a 00                	push   $0x0
  pushl $56
c0102d50:	6a 38                	push   $0x38
  jmp __alltraps
c0102d52:	e9 e5 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102d57 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d57:	6a 00                	push   $0x0
  pushl $57
c0102d59:	6a 39                	push   $0x39
  jmp __alltraps
c0102d5b:	e9 dc fd ff ff       	jmp    c0102b3c <__alltraps>

c0102d60 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d60:	6a 00                	push   $0x0
  pushl $58
c0102d62:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d64:	e9 d3 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102d69 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d69:	6a 00                	push   $0x0
  pushl $59
c0102d6b:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d6d:	e9 ca fd ff ff       	jmp    c0102b3c <__alltraps>

c0102d72 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d72:	6a 00                	push   $0x0
  pushl $60
c0102d74:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d76:	e9 c1 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102d7b <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d7b:	6a 00                	push   $0x0
  pushl $61
c0102d7d:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d7f:	e9 b8 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102d84 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d84:	6a 00                	push   $0x0
  pushl $62
c0102d86:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d88:	e9 af fd ff ff       	jmp    c0102b3c <__alltraps>

c0102d8d <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d8d:	6a 00                	push   $0x0
  pushl $63
c0102d8f:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d91:	e9 a6 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102d96 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d96:	6a 00                	push   $0x0
  pushl $64
c0102d98:	6a 40                	push   $0x40
  jmp __alltraps
c0102d9a:	e9 9d fd ff ff       	jmp    c0102b3c <__alltraps>

c0102d9f <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d9f:	6a 00                	push   $0x0
  pushl $65
c0102da1:	6a 41                	push   $0x41
  jmp __alltraps
c0102da3:	e9 94 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102da8 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102da8:	6a 00                	push   $0x0
  pushl $66
c0102daa:	6a 42                	push   $0x42
  jmp __alltraps
c0102dac:	e9 8b fd ff ff       	jmp    c0102b3c <__alltraps>

c0102db1 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102db1:	6a 00                	push   $0x0
  pushl $67
c0102db3:	6a 43                	push   $0x43
  jmp __alltraps
c0102db5:	e9 82 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102dba <vector68>:
.globl vector68
vector68:
  pushl $0
c0102dba:	6a 00                	push   $0x0
  pushl $68
c0102dbc:	6a 44                	push   $0x44
  jmp __alltraps
c0102dbe:	e9 79 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102dc3 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102dc3:	6a 00                	push   $0x0
  pushl $69
c0102dc5:	6a 45                	push   $0x45
  jmp __alltraps
c0102dc7:	e9 70 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102dcc <vector70>:
.globl vector70
vector70:
  pushl $0
c0102dcc:	6a 00                	push   $0x0
  pushl $70
c0102dce:	6a 46                	push   $0x46
  jmp __alltraps
c0102dd0:	e9 67 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102dd5 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102dd5:	6a 00                	push   $0x0
  pushl $71
c0102dd7:	6a 47                	push   $0x47
  jmp __alltraps
c0102dd9:	e9 5e fd ff ff       	jmp    c0102b3c <__alltraps>

c0102dde <vector72>:
.globl vector72
vector72:
  pushl $0
c0102dde:	6a 00                	push   $0x0
  pushl $72
c0102de0:	6a 48                	push   $0x48
  jmp __alltraps
c0102de2:	e9 55 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102de7 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102de7:	6a 00                	push   $0x0
  pushl $73
c0102de9:	6a 49                	push   $0x49
  jmp __alltraps
c0102deb:	e9 4c fd ff ff       	jmp    c0102b3c <__alltraps>

c0102df0 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102df0:	6a 00                	push   $0x0
  pushl $74
c0102df2:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102df4:	e9 43 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102df9 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102df9:	6a 00                	push   $0x0
  pushl $75
c0102dfb:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102dfd:	e9 3a fd ff ff       	jmp    c0102b3c <__alltraps>

c0102e02 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102e02:	6a 00                	push   $0x0
  pushl $76
c0102e04:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102e06:	e9 31 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102e0b <vector77>:
.globl vector77
vector77:
  pushl $0
c0102e0b:	6a 00                	push   $0x0
  pushl $77
c0102e0d:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102e0f:	e9 28 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102e14 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102e14:	6a 00                	push   $0x0
  pushl $78
c0102e16:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102e18:	e9 1f fd ff ff       	jmp    c0102b3c <__alltraps>

c0102e1d <vector79>:
.globl vector79
vector79:
  pushl $0
c0102e1d:	6a 00                	push   $0x0
  pushl $79
c0102e1f:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102e21:	e9 16 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102e26 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102e26:	6a 00                	push   $0x0
  pushl $80
c0102e28:	6a 50                	push   $0x50
  jmp __alltraps
c0102e2a:	e9 0d fd ff ff       	jmp    c0102b3c <__alltraps>

c0102e2f <vector81>:
.globl vector81
vector81:
  pushl $0
c0102e2f:	6a 00                	push   $0x0
  pushl $81
c0102e31:	6a 51                	push   $0x51
  jmp __alltraps
c0102e33:	e9 04 fd ff ff       	jmp    c0102b3c <__alltraps>

c0102e38 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e38:	6a 00                	push   $0x0
  pushl $82
c0102e3a:	6a 52                	push   $0x52
  jmp __alltraps
c0102e3c:	e9 fb fc ff ff       	jmp    c0102b3c <__alltraps>

c0102e41 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e41:	6a 00                	push   $0x0
  pushl $83
c0102e43:	6a 53                	push   $0x53
  jmp __alltraps
c0102e45:	e9 f2 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102e4a <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e4a:	6a 00                	push   $0x0
  pushl $84
c0102e4c:	6a 54                	push   $0x54
  jmp __alltraps
c0102e4e:	e9 e9 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102e53 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e53:	6a 00                	push   $0x0
  pushl $85
c0102e55:	6a 55                	push   $0x55
  jmp __alltraps
c0102e57:	e9 e0 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102e5c <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e5c:	6a 00                	push   $0x0
  pushl $86
c0102e5e:	6a 56                	push   $0x56
  jmp __alltraps
c0102e60:	e9 d7 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102e65 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e65:	6a 00                	push   $0x0
  pushl $87
c0102e67:	6a 57                	push   $0x57
  jmp __alltraps
c0102e69:	e9 ce fc ff ff       	jmp    c0102b3c <__alltraps>

c0102e6e <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e6e:	6a 00                	push   $0x0
  pushl $88
c0102e70:	6a 58                	push   $0x58
  jmp __alltraps
c0102e72:	e9 c5 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102e77 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e77:	6a 00                	push   $0x0
  pushl $89
c0102e79:	6a 59                	push   $0x59
  jmp __alltraps
c0102e7b:	e9 bc fc ff ff       	jmp    c0102b3c <__alltraps>

c0102e80 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e80:	6a 00                	push   $0x0
  pushl $90
c0102e82:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e84:	e9 b3 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102e89 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e89:	6a 00                	push   $0x0
  pushl $91
c0102e8b:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e8d:	e9 aa fc ff ff       	jmp    c0102b3c <__alltraps>

c0102e92 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e92:	6a 00                	push   $0x0
  pushl $92
c0102e94:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e96:	e9 a1 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102e9b <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e9b:	6a 00                	push   $0x0
  pushl $93
c0102e9d:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e9f:	e9 98 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102ea4 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102ea4:	6a 00                	push   $0x0
  pushl $94
c0102ea6:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102ea8:	e9 8f fc ff ff       	jmp    c0102b3c <__alltraps>

c0102ead <vector95>:
.globl vector95
vector95:
  pushl $0
c0102ead:	6a 00                	push   $0x0
  pushl $95
c0102eaf:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102eb1:	e9 86 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102eb6 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102eb6:	6a 00                	push   $0x0
  pushl $96
c0102eb8:	6a 60                	push   $0x60
  jmp __alltraps
c0102eba:	e9 7d fc ff ff       	jmp    c0102b3c <__alltraps>

c0102ebf <vector97>:
.globl vector97
vector97:
  pushl $0
c0102ebf:	6a 00                	push   $0x0
  pushl $97
c0102ec1:	6a 61                	push   $0x61
  jmp __alltraps
c0102ec3:	e9 74 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102ec8 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102ec8:	6a 00                	push   $0x0
  pushl $98
c0102eca:	6a 62                	push   $0x62
  jmp __alltraps
c0102ecc:	e9 6b fc ff ff       	jmp    c0102b3c <__alltraps>

c0102ed1 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102ed1:	6a 00                	push   $0x0
  pushl $99
c0102ed3:	6a 63                	push   $0x63
  jmp __alltraps
c0102ed5:	e9 62 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102eda <vector100>:
.globl vector100
vector100:
  pushl $0
c0102eda:	6a 00                	push   $0x0
  pushl $100
c0102edc:	6a 64                	push   $0x64
  jmp __alltraps
c0102ede:	e9 59 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102ee3 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102ee3:	6a 00                	push   $0x0
  pushl $101
c0102ee5:	6a 65                	push   $0x65
  jmp __alltraps
c0102ee7:	e9 50 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102eec <vector102>:
.globl vector102
vector102:
  pushl $0
c0102eec:	6a 00                	push   $0x0
  pushl $102
c0102eee:	6a 66                	push   $0x66
  jmp __alltraps
c0102ef0:	e9 47 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102ef5 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ef5:	6a 00                	push   $0x0
  pushl $103
c0102ef7:	6a 67                	push   $0x67
  jmp __alltraps
c0102ef9:	e9 3e fc ff ff       	jmp    c0102b3c <__alltraps>

c0102efe <vector104>:
.globl vector104
vector104:
  pushl $0
c0102efe:	6a 00                	push   $0x0
  pushl $104
c0102f00:	6a 68                	push   $0x68
  jmp __alltraps
c0102f02:	e9 35 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102f07 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102f07:	6a 00                	push   $0x0
  pushl $105
c0102f09:	6a 69                	push   $0x69
  jmp __alltraps
c0102f0b:	e9 2c fc ff ff       	jmp    c0102b3c <__alltraps>

c0102f10 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102f10:	6a 00                	push   $0x0
  pushl $106
c0102f12:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102f14:	e9 23 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102f19 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102f19:	6a 00                	push   $0x0
  pushl $107
c0102f1b:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102f1d:	e9 1a fc ff ff       	jmp    c0102b3c <__alltraps>

c0102f22 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102f22:	6a 00                	push   $0x0
  pushl $108
c0102f24:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102f26:	e9 11 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102f2b <vector109>:
.globl vector109
vector109:
  pushl $0
c0102f2b:	6a 00                	push   $0x0
  pushl $109
c0102f2d:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102f2f:	e9 08 fc ff ff       	jmp    c0102b3c <__alltraps>

c0102f34 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f34:	6a 00                	push   $0x0
  pushl $110
c0102f36:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f38:	e9 ff fb ff ff       	jmp    c0102b3c <__alltraps>

c0102f3d <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f3d:	6a 00                	push   $0x0
  pushl $111
c0102f3f:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f41:	e9 f6 fb ff ff       	jmp    c0102b3c <__alltraps>

c0102f46 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f46:	6a 00                	push   $0x0
  pushl $112
c0102f48:	6a 70                	push   $0x70
  jmp __alltraps
c0102f4a:	e9 ed fb ff ff       	jmp    c0102b3c <__alltraps>

c0102f4f <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f4f:	6a 00                	push   $0x0
  pushl $113
c0102f51:	6a 71                	push   $0x71
  jmp __alltraps
c0102f53:	e9 e4 fb ff ff       	jmp    c0102b3c <__alltraps>

c0102f58 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f58:	6a 00                	push   $0x0
  pushl $114
c0102f5a:	6a 72                	push   $0x72
  jmp __alltraps
c0102f5c:	e9 db fb ff ff       	jmp    c0102b3c <__alltraps>

c0102f61 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f61:	6a 00                	push   $0x0
  pushl $115
c0102f63:	6a 73                	push   $0x73
  jmp __alltraps
c0102f65:	e9 d2 fb ff ff       	jmp    c0102b3c <__alltraps>

c0102f6a <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f6a:	6a 00                	push   $0x0
  pushl $116
c0102f6c:	6a 74                	push   $0x74
  jmp __alltraps
c0102f6e:	e9 c9 fb ff ff       	jmp    c0102b3c <__alltraps>

c0102f73 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f73:	6a 00                	push   $0x0
  pushl $117
c0102f75:	6a 75                	push   $0x75
  jmp __alltraps
c0102f77:	e9 c0 fb ff ff       	jmp    c0102b3c <__alltraps>

c0102f7c <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f7c:	6a 00                	push   $0x0
  pushl $118
c0102f7e:	6a 76                	push   $0x76
  jmp __alltraps
c0102f80:	e9 b7 fb ff ff       	jmp    c0102b3c <__alltraps>

c0102f85 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f85:	6a 00                	push   $0x0
  pushl $119
c0102f87:	6a 77                	push   $0x77
  jmp __alltraps
c0102f89:	e9 ae fb ff ff       	jmp    c0102b3c <__alltraps>

c0102f8e <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f8e:	6a 00                	push   $0x0
  pushl $120
c0102f90:	6a 78                	push   $0x78
  jmp __alltraps
c0102f92:	e9 a5 fb ff ff       	jmp    c0102b3c <__alltraps>

c0102f97 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f97:	6a 00                	push   $0x0
  pushl $121
c0102f99:	6a 79                	push   $0x79
  jmp __alltraps
c0102f9b:	e9 9c fb ff ff       	jmp    c0102b3c <__alltraps>

c0102fa0 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102fa0:	6a 00                	push   $0x0
  pushl $122
c0102fa2:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102fa4:	e9 93 fb ff ff       	jmp    c0102b3c <__alltraps>

c0102fa9 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102fa9:	6a 00                	push   $0x0
  pushl $123
c0102fab:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102fad:	e9 8a fb ff ff       	jmp    c0102b3c <__alltraps>

c0102fb2 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102fb2:	6a 00                	push   $0x0
  pushl $124
c0102fb4:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102fb6:	e9 81 fb ff ff       	jmp    c0102b3c <__alltraps>

c0102fbb <vector125>:
.globl vector125
vector125:
  pushl $0
c0102fbb:	6a 00                	push   $0x0
  pushl $125
c0102fbd:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102fbf:	e9 78 fb ff ff       	jmp    c0102b3c <__alltraps>

c0102fc4 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102fc4:	6a 00                	push   $0x0
  pushl $126
c0102fc6:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102fc8:	e9 6f fb ff ff       	jmp    c0102b3c <__alltraps>

c0102fcd <vector127>:
.globl vector127
vector127:
  pushl $0
c0102fcd:	6a 00                	push   $0x0
  pushl $127
c0102fcf:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102fd1:	e9 66 fb ff ff       	jmp    c0102b3c <__alltraps>

c0102fd6 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fd6:	6a 00                	push   $0x0
  pushl $128
c0102fd8:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fdd:	e9 5a fb ff ff       	jmp    c0102b3c <__alltraps>

c0102fe2 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fe2:	6a 00                	push   $0x0
  pushl $129
c0102fe4:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fe9:	e9 4e fb ff ff       	jmp    c0102b3c <__alltraps>

c0102fee <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fee:	6a 00                	push   $0x0
  pushl $130
c0102ff0:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102ff5:	e9 42 fb ff ff       	jmp    c0102b3c <__alltraps>

c0102ffa <vector131>:
.globl vector131
vector131:
  pushl $0
c0102ffa:	6a 00                	push   $0x0
  pushl $131
c0102ffc:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0103001:	e9 36 fb ff ff       	jmp    c0102b3c <__alltraps>

c0103006 <vector132>:
.globl vector132
vector132:
  pushl $0
c0103006:	6a 00                	push   $0x0
  pushl $132
c0103008:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c010300d:	e9 2a fb ff ff       	jmp    c0102b3c <__alltraps>

c0103012 <vector133>:
.globl vector133
vector133:
  pushl $0
c0103012:	6a 00                	push   $0x0
  pushl $133
c0103014:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0103019:	e9 1e fb ff ff       	jmp    c0102b3c <__alltraps>

c010301e <vector134>:
.globl vector134
vector134:
  pushl $0
c010301e:	6a 00                	push   $0x0
  pushl $134
c0103020:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0103025:	e9 12 fb ff ff       	jmp    c0102b3c <__alltraps>

c010302a <vector135>:
.globl vector135
vector135:
  pushl $0
c010302a:	6a 00                	push   $0x0
  pushl $135
c010302c:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0103031:	e9 06 fb ff ff       	jmp    c0102b3c <__alltraps>

c0103036 <vector136>:
.globl vector136
vector136:
  pushl $0
c0103036:	6a 00                	push   $0x0
  pushl $136
c0103038:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c010303d:	e9 fa fa ff ff       	jmp    c0102b3c <__alltraps>

c0103042 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103042:	6a 00                	push   $0x0
  pushl $137
c0103044:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0103049:	e9 ee fa ff ff       	jmp    c0102b3c <__alltraps>

c010304e <vector138>:
.globl vector138
vector138:
  pushl $0
c010304e:	6a 00                	push   $0x0
  pushl $138
c0103050:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103055:	e9 e2 fa ff ff       	jmp    c0102b3c <__alltraps>

c010305a <vector139>:
.globl vector139
vector139:
  pushl $0
c010305a:	6a 00                	push   $0x0
  pushl $139
c010305c:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0103061:	e9 d6 fa ff ff       	jmp    c0102b3c <__alltraps>

c0103066 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103066:	6a 00                	push   $0x0
  pushl $140
c0103068:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c010306d:	e9 ca fa ff ff       	jmp    c0102b3c <__alltraps>

c0103072 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103072:	6a 00                	push   $0x0
  pushl $141
c0103074:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103079:	e9 be fa ff ff       	jmp    c0102b3c <__alltraps>

c010307e <vector142>:
.globl vector142
vector142:
  pushl $0
c010307e:	6a 00                	push   $0x0
  pushl $142
c0103080:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103085:	e9 b2 fa ff ff       	jmp    c0102b3c <__alltraps>

c010308a <vector143>:
.globl vector143
vector143:
  pushl $0
c010308a:	6a 00                	push   $0x0
  pushl $143
c010308c:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0103091:	e9 a6 fa ff ff       	jmp    c0102b3c <__alltraps>

c0103096 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103096:	6a 00                	push   $0x0
  pushl $144
c0103098:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c010309d:	e9 9a fa ff ff       	jmp    c0102b3c <__alltraps>

c01030a2 <vector145>:
.globl vector145
vector145:
  pushl $0
c01030a2:	6a 00                	push   $0x0
  pushl $145
c01030a4:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c01030a9:	e9 8e fa ff ff       	jmp    c0102b3c <__alltraps>

c01030ae <vector146>:
.globl vector146
vector146:
  pushl $0
c01030ae:	6a 00                	push   $0x0
  pushl $146
c01030b0:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c01030b5:	e9 82 fa ff ff       	jmp    c0102b3c <__alltraps>

c01030ba <vector147>:
.globl vector147
vector147:
  pushl $0
c01030ba:	6a 00                	push   $0x0
  pushl $147
c01030bc:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c01030c1:	e9 76 fa ff ff       	jmp    c0102b3c <__alltraps>

c01030c6 <vector148>:
.globl vector148
vector148:
  pushl $0
c01030c6:	6a 00                	push   $0x0
  pushl $148
c01030c8:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c01030cd:	e9 6a fa ff ff       	jmp    c0102b3c <__alltraps>

c01030d2 <vector149>:
.globl vector149
vector149:
  pushl $0
c01030d2:	6a 00                	push   $0x0
  pushl $149
c01030d4:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030d9:	e9 5e fa ff ff       	jmp    c0102b3c <__alltraps>

c01030de <vector150>:
.globl vector150
vector150:
  pushl $0
c01030de:	6a 00                	push   $0x0
  pushl $150
c01030e0:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030e5:	e9 52 fa ff ff       	jmp    c0102b3c <__alltraps>

c01030ea <vector151>:
.globl vector151
vector151:
  pushl $0
c01030ea:	6a 00                	push   $0x0
  pushl $151
c01030ec:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030f1:	e9 46 fa ff ff       	jmp    c0102b3c <__alltraps>

c01030f6 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030f6:	6a 00                	push   $0x0
  pushl $152
c01030f8:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030fd:	e9 3a fa ff ff       	jmp    c0102b3c <__alltraps>

c0103102 <vector153>:
.globl vector153
vector153:
  pushl $0
c0103102:	6a 00                	push   $0x0
  pushl $153
c0103104:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c0103109:	e9 2e fa ff ff       	jmp    c0102b3c <__alltraps>

c010310e <vector154>:
.globl vector154
vector154:
  pushl $0
c010310e:	6a 00                	push   $0x0
  pushl $154
c0103110:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0103115:	e9 22 fa ff ff       	jmp    c0102b3c <__alltraps>

c010311a <vector155>:
.globl vector155
vector155:
  pushl $0
c010311a:	6a 00                	push   $0x0
  pushl $155
c010311c:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c0103121:	e9 16 fa ff ff       	jmp    c0102b3c <__alltraps>

c0103126 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103126:	6a 00                	push   $0x0
  pushl $156
c0103128:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c010312d:	e9 0a fa ff ff       	jmp    c0102b3c <__alltraps>

c0103132 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103132:	6a 00                	push   $0x0
  pushl $157
c0103134:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103139:	e9 fe f9 ff ff       	jmp    c0102b3c <__alltraps>

c010313e <vector158>:
.globl vector158
vector158:
  pushl $0
c010313e:	6a 00                	push   $0x0
  pushl $158
c0103140:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103145:	e9 f2 f9 ff ff       	jmp    c0102b3c <__alltraps>

c010314a <vector159>:
.globl vector159
vector159:
  pushl $0
c010314a:	6a 00                	push   $0x0
  pushl $159
c010314c:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103151:	e9 e6 f9 ff ff       	jmp    c0102b3c <__alltraps>

c0103156 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103156:	6a 00                	push   $0x0
  pushl $160
c0103158:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010315d:	e9 da f9 ff ff       	jmp    c0102b3c <__alltraps>

c0103162 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103162:	6a 00                	push   $0x0
  pushl $161
c0103164:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103169:	e9 ce f9 ff ff       	jmp    c0102b3c <__alltraps>

c010316e <vector162>:
.globl vector162
vector162:
  pushl $0
c010316e:	6a 00                	push   $0x0
  pushl $162
c0103170:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103175:	e9 c2 f9 ff ff       	jmp    c0102b3c <__alltraps>

c010317a <vector163>:
.globl vector163
vector163:
  pushl $0
c010317a:	6a 00                	push   $0x0
  pushl $163
c010317c:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103181:	e9 b6 f9 ff ff       	jmp    c0102b3c <__alltraps>

c0103186 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103186:	6a 00                	push   $0x0
  pushl $164
c0103188:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c010318d:	e9 aa f9 ff ff       	jmp    c0102b3c <__alltraps>

c0103192 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103192:	6a 00                	push   $0x0
  pushl $165
c0103194:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103199:	e9 9e f9 ff ff       	jmp    c0102b3c <__alltraps>

c010319e <vector166>:
.globl vector166
vector166:
  pushl $0
c010319e:	6a 00                	push   $0x0
  pushl $166
c01031a0:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c01031a5:	e9 92 f9 ff ff       	jmp    c0102b3c <__alltraps>

c01031aa <vector167>:
.globl vector167
vector167:
  pushl $0
c01031aa:	6a 00                	push   $0x0
  pushl $167
c01031ac:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c01031b1:	e9 86 f9 ff ff       	jmp    c0102b3c <__alltraps>

c01031b6 <vector168>:
.globl vector168
vector168:
  pushl $0
c01031b6:	6a 00                	push   $0x0
  pushl $168
c01031b8:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01031bd:	e9 7a f9 ff ff       	jmp    c0102b3c <__alltraps>

c01031c2 <vector169>:
.globl vector169
vector169:
  pushl $0
c01031c2:	6a 00                	push   $0x0
  pushl $169
c01031c4:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01031c9:	e9 6e f9 ff ff       	jmp    c0102b3c <__alltraps>

c01031ce <vector170>:
.globl vector170
vector170:
  pushl $0
c01031ce:	6a 00                	push   $0x0
  pushl $170
c01031d0:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031d5:	e9 62 f9 ff ff       	jmp    c0102b3c <__alltraps>

c01031da <vector171>:
.globl vector171
vector171:
  pushl $0
c01031da:	6a 00                	push   $0x0
  pushl $171
c01031dc:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031e1:	e9 56 f9 ff ff       	jmp    c0102b3c <__alltraps>

c01031e6 <vector172>:
.globl vector172
vector172:
  pushl $0
c01031e6:	6a 00                	push   $0x0
  pushl $172
c01031e8:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031ed:	e9 4a f9 ff ff       	jmp    c0102b3c <__alltraps>

c01031f2 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031f2:	6a 00                	push   $0x0
  pushl $173
c01031f4:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031f9:	e9 3e f9 ff ff       	jmp    c0102b3c <__alltraps>

c01031fe <vector174>:
.globl vector174
vector174:
  pushl $0
c01031fe:	6a 00                	push   $0x0
  pushl $174
c0103200:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c0103205:	e9 32 f9 ff ff       	jmp    c0102b3c <__alltraps>

c010320a <vector175>:
.globl vector175
vector175:
  pushl $0
c010320a:	6a 00                	push   $0x0
  pushl $175
c010320c:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c0103211:	e9 26 f9 ff ff       	jmp    c0102b3c <__alltraps>

c0103216 <vector176>:
.globl vector176
vector176:
  pushl $0
c0103216:	6a 00                	push   $0x0
  pushl $176
c0103218:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c010321d:	e9 1a f9 ff ff       	jmp    c0102b3c <__alltraps>

c0103222 <vector177>:
.globl vector177
vector177:
  pushl $0
c0103222:	6a 00                	push   $0x0
  pushl $177
c0103224:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103229:	e9 0e f9 ff ff       	jmp    c0102b3c <__alltraps>

c010322e <vector178>:
.globl vector178
vector178:
  pushl $0
c010322e:	6a 00                	push   $0x0
  pushl $178
c0103230:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103235:	e9 02 f9 ff ff       	jmp    c0102b3c <__alltraps>

c010323a <vector179>:
.globl vector179
vector179:
  pushl $0
c010323a:	6a 00                	push   $0x0
  pushl $179
c010323c:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103241:	e9 f6 f8 ff ff       	jmp    c0102b3c <__alltraps>

c0103246 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103246:	6a 00                	push   $0x0
  pushl $180
c0103248:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c010324d:	e9 ea f8 ff ff       	jmp    c0102b3c <__alltraps>

c0103252 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103252:	6a 00                	push   $0x0
  pushl $181
c0103254:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103259:	e9 de f8 ff ff       	jmp    c0102b3c <__alltraps>

c010325e <vector182>:
.globl vector182
vector182:
  pushl $0
c010325e:	6a 00                	push   $0x0
  pushl $182
c0103260:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103265:	e9 d2 f8 ff ff       	jmp    c0102b3c <__alltraps>

c010326a <vector183>:
.globl vector183
vector183:
  pushl $0
c010326a:	6a 00                	push   $0x0
  pushl $183
c010326c:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103271:	e9 c6 f8 ff ff       	jmp    c0102b3c <__alltraps>

c0103276 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103276:	6a 00                	push   $0x0
  pushl $184
c0103278:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010327d:	e9 ba f8 ff ff       	jmp    c0102b3c <__alltraps>

c0103282 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103282:	6a 00                	push   $0x0
  pushl $185
c0103284:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103289:	e9 ae f8 ff ff       	jmp    c0102b3c <__alltraps>

c010328e <vector186>:
.globl vector186
vector186:
  pushl $0
c010328e:	6a 00                	push   $0x0
  pushl $186
c0103290:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103295:	e9 a2 f8 ff ff       	jmp    c0102b3c <__alltraps>

c010329a <vector187>:
.globl vector187
vector187:
  pushl $0
c010329a:	6a 00                	push   $0x0
  pushl $187
c010329c:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c01032a1:	e9 96 f8 ff ff       	jmp    c0102b3c <__alltraps>

c01032a6 <vector188>:
.globl vector188
vector188:
  pushl $0
c01032a6:	6a 00                	push   $0x0
  pushl $188
c01032a8:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c01032ad:	e9 8a f8 ff ff       	jmp    c0102b3c <__alltraps>

c01032b2 <vector189>:
.globl vector189
vector189:
  pushl $0
c01032b2:	6a 00                	push   $0x0
  pushl $189
c01032b4:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c01032b9:	e9 7e f8 ff ff       	jmp    c0102b3c <__alltraps>

c01032be <vector190>:
.globl vector190
vector190:
  pushl $0
c01032be:	6a 00                	push   $0x0
  pushl $190
c01032c0:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01032c5:	e9 72 f8 ff ff       	jmp    c0102b3c <__alltraps>

c01032ca <vector191>:
.globl vector191
vector191:
  pushl $0
c01032ca:	6a 00                	push   $0x0
  pushl $191
c01032cc:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01032d1:	e9 66 f8 ff ff       	jmp    c0102b3c <__alltraps>

c01032d6 <vector192>:
.globl vector192
vector192:
  pushl $0
c01032d6:	6a 00                	push   $0x0
  pushl $192
c01032d8:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032dd:	e9 5a f8 ff ff       	jmp    c0102b3c <__alltraps>

c01032e2 <vector193>:
.globl vector193
vector193:
  pushl $0
c01032e2:	6a 00                	push   $0x0
  pushl $193
c01032e4:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032e9:	e9 4e f8 ff ff       	jmp    c0102b3c <__alltraps>

c01032ee <vector194>:
.globl vector194
vector194:
  pushl $0
c01032ee:	6a 00                	push   $0x0
  pushl $194
c01032f0:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032f5:	e9 42 f8 ff ff       	jmp    c0102b3c <__alltraps>

c01032fa <vector195>:
.globl vector195
vector195:
  pushl $0
c01032fa:	6a 00                	push   $0x0
  pushl $195
c01032fc:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c0103301:	e9 36 f8 ff ff       	jmp    c0102b3c <__alltraps>

c0103306 <vector196>:
.globl vector196
vector196:
  pushl $0
c0103306:	6a 00                	push   $0x0
  pushl $196
c0103308:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c010330d:	e9 2a f8 ff ff       	jmp    c0102b3c <__alltraps>

c0103312 <vector197>:
.globl vector197
vector197:
  pushl $0
c0103312:	6a 00                	push   $0x0
  pushl $197
c0103314:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c0103319:	e9 1e f8 ff ff       	jmp    c0102b3c <__alltraps>

c010331e <vector198>:
.globl vector198
vector198:
  pushl $0
c010331e:	6a 00                	push   $0x0
  pushl $198
c0103320:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103325:	e9 12 f8 ff ff       	jmp    c0102b3c <__alltraps>

c010332a <vector199>:
.globl vector199
vector199:
  pushl $0
c010332a:	6a 00                	push   $0x0
  pushl $199
c010332c:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0103331:	e9 06 f8 ff ff       	jmp    c0102b3c <__alltraps>

c0103336 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103336:	6a 00                	push   $0x0
  pushl $200
c0103338:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010333d:	e9 fa f7 ff ff       	jmp    c0102b3c <__alltraps>

c0103342 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103342:	6a 00                	push   $0x0
  pushl $201
c0103344:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103349:	e9 ee f7 ff ff       	jmp    c0102b3c <__alltraps>

c010334e <vector202>:
.globl vector202
vector202:
  pushl $0
c010334e:	6a 00                	push   $0x0
  pushl $202
c0103350:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103355:	e9 e2 f7 ff ff       	jmp    c0102b3c <__alltraps>

c010335a <vector203>:
.globl vector203
vector203:
  pushl $0
c010335a:	6a 00                	push   $0x0
  pushl $203
c010335c:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103361:	e9 d6 f7 ff ff       	jmp    c0102b3c <__alltraps>

c0103366 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103366:	6a 00                	push   $0x0
  pushl $204
c0103368:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010336d:	e9 ca f7 ff ff       	jmp    c0102b3c <__alltraps>

c0103372 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103372:	6a 00                	push   $0x0
  pushl $205
c0103374:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103379:	e9 be f7 ff ff       	jmp    c0102b3c <__alltraps>

c010337e <vector206>:
.globl vector206
vector206:
  pushl $0
c010337e:	6a 00                	push   $0x0
  pushl $206
c0103380:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103385:	e9 b2 f7 ff ff       	jmp    c0102b3c <__alltraps>

c010338a <vector207>:
.globl vector207
vector207:
  pushl $0
c010338a:	6a 00                	push   $0x0
  pushl $207
c010338c:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103391:	e9 a6 f7 ff ff       	jmp    c0102b3c <__alltraps>

c0103396 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103396:	6a 00                	push   $0x0
  pushl $208
c0103398:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c010339d:	e9 9a f7 ff ff       	jmp    c0102b3c <__alltraps>

c01033a2 <vector209>:
.globl vector209
vector209:
  pushl $0
c01033a2:	6a 00                	push   $0x0
  pushl $209
c01033a4:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c01033a9:	e9 8e f7 ff ff       	jmp    c0102b3c <__alltraps>

c01033ae <vector210>:
.globl vector210
vector210:
  pushl $0
c01033ae:	6a 00                	push   $0x0
  pushl $210
c01033b0:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01033b5:	e9 82 f7 ff ff       	jmp    c0102b3c <__alltraps>

c01033ba <vector211>:
.globl vector211
vector211:
  pushl $0
c01033ba:	6a 00                	push   $0x0
  pushl $211
c01033bc:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01033c1:	e9 76 f7 ff ff       	jmp    c0102b3c <__alltraps>

c01033c6 <vector212>:
.globl vector212
vector212:
  pushl $0
c01033c6:	6a 00                	push   $0x0
  pushl $212
c01033c8:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01033cd:	e9 6a f7 ff ff       	jmp    c0102b3c <__alltraps>

c01033d2 <vector213>:
.globl vector213
vector213:
  pushl $0
c01033d2:	6a 00                	push   $0x0
  pushl $213
c01033d4:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033d9:	e9 5e f7 ff ff       	jmp    c0102b3c <__alltraps>

c01033de <vector214>:
.globl vector214
vector214:
  pushl $0
c01033de:	6a 00                	push   $0x0
  pushl $214
c01033e0:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033e5:	e9 52 f7 ff ff       	jmp    c0102b3c <__alltraps>

c01033ea <vector215>:
.globl vector215
vector215:
  pushl $0
c01033ea:	6a 00                	push   $0x0
  pushl $215
c01033ec:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033f1:	e9 46 f7 ff ff       	jmp    c0102b3c <__alltraps>

c01033f6 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033f6:	6a 00                	push   $0x0
  pushl $216
c01033f8:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033fd:	e9 3a f7 ff ff       	jmp    c0102b3c <__alltraps>

c0103402 <vector217>:
.globl vector217
vector217:
  pushl $0
c0103402:	6a 00                	push   $0x0
  pushl $217
c0103404:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c0103409:	e9 2e f7 ff ff       	jmp    c0102b3c <__alltraps>

c010340e <vector218>:
.globl vector218
vector218:
  pushl $0
c010340e:	6a 00                	push   $0x0
  pushl $218
c0103410:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c0103415:	e9 22 f7 ff ff       	jmp    c0102b3c <__alltraps>

c010341a <vector219>:
.globl vector219
vector219:
  pushl $0
c010341a:	6a 00                	push   $0x0
  pushl $219
c010341c:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c0103421:	e9 16 f7 ff ff       	jmp    c0102b3c <__alltraps>

c0103426 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103426:	6a 00                	push   $0x0
  pushl $220
c0103428:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c010342d:	e9 0a f7 ff ff       	jmp    c0102b3c <__alltraps>

c0103432 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103432:	6a 00                	push   $0x0
  pushl $221
c0103434:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103439:	e9 fe f6 ff ff       	jmp    c0102b3c <__alltraps>

c010343e <vector222>:
.globl vector222
vector222:
  pushl $0
c010343e:	6a 00                	push   $0x0
  pushl $222
c0103440:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103445:	e9 f2 f6 ff ff       	jmp    c0102b3c <__alltraps>

c010344a <vector223>:
.globl vector223
vector223:
  pushl $0
c010344a:	6a 00                	push   $0x0
  pushl $223
c010344c:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103451:	e9 e6 f6 ff ff       	jmp    c0102b3c <__alltraps>

c0103456 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103456:	6a 00                	push   $0x0
  pushl $224
c0103458:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010345d:	e9 da f6 ff ff       	jmp    c0102b3c <__alltraps>

c0103462 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103462:	6a 00                	push   $0x0
  pushl $225
c0103464:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103469:	e9 ce f6 ff ff       	jmp    c0102b3c <__alltraps>

c010346e <vector226>:
.globl vector226
vector226:
  pushl $0
c010346e:	6a 00                	push   $0x0
  pushl $226
c0103470:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103475:	e9 c2 f6 ff ff       	jmp    c0102b3c <__alltraps>

c010347a <vector227>:
.globl vector227
vector227:
  pushl $0
c010347a:	6a 00                	push   $0x0
  pushl $227
c010347c:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103481:	e9 b6 f6 ff ff       	jmp    c0102b3c <__alltraps>

c0103486 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103486:	6a 00                	push   $0x0
  pushl $228
c0103488:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c010348d:	e9 aa f6 ff ff       	jmp    c0102b3c <__alltraps>

c0103492 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103492:	6a 00                	push   $0x0
  pushl $229
c0103494:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103499:	e9 9e f6 ff ff       	jmp    c0102b3c <__alltraps>

c010349e <vector230>:
.globl vector230
vector230:
  pushl $0
c010349e:	6a 00                	push   $0x0
  pushl $230
c01034a0:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c01034a5:	e9 92 f6 ff ff       	jmp    c0102b3c <__alltraps>

c01034aa <vector231>:
.globl vector231
vector231:
  pushl $0
c01034aa:	6a 00                	push   $0x0
  pushl $231
c01034ac:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c01034b1:	e9 86 f6 ff ff       	jmp    c0102b3c <__alltraps>

c01034b6 <vector232>:
.globl vector232
vector232:
  pushl $0
c01034b6:	6a 00                	push   $0x0
  pushl $232
c01034b8:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01034bd:	e9 7a f6 ff ff       	jmp    c0102b3c <__alltraps>

c01034c2 <vector233>:
.globl vector233
vector233:
  pushl $0
c01034c2:	6a 00                	push   $0x0
  pushl $233
c01034c4:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01034c9:	e9 6e f6 ff ff       	jmp    c0102b3c <__alltraps>

c01034ce <vector234>:
.globl vector234
vector234:
  pushl $0
c01034ce:	6a 00                	push   $0x0
  pushl $234
c01034d0:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034d5:	e9 62 f6 ff ff       	jmp    c0102b3c <__alltraps>

c01034da <vector235>:
.globl vector235
vector235:
  pushl $0
c01034da:	6a 00                	push   $0x0
  pushl $235
c01034dc:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034e1:	e9 56 f6 ff ff       	jmp    c0102b3c <__alltraps>

c01034e6 <vector236>:
.globl vector236
vector236:
  pushl $0
c01034e6:	6a 00                	push   $0x0
  pushl $236
c01034e8:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034ed:	e9 4a f6 ff ff       	jmp    c0102b3c <__alltraps>

c01034f2 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034f2:	6a 00                	push   $0x0
  pushl $237
c01034f4:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034f9:	e9 3e f6 ff ff       	jmp    c0102b3c <__alltraps>

c01034fe <vector238>:
.globl vector238
vector238:
  pushl $0
c01034fe:	6a 00                	push   $0x0
  pushl $238
c0103500:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c0103505:	e9 32 f6 ff ff       	jmp    c0102b3c <__alltraps>

c010350a <vector239>:
.globl vector239
vector239:
  pushl $0
c010350a:	6a 00                	push   $0x0
  pushl $239
c010350c:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c0103511:	e9 26 f6 ff ff       	jmp    c0102b3c <__alltraps>

c0103516 <vector240>:
.globl vector240
vector240:
  pushl $0
c0103516:	6a 00                	push   $0x0
  pushl $240
c0103518:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c010351d:	e9 1a f6 ff ff       	jmp    c0102b3c <__alltraps>

c0103522 <vector241>:
.globl vector241
vector241:
  pushl $0
c0103522:	6a 00                	push   $0x0
  pushl $241
c0103524:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103529:	e9 0e f6 ff ff       	jmp    c0102b3c <__alltraps>

c010352e <vector242>:
.globl vector242
vector242:
  pushl $0
c010352e:	6a 00                	push   $0x0
  pushl $242
c0103530:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103535:	e9 02 f6 ff ff       	jmp    c0102b3c <__alltraps>

c010353a <vector243>:
.globl vector243
vector243:
  pushl $0
c010353a:	6a 00                	push   $0x0
  pushl $243
c010353c:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103541:	e9 f6 f5 ff ff       	jmp    c0102b3c <__alltraps>

c0103546 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103546:	6a 00                	push   $0x0
  pushl $244
c0103548:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c010354d:	e9 ea f5 ff ff       	jmp    c0102b3c <__alltraps>

c0103552 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103552:	6a 00                	push   $0x0
  pushl $245
c0103554:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103559:	e9 de f5 ff ff       	jmp    c0102b3c <__alltraps>

c010355e <vector246>:
.globl vector246
vector246:
  pushl $0
c010355e:	6a 00                	push   $0x0
  pushl $246
c0103560:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103565:	e9 d2 f5 ff ff       	jmp    c0102b3c <__alltraps>

c010356a <vector247>:
.globl vector247
vector247:
  pushl $0
c010356a:	6a 00                	push   $0x0
  pushl $247
c010356c:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103571:	e9 c6 f5 ff ff       	jmp    c0102b3c <__alltraps>

c0103576 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103576:	6a 00                	push   $0x0
  pushl $248
c0103578:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010357d:	e9 ba f5 ff ff       	jmp    c0102b3c <__alltraps>

c0103582 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103582:	6a 00                	push   $0x0
  pushl $249
c0103584:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103589:	e9 ae f5 ff ff       	jmp    c0102b3c <__alltraps>

c010358e <vector250>:
.globl vector250
vector250:
  pushl $0
c010358e:	6a 00                	push   $0x0
  pushl $250
c0103590:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103595:	e9 a2 f5 ff ff       	jmp    c0102b3c <__alltraps>

c010359a <vector251>:
.globl vector251
vector251:
  pushl $0
c010359a:	6a 00                	push   $0x0
  pushl $251
c010359c:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c01035a1:	e9 96 f5 ff ff       	jmp    c0102b3c <__alltraps>

c01035a6 <vector252>:
.globl vector252
vector252:
  pushl $0
c01035a6:	6a 00                	push   $0x0
  pushl $252
c01035a8:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c01035ad:	e9 8a f5 ff ff       	jmp    c0102b3c <__alltraps>

c01035b2 <vector253>:
.globl vector253
vector253:
  pushl $0
c01035b2:	6a 00                	push   $0x0
  pushl $253
c01035b4:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01035b9:	e9 7e f5 ff ff       	jmp    c0102b3c <__alltraps>

c01035be <vector254>:
.globl vector254
vector254:
  pushl $0
c01035be:	6a 00                	push   $0x0
  pushl $254
c01035c0:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01035c5:	e9 72 f5 ff ff       	jmp    c0102b3c <__alltraps>

c01035ca <vector255>:
.globl vector255
vector255:
  pushl $0
c01035ca:	6a 00                	push   $0x0
  pushl $255
c01035cc:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01035d1:	e9 66 f5 ff ff       	jmp    c0102b3c <__alltraps>

c01035d6 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01035d6:	55                   	push   %ebp
c01035d7:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01035d9:	8b 15 a0 cf 1c c0    	mov    0xc01ccfa0,%edx
c01035df:	8b 45 08             	mov    0x8(%ebp),%eax
c01035e2:	29 d0                	sub    %edx,%eax
c01035e4:	c1 f8 05             	sar    $0x5,%eax
}
c01035e7:	5d                   	pop    %ebp
c01035e8:	c3                   	ret    

c01035e9 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01035e9:	55                   	push   %ebp
c01035ea:	89 e5                	mov    %esp,%ebp
c01035ec:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01035ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01035f2:	89 04 24             	mov    %eax,(%esp)
c01035f5:	e8 dc ff ff ff       	call   c01035d6 <page2ppn>
c01035fa:	c1 e0 0c             	shl    $0xc,%eax
}
c01035fd:	89 ec                	mov    %ebp,%esp
c01035ff:	5d                   	pop    %ebp
c0103600:	c3                   	ret    

c0103601 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0103601:	55                   	push   %ebp
c0103602:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0103604:	8b 45 08             	mov    0x8(%ebp),%eax
c0103607:	8b 00                	mov    (%eax),%eax
}
c0103609:	5d                   	pop    %ebp
c010360a:	c3                   	ret    

c010360b <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c010360b:	55                   	push   %ebp
c010360c:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c010360e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103611:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103614:	89 10                	mov    %edx,(%eax)
}
c0103616:	90                   	nop
c0103617:	5d                   	pop    %ebp
c0103618:	c3                   	ret    

c0103619 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0103619:	55                   	push   %ebp
c010361a:	89 e5                	mov    %esp,%ebp
c010361c:	83 ec 10             	sub    $0x10,%esp
c010361f:	c7 45 fc 84 cf 1c c0 	movl   $0xc01ccf84,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103626:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103629:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010362c:	89 50 04             	mov    %edx,0x4(%eax)
c010362f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103632:	8b 50 04             	mov    0x4(%eax),%edx
c0103635:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103638:	89 10                	mov    %edx,(%eax)
}
c010363a:	90                   	nop
    list_init(&free_list);
    nr_free = 0;
c010363b:	c7 05 8c cf 1c c0 00 	movl   $0x0,0xc01ccf8c
c0103642:	00 00 00 
}
c0103645:	90                   	nop
c0103646:	89 ec                	mov    %ebp,%esp
c0103648:	5d                   	pop    %ebp
c0103649:	c3                   	ret    

c010364a <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c010364a:	55                   	push   %ebp
c010364b:	89 e5                	mov    %esp,%ebp
c010364d:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0103650:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103654:	75 24                	jne    c010367a <default_init_memmap+0x30>
c0103656:	c7 44 24 0c b0 e7 10 	movl   $0xc010e7b0,0xc(%esp)
c010365d:	c0 
c010365e:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103665:	c0 
c0103666:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010366d:	00 
c010366e:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103675:	e8 76 d7 ff ff       	call   c0100df0 <__panic>
    struct Page *p = base;
c010367a:	8b 45 08             	mov    0x8(%ebp),%eax
c010367d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0103680:	eb 7d                	jmp    c01036ff <default_init_memmap+0xb5>
        assert(PageReserved(p));
c0103682:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103685:	83 c0 04             	add    $0x4,%eax
c0103688:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010368f:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103692:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103695:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103698:	0f a3 10             	bt     %edx,(%eax)
c010369b:	19 c0                	sbb    %eax,%eax
c010369d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c01036a0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01036a4:	0f 95 c0             	setne  %al
c01036a7:	0f b6 c0             	movzbl %al,%eax
c01036aa:	85 c0                	test   %eax,%eax
c01036ac:	75 24                	jne    c01036d2 <default_init_memmap+0x88>
c01036ae:	c7 44 24 0c e1 e7 10 	movl   $0xc010e7e1,0xc(%esp)
c01036b5:	c0 
c01036b6:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01036bd:	c0 
c01036be:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c01036c5:	00 
c01036c6:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01036cd:	e8 1e d7 ff ff       	call   c0100df0 <__panic>
        p->flags = p->property = 0;
c01036d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036d5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01036dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036df:	8b 50 08             	mov    0x8(%eax),%edx
c01036e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036e5:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c01036e8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036ef:	00 
c01036f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036f3:	89 04 24             	mov    %eax,(%esp)
c01036f6:	e8 10 ff ff ff       	call   c010360b <set_page_ref>
    for (; p != base + n; p ++) {
c01036fb:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c01036ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103702:	c1 e0 05             	shl    $0x5,%eax
c0103705:	89 c2                	mov    %eax,%edx
c0103707:	8b 45 08             	mov    0x8(%ebp),%eax
c010370a:	01 d0                	add    %edx,%eax
c010370c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010370f:	0f 85 6d ff ff ff    	jne    c0103682 <default_init_memmap+0x38>
    }
    base->property = n;
c0103715:	8b 45 08             	mov    0x8(%ebp),%eax
c0103718:	8b 55 0c             	mov    0xc(%ebp),%edx
c010371b:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c010371e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103721:	83 c0 04             	add    $0x4,%eax
c0103724:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010372b:	89 45 cc             	mov    %eax,-0x34(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010372e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103731:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103734:	0f ab 10             	bts    %edx,(%eax)
}
c0103737:	90                   	nop
    nr_free += n;
c0103738:	8b 15 8c cf 1c c0    	mov    0xc01ccf8c,%edx
c010373e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103741:	01 d0                	add    %edx,%eax
c0103743:	a3 8c cf 1c c0       	mov    %eax,0xc01ccf8c
    list_add_before(&free_list, &(base->page_link));
c0103748:	8b 45 08             	mov    0x8(%ebp),%eax
c010374b:	83 c0 0c             	add    $0xc,%eax
c010374e:	c7 45 e4 84 cf 1c c0 	movl   $0xc01ccf84,-0x1c(%ebp)
c0103755:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103758:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010375b:	8b 00                	mov    (%eax),%eax
c010375d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103760:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0103763:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103766:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103769:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010376c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010376f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103772:	89 10                	mov    %edx,(%eax)
c0103774:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103777:	8b 10                	mov    (%eax),%edx
c0103779:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010377c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010377f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103782:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103785:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103788:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010378b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010378e:	89 10                	mov    %edx,(%eax)
}
c0103790:	90                   	nop
}
c0103791:	90                   	nop
    // list_add(&free_list, &(base->page_link));
}
c0103792:	90                   	nop
c0103793:	89 ec                	mov    %ebp,%esp
c0103795:	5d                   	pop    %ebp
c0103796:	c3                   	ret    

c0103797 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0103797:	55                   	push   %ebp
c0103798:	89 e5                	mov    %esp,%ebp
c010379a:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c010379d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01037a1:	75 24                	jne    c01037c7 <default_alloc_pages+0x30>
c01037a3:	c7 44 24 0c b0 e7 10 	movl   $0xc010e7b0,0xc(%esp)
c01037aa:	c0 
c01037ab:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01037b2:	c0 
c01037b3:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01037ba:	00 
c01037bb:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01037c2:	e8 29 d6 ff ff       	call   c0100df0 <__panic>
    if (n > nr_free) {
c01037c7:	a1 8c cf 1c c0       	mov    0xc01ccf8c,%eax
c01037cc:	39 45 08             	cmp    %eax,0x8(%ebp)
c01037cf:	76 0a                	jbe    c01037db <default_alloc_pages+0x44>
        return NULL;
c01037d1:	b8 00 00 00 00       	mov    $0x0,%eax
c01037d6:	e9 3c 01 00 00       	jmp    c0103917 <default_alloc_pages+0x180>
    }
    struct Page *page = NULL;
c01037db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c01037e2:	c7 45 f0 84 cf 1c c0 	movl   $0xc01ccf84,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01037e9:	eb 1c                	jmp    c0103807 <default_alloc_pages+0x70>
        struct Page *p = le2page(le, page_link);
c01037eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037ee:	83 e8 0c             	sub    $0xc,%eax
c01037f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p->property >= n) {
c01037f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037f7:	8b 40 08             	mov    0x8(%eax),%eax
c01037fa:	39 45 08             	cmp    %eax,0x8(%ebp)
c01037fd:	77 08                	ja     c0103807 <default_alloc_pages+0x70>
            page = p;
c01037ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103802:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0103805:	eb 18                	jmp    c010381f <default_alloc_pages+0x88>
c0103807:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010380a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return listelm->next;
c010380d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103810:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != &free_list) {
c0103813:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103816:	81 7d f0 84 cf 1c c0 	cmpl   $0xc01ccf84,-0x10(%ebp)
c010381d:	75 cc                	jne    c01037eb <default_alloc_pages+0x54>
        }
    }
    if (page != NULL) {
c010381f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103823:	0f 84 eb 00 00 00    	je     c0103914 <default_alloc_pages+0x17d>
        if (page->property > n) {
c0103829:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010382c:	8b 40 08             	mov    0x8(%eax),%eax
c010382f:	39 45 08             	cmp    %eax,0x8(%ebp)
c0103832:	0f 83 88 00 00 00    	jae    c01038c0 <default_alloc_pages+0x129>
            struct Page *p = page + n;
c0103838:	8b 45 08             	mov    0x8(%ebp),%eax
c010383b:	c1 e0 05             	shl    $0x5,%eax
c010383e:	89 c2                	mov    %eax,%edx
c0103840:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103843:	01 d0                	add    %edx,%eax
c0103845:	89 45 e8             	mov    %eax,-0x18(%ebp)
            p->property = page->property - n;
c0103848:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010384b:	8b 40 08             	mov    0x8(%eax),%eax
c010384e:	2b 45 08             	sub    0x8(%ebp),%eax
c0103851:	89 c2                	mov    %eax,%edx
c0103853:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103856:	89 50 08             	mov    %edx,0x8(%eax)
            list_add_after(&(page->page_link), &(p->page_link));
c0103859:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010385c:	83 c0 0c             	add    $0xc,%eax
c010385f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103862:	83 c2 0c             	add    $0xc,%edx
c0103865:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0103868:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    __list_add(elm, listelm, listelm->next);
c010386b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010386e:	8b 40 04             	mov    0x4(%eax),%eax
c0103871:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103874:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0103877:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010387a:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010387d:	89 45 c8             	mov    %eax,-0x38(%ebp)
    prev->next = next->prev = elm;
c0103880:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103883:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103886:	89 10                	mov    %edx,(%eax)
c0103888:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010388b:	8b 10                	mov    (%eax),%edx
c010388d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103890:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103893:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103896:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103899:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010389c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010389f:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01038a2:	89 10                	mov    %edx,(%eax)
}
c01038a4:	90                   	nop
}
c01038a5:	90                   	nop
            //---------------------------------
            SetPageProperty(p);
c01038a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01038a9:	83 c0 04             	add    $0x4,%eax
c01038ac:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c01038b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01038b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038b9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01038bc:	0f ab 10             	bts    %edx,(%eax)
}
c01038bf:	90                   	nop
            //---------------------------------
    }
        list_del(&(page->page_link));
c01038c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038c3:	83 c0 0c             	add    $0xc,%eax
c01038c6:	89 45 bc             	mov    %eax,-0x44(%ebp)
    __list_del(listelm->prev, listelm->next);
c01038c9:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01038cc:	8b 40 04             	mov    0x4(%eax),%eax
c01038cf:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01038d2:	8b 12                	mov    (%edx),%edx
c01038d4:	89 55 b8             	mov    %edx,-0x48(%ebp)
c01038d7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01038da:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01038dd:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01038e0:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01038e3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01038e6:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01038e9:	89 10                	mov    %edx,(%eax)
}
c01038eb:	90                   	nop
}
c01038ec:	90                   	nop
        nr_free -= n;
c01038ed:	a1 8c cf 1c c0       	mov    0xc01ccf8c,%eax
c01038f2:	2b 45 08             	sub    0x8(%ebp),%eax
c01038f5:	a3 8c cf 1c c0       	mov    %eax,0xc01ccf8c
        ClearPageProperty(page);
c01038fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038fd:	83 c0 04             	add    $0x4,%eax
c0103900:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0103907:	89 45 c0             	mov    %eax,-0x40(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010390a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010390d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103910:	0f b3 10             	btr    %edx,(%eax)
}
c0103913:	90                   	nop
    }
    return page;
c0103914:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103917:	89 ec                	mov    %ebp,%esp
c0103919:	5d                   	pop    %ebp
c010391a:	c3                   	ret    

c010391b <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c010391b:	55                   	push   %ebp
c010391c:	89 e5                	mov    %esp,%ebp
c010391e:	81 ec 98 00 00 00    	sub    $0x98,%esp
    assert(n > 0);
c0103924:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103928:	75 24                	jne    c010394e <default_free_pages+0x33>
c010392a:	c7 44 24 0c b0 e7 10 	movl   $0xc010e7b0,0xc(%esp)
c0103931:	c0 
c0103932:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103939:	c0 
c010393a:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0103941:	00 
c0103942:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103949:	e8 a2 d4 ff ff       	call   c0100df0 <__panic>
    struct Page *p = base;
c010394e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103951:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p++) {
c0103954:	e9 9d 00 00 00       	jmp    c01039f6 <default_free_pages+0xdb>
        assert(!PageReserved(p) && !PageProperty(p));
c0103959:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010395c:	83 c0 04             	add    $0x4,%eax
c010395f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c0103966:	89 45 e0             	mov    %eax,-0x20(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103969:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010396c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010396f:	0f a3 10             	bt     %edx,(%eax)
c0103972:	19 c0                	sbb    %eax,%eax
c0103974:	89 45 dc             	mov    %eax,-0x24(%ebp)
    return oldbit != 0;
c0103977:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010397b:	0f 95 c0             	setne  %al
c010397e:	0f b6 c0             	movzbl %al,%eax
c0103981:	85 c0                	test   %eax,%eax
c0103983:	75 2c                	jne    c01039b1 <default_free_pages+0x96>
c0103985:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103988:	83 c0 04             	add    $0x4,%eax
c010398b:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
c0103992:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103995:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103998:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010399b:	0f a3 10             	bt     %edx,(%eax)
c010399e:	19 c0                	sbb    %eax,%eax
c01039a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
    return oldbit != 0;
c01039a3:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01039a7:	0f 95 c0             	setne  %al
c01039aa:	0f b6 c0             	movzbl %al,%eax
c01039ad:	85 c0                	test   %eax,%eax
c01039af:	74 24                	je     c01039d5 <default_free_pages+0xba>
c01039b1:	c7 44 24 0c f4 e7 10 	movl   $0xc010e7f4,0xc(%esp)
c01039b8:	c0 
c01039b9:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01039c0:	c0 
c01039c1:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c01039c8:	00 
c01039c9:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01039d0:	e8 1b d4 ff ff       	call   c0100df0 <__panic>
        p->flags = 0;
c01039d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c01039df:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01039e6:	00 
c01039e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039ea:	89 04 24             	mov    %eax,(%esp)
c01039ed:	e8 19 fc ff ff       	call   c010360b <set_page_ref>
    for (; p != base + n; p++) {
c01039f2:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c01039f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039f9:	c1 e0 05             	shl    $0x5,%eax
c01039fc:	89 c2                	mov    %eax,%edx
c01039fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a01:	01 d0                	add    %edx,%eax
c0103a03:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0103a06:	0f 85 4d ff ff ff    	jne    c0103959 <default_free_pages+0x3e>
    }
    base->property = n;
c0103a0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a0f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a12:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0103a15:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a18:	83 c0 04             	add    $0x4,%eax
c0103a1b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0103a22:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a25:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103a28:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103a2b:	0f ab 10             	bts    %edx,(%eax)
}
c0103a2e:	90                   	nop
c0103a2f:	c7 45 cc 84 cf 1c c0 	movl   $0xc01ccf84,-0x34(%ebp)
    return listelm->next;
c0103a36:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103a39:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list), *sp = NULL;
c0103a3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a3f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    bool flag = 0;
c0103a46:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    while (le != &free_list) {
c0103a4d:	e9 39 01 00 00       	jmp    c0103b8b <default_free_pages+0x270>
        // sp = le;
        p = le2page(le, page_link);
c0103a52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a55:	83 e8 0c             	sub    $0xc,%eax
c0103a58:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (base + base->property == p) {
c0103a5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a5e:	8b 40 08             	mov    0x8(%eax),%eax
c0103a61:	c1 e0 05             	shl    $0x5,%eax
c0103a64:	89 c2                	mov    %eax,%edx
c0103a66:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a69:	01 d0                	add    %edx,%eax
c0103a6b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0103a6e:	75 5f                	jne    c0103acf <default_free_pages+0x1b4>
            base->property += p->property;
c0103a70:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a73:	8b 50 08             	mov    0x8(%eax),%edx
c0103a76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a79:	8b 40 08             	mov    0x8(%eax),%eax
c0103a7c:	01 c2                	add    %eax,%edx
c0103a7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a81:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c0103a84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a87:	83 c0 04             	add    $0x4,%eax
c0103a8a:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0103a91:	89 45 b0             	mov    %eax,-0x50(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a94:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0103a97:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0103a9a:	0f b3 10             	btr    %edx,(%eax)
}
c0103a9d:	90                   	nop
            list_del(&(p->page_link));
c0103a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103aa1:	83 c0 0c             	add    $0xc,%eax
c0103aa4:	89 45 c0             	mov    %eax,-0x40(%ebp)
    __list_del(listelm->prev, listelm->next);
c0103aa7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103aaa:	8b 40 04             	mov    0x4(%eax),%eax
c0103aad:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103ab0:	8b 12                	mov    (%edx),%edx
c0103ab2:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0103ab5:	89 45 b8             	mov    %eax,-0x48(%ebp)
    prev->next = next;
c0103ab8:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103abb:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0103abe:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103ac1:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103ac4:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0103ac7:	89 10                	mov    %edx,(%eax)
}
c0103ac9:	90                   	nop
}
c0103aca:	e9 8b 00 00 00       	jmp    c0103b5a <default_free_pages+0x23f>
        } else if (p + p->property == base) {
c0103acf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ad2:	8b 40 08             	mov    0x8(%eax),%eax
c0103ad5:	c1 e0 05             	shl    $0x5,%eax
c0103ad8:	89 c2                	mov    %eax,%edx
c0103ada:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103add:	01 d0                	add    %edx,%eax
c0103adf:	39 45 08             	cmp    %eax,0x8(%ebp)
c0103ae2:	75 76                	jne    c0103b5a <default_free_pages+0x23f>
            p->property += base->property;
c0103ae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ae7:	8b 50 08             	mov    0x8(%eax),%edx
c0103aea:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aed:	8b 40 08             	mov    0x8(%eax),%eax
c0103af0:	01 c2                	add    %eax,%edx
c0103af2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103af5:	89 50 08             	mov    %edx,0x8(%eax)
c0103af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103afb:	89 45 98             	mov    %eax,-0x68(%ebp)
    return listelm->prev;
c0103afe:	8b 45 98             	mov    -0x68(%ebp),%eax
c0103b01:	8b 00                	mov    (%eax),%eax
            sp = list_prev(le);
c0103b03:	89 45 ec             	mov    %eax,-0x14(%ebp)
            flag = 1;
c0103b06:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
            ClearPageProperty(base);
c0103b0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b10:	83 c0 04             	add    $0x4,%eax
c0103b13:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c0103b1a:	89 45 9c             	mov    %eax,-0x64(%ebp)
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103b1d:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0103b20:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0103b23:	0f b3 10             	btr    %edx,(%eax)
}
c0103b26:	90                   	nop
            base = p;
c0103b27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b2a:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c0103b2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b30:	83 c0 0c             	add    $0xc,%eax
c0103b33:	89 45 ac             	mov    %eax,-0x54(%ebp)
    __list_del(listelm->prev, listelm->next);
c0103b36:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0103b39:	8b 40 04             	mov    0x4(%eax),%eax
c0103b3c:	8b 55 ac             	mov    -0x54(%ebp),%edx
c0103b3f:	8b 12                	mov    (%edx),%edx
c0103b41:	89 55 a8             	mov    %edx,-0x58(%ebp)
c0103b44:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    prev->next = next;
c0103b47:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103b4a:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0103b4d:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103b50:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0103b53:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0103b56:	89 10                	mov    %edx,(%eax)
}
c0103b58:	90                   	nop
}
c0103b59:	90                   	nop
        }
        if (p + p->property < base)
c0103b5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b5d:	8b 40 08             	mov    0x8(%eax),%eax
c0103b60:	c1 e0 05             	shl    $0x5,%eax
c0103b63:	89 c2                	mov    %eax,%edx
c0103b65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b68:	01 d0                	add    %edx,%eax
c0103b6a:	39 45 08             	cmp    %eax,0x8(%ebp)
c0103b6d:	76 0d                	jbe    c0103b7c <default_free_pages+0x261>
            sp = le, flag = 1;
c0103b6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b72:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103b75:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c0103b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b7f:	89 45 94             	mov    %eax,-0x6c(%ebp)
    return listelm->next;
c0103b82:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0103b85:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103b88:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0103b8b:	81 7d f0 84 cf 1c c0 	cmpl   $0xc01ccf84,-0x10(%ebp)
c0103b92:	0f 85 ba fe ff ff    	jne    c0103a52 <default_free_pages+0x137>
    }
    nr_free += n;
c0103b98:	8b 15 8c cf 1c c0    	mov    0xc01ccf8c,%edx
c0103b9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103ba1:	01 d0                	add    %edx,%eax
c0103ba3:	a3 8c cf 1c c0       	mov    %eax,0xc01ccf8c
    //cprintf("%x %x\n", sp, &free_list);
    list_add((flag ? sp : &free_list), &(base->page_link));
c0103ba8:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bab:	8d 50 0c             	lea    0xc(%eax),%edx
c0103bae:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103bb2:	74 05                	je     c0103bb9 <default_free_pages+0x29e>
c0103bb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bb7:	eb 05                	jmp    c0103bbe <default_free_pages+0x2a3>
c0103bb9:	b8 84 cf 1c c0       	mov    $0xc01ccf84,%eax
c0103bbe:	89 45 90             	mov    %eax,-0x70(%ebp)
c0103bc1:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0103bc4:	8b 45 90             	mov    -0x70(%ebp),%eax
c0103bc7:	89 45 88             	mov    %eax,-0x78(%ebp)
c0103bca:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103bcd:	89 45 84             	mov    %eax,-0x7c(%ebp)
    __list_add(elm, listelm, listelm->next);
c0103bd0:	8b 45 88             	mov    -0x78(%ebp),%eax
c0103bd3:	8b 40 04             	mov    0x4(%eax),%eax
c0103bd6:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0103bd9:	89 55 80             	mov    %edx,-0x80(%ebp)
c0103bdc:	8b 55 88             	mov    -0x78(%ebp),%edx
c0103bdf:	89 95 7c ff ff ff    	mov    %edx,-0x84(%ebp)
c0103be5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
    prev->next = next->prev = elm;
c0103beb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0103bf1:	8b 55 80             	mov    -0x80(%ebp),%edx
c0103bf4:	89 10                	mov    %edx,(%eax)
c0103bf6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0103bfc:	8b 10                	mov    (%eax),%edx
c0103bfe:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0103c04:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103c07:	8b 45 80             	mov    -0x80(%ebp),%eax
c0103c0a:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
c0103c10:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103c13:	8b 45 80             	mov    -0x80(%ebp),%eax
c0103c16:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
c0103c1c:	89 10                	mov    %edx,(%eax)
}
c0103c1e:	90                   	nop
}
c0103c1f:	90                   	nop
}
c0103c20:	90                   	nop
}
c0103c21:	90                   	nop
c0103c22:	89 ec                	mov    %ebp,%esp
c0103c24:	5d                   	pop    %ebp
c0103c25:	c3                   	ret    

c0103c26 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103c26:	55                   	push   %ebp
c0103c27:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103c29:	a1 8c cf 1c c0       	mov    0xc01ccf8c,%eax
}
c0103c2e:	5d                   	pop    %ebp
c0103c2f:	c3                   	ret    

c0103c30 <basic_check>:

static void
basic_check(void) {
c0103c30:	55                   	push   %ebp
c0103c31:	89 e5                	mov    %esp,%ebp
c0103c33:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103c36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103c3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c40:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103c43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c46:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103c49:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c50:	e8 17 16 00 00       	call   c010526c <alloc_pages>
c0103c55:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103c58:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103c5c:	75 24                	jne    c0103c82 <basic_check+0x52>
c0103c5e:	c7 44 24 0c 19 e8 10 	movl   $0xc010e819,0xc(%esp)
c0103c65:	c0 
c0103c66:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103c6d:	c0 
c0103c6e:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0103c75:	00 
c0103c76:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103c7d:	e8 6e d1 ff ff       	call   c0100df0 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103c82:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103c89:	e8 de 15 00 00       	call   c010526c <alloc_pages>
c0103c8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103c91:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103c95:	75 24                	jne    c0103cbb <basic_check+0x8b>
c0103c97:	c7 44 24 0c 35 e8 10 	movl   $0xc010e835,0xc(%esp)
c0103c9e:	c0 
c0103c9f:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103ca6:	c0 
c0103ca7:	c7 44 24 04 c9 00 00 	movl   $0xc9,0x4(%esp)
c0103cae:	00 
c0103caf:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103cb6:	e8 35 d1 ff ff       	call   c0100df0 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103cbb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103cc2:	e8 a5 15 00 00       	call   c010526c <alloc_pages>
c0103cc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103cca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103cce:	75 24                	jne    c0103cf4 <basic_check+0xc4>
c0103cd0:	c7 44 24 0c 51 e8 10 	movl   $0xc010e851,0xc(%esp)
c0103cd7:	c0 
c0103cd8:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103cdf:	c0 
c0103ce0:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103ce7:	00 
c0103ce8:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103cef:	e8 fc d0 ff ff       	call   c0100df0 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103cf4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103cf7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103cfa:	74 10                	je     c0103d0c <basic_check+0xdc>
c0103cfc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103cff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103d02:	74 08                	je     c0103d0c <basic_check+0xdc>
c0103d04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d07:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103d0a:	75 24                	jne    c0103d30 <basic_check+0x100>
c0103d0c:	c7 44 24 0c 70 e8 10 	movl   $0xc010e870,0xc(%esp)
c0103d13:	c0 
c0103d14:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103d1b:	c0 
c0103d1c:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c0103d23:	00 
c0103d24:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103d2b:	e8 c0 d0 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103d30:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d33:	89 04 24             	mov    %eax,(%esp)
c0103d36:	e8 c6 f8 ff ff       	call   c0103601 <page_ref>
c0103d3b:	85 c0                	test   %eax,%eax
c0103d3d:	75 1e                	jne    c0103d5d <basic_check+0x12d>
c0103d3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d42:	89 04 24             	mov    %eax,(%esp)
c0103d45:	e8 b7 f8 ff ff       	call   c0103601 <page_ref>
c0103d4a:	85 c0                	test   %eax,%eax
c0103d4c:	75 0f                	jne    c0103d5d <basic_check+0x12d>
c0103d4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d51:	89 04 24             	mov    %eax,(%esp)
c0103d54:	e8 a8 f8 ff ff       	call   c0103601 <page_ref>
c0103d59:	85 c0                	test   %eax,%eax
c0103d5b:	74 24                	je     c0103d81 <basic_check+0x151>
c0103d5d:	c7 44 24 0c 94 e8 10 	movl   $0xc010e894,0xc(%esp)
c0103d64:	c0 
c0103d65:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103d6c:	c0 
c0103d6d:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103d74:	00 
c0103d75:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103d7c:	e8 6f d0 ff ff       	call   c0100df0 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103d81:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d84:	89 04 24             	mov    %eax,(%esp)
c0103d87:	e8 5d f8 ff ff       	call   c01035e9 <page2pa>
c0103d8c:	8b 15 a4 cf 1c c0    	mov    0xc01ccfa4,%edx
c0103d92:	c1 e2 0c             	shl    $0xc,%edx
c0103d95:	39 d0                	cmp    %edx,%eax
c0103d97:	72 24                	jb     c0103dbd <basic_check+0x18d>
c0103d99:	c7 44 24 0c d0 e8 10 	movl   $0xc010e8d0,0xc(%esp)
c0103da0:	c0 
c0103da1:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103da8:	c0 
c0103da9:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
c0103db0:	00 
c0103db1:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103db8:	e8 33 d0 ff ff       	call   c0100df0 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103dbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103dc0:	89 04 24             	mov    %eax,(%esp)
c0103dc3:	e8 21 f8 ff ff       	call   c01035e9 <page2pa>
c0103dc8:	8b 15 a4 cf 1c c0    	mov    0xc01ccfa4,%edx
c0103dce:	c1 e2 0c             	shl    $0xc,%edx
c0103dd1:	39 d0                	cmp    %edx,%eax
c0103dd3:	72 24                	jb     c0103df9 <basic_check+0x1c9>
c0103dd5:	c7 44 24 0c ed e8 10 	movl   $0xc010e8ed,0xc(%esp)
c0103ddc:	c0 
c0103ddd:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103de4:	c0 
c0103de5:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103dec:	00 
c0103ded:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103df4:	e8 f7 cf ff ff       	call   c0100df0 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103df9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103dfc:	89 04 24             	mov    %eax,(%esp)
c0103dff:	e8 e5 f7 ff ff       	call   c01035e9 <page2pa>
c0103e04:	8b 15 a4 cf 1c c0    	mov    0xc01ccfa4,%edx
c0103e0a:	c1 e2 0c             	shl    $0xc,%edx
c0103e0d:	39 d0                	cmp    %edx,%eax
c0103e0f:	72 24                	jb     c0103e35 <basic_check+0x205>
c0103e11:	c7 44 24 0c 0a e9 10 	movl   $0xc010e90a,0xc(%esp)
c0103e18:	c0 
c0103e19:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103e20:	c0 
c0103e21:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103e28:	00 
c0103e29:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103e30:	e8 bb cf ff ff       	call   c0100df0 <__panic>

    list_entry_t free_list_store = free_list;
c0103e35:	a1 84 cf 1c c0       	mov    0xc01ccf84,%eax
c0103e3a:	8b 15 88 cf 1c c0    	mov    0xc01ccf88,%edx
c0103e40:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103e43:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103e46:	c7 45 dc 84 cf 1c c0 	movl   $0xc01ccf84,-0x24(%ebp)
    elm->prev = elm->next = elm;
c0103e4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103e50:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103e53:	89 50 04             	mov    %edx,0x4(%eax)
c0103e56:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103e59:	8b 50 04             	mov    0x4(%eax),%edx
c0103e5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103e5f:	89 10                	mov    %edx,(%eax)
}
c0103e61:	90                   	nop
c0103e62:	c7 45 e0 84 cf 1c c0 	movl   $0xc01ccf84,-0x20(%ebp)
    return list->next == list;
c0103e69:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103e6c:	8b 40 04             	mov    0x4(%eax),%eax
c0103e6f:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0103e72:	0f 94 c0             	sete   %al
c0103e75:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103e78:	85 c0                	test   %eax,%eax
c0103e7a:	75 24                	jne    c0103ea0 <basic_check+0x270>
c0103e7c:	c7 44 24 0c 27 e9 10 	movl   $0xc010e927,0xc(%esp)
c0103e83:	c0 
c0103e84:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103e8b:	c0 
c0103e8c:	c7 44 24 04 d5 00 00 	movl   $0xd5,0x4(%esp)
c0103e93:	00 
c0103e94:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103e9b:	e8 50 cf ff ff       	call   c0100df0 <__panic>

    unsigned int nr_free_store = nr_free;
c0103ea0:	a1 8c cf 1c c0       	mov    0xc01ccf8c,%eax
c0103ea5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103ea8:	c7 05 8c cf 1c c0 00 	movl   $0x0,0xc01ccf8c
c0103eaf:	00 00 00 

    assert(alloc_page() == NULL);
c0103eb2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103eb9:	e8 ae 13 00 00       	call   c010526c <alloc_pages>
c0103ebe:	85 c0                	test   %eax,%eax
c0103ec0:	74 24                	je     c0103ee6 <basic_check+0x2b6>
c0103ec2:	c7 44 24 0c 3e e9 10 	movl   $0xc010e93e,0xc(%esp)
c0103ec9:	c0 
c0103eca:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103ed1:	c0 
c0103ed2:	c7 44 24 04 da 00 00 	movl   $0xda,0x4(%esp)
c0103ed9:	00 
c0103eda:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103ee1:	e8 0a cf ff ff       	call   c0100df0 <__panic>

    free_page(p0);
c0103ee6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103eed:	00 
c0103eee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ef1:	89 04 24             	mov    %eax,(%esp)
c0103ef4:	e8 e0 13 00 00       	call   c01052d9 <free_pages>
    free_page(p1);
c0103ef9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f00:	00 
c0103f01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f04:	89 04 24             	mov    %eax,(%esp)
c0103f07:	e8 cd 13 00 00       	call   c01052d9 <free_pages>
    free_page(p2);
c0103f0c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f13:	00 
c0103f14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f17:	89 04 24             	mov    %eax,(%esp)
c0103f1a:	e8 ba 13 00 00       	call   c01052d9 <free_pages>
    assert(nr_free == 3);
c0103f1f:	a1 8c cf 1c c0       	mov    0xc01ccf8c,%eax
c0103f24:	83 f8 03             	cmp    $0x3,%eax
c0103f27:	74 24                	je     c0103f4d <basic_check+0x31d>
c0103f29:	c7 44 24 0c 53 e9 10 	movl   $0xc010e953,0xc(%esp)
c0103f30:	c0 
c0103f31:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103f38:	c0 
c0103f39:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
c0103f40:	00 
c0103f41:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103f48:	e8 a3 ce ff ff       	call   c0100df0 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103f4d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f54:	e8 13 13 00 00       	call   c010526c <alloc_pages>
c0103f59:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103f5c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103f60:	75 24                	jne    c0103f86 <basic_check+0x356>
c0103f62:	c7 44 24 0c 19 e8 10 	movl   $0xc010e819,0xc(%esp)
c0103f69:	c0 
c0103f6a:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103f71:	c0 
c0103f72:	c7 44 24 04 e1 00 00 	movl   $0xe1,0x4(%esp)
c0103f79:	00 
c0103f7a:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103f81:	e8 6a ce ff ff       	call   c0100df0 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103f86:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f8d:	e8 da 12 00 00       	call   c010526c <alloc_pages>
c0103f92:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103f95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103f99:	75 24                	jne    c0103fbf <basic_check+0x38f>
c0103f9b:	c7 44 24 0c 35 e8 10 	movl   $0xc010e835,0xc(%esp)
c0103fa2:	c0 
c0103fa3:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103faa:	c0 
c0103fab:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
c0103fb2:	00 
c0103fb3:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103fba:	e8 31 ce ff ff       	call   c0100df0 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103fbf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fc6:	e8 a1 12 00 00       	call   c010526c <alloc_pages>
c0103fcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103fce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103fd2:	75 24                	jne    c0103ff8 <basic_check+0x3c8>
c0103fd4:	c7 44 24 0c 51 e8 10 	movl   $0xc010e851,0xc(%esp)
c0103fdb:	c0 
c0103fdc:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0103fe3:	c0 
c0103fe4:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
c0103feb:	00 
c0103fec:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0103ff3:	e8 f8 cd ff ff       	call   c0100df0 <__panic>

    assert(alloc_page() == NULL);
c0103ff8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fff:	e8 68 12 00 00       	call   c010526c <alloc_pages>
c0104004:	85 c0                	test   %eax,%eax
c0104006:	74 24                	je     c010402c <basic_check+0x3fc>
c0104008:	c7 44 24 0c 3e e9 10 	movl   $0xc010e93e,0xc(%esp)
c010400f:	c0 
c0104010:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0104017:	c0 
c0104018:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
c010401f:	00 
c0104020:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0104027:	e8 c4 cd ff ff       	call   c0100df0 <__panic>

    free_page(p0);
c010402c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104033:	00 
c0104034:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104037:	89 04 24             	mov    %eax,(%esp)
c010403a:	e8 9a 12 00 00       	call   c01052d9 <free_pages>
c010403f:	c7 45 d8 84 cf 1c c0 	movl   $0xc01ccf84,-0x28(%ebp)
c0104046:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104049:	8b 40 04             	mov    0x4(%eax),%eax
c010404c:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c010404f:	0f 94 c0             	sete   %al
c0104052:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0104055:	85 c0                	test   %eax,%eax
c0104057:	74 24                	je     c010407d <basic_check+0x44d>
c0104059:	c7 44 24 0c 60 e9 10 	movl   $0xc010e960,0xc(%esp)
c0104060:	c0 
c0104061:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0104068:	c0 
c0104069:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
c0104070:	00 
c0104071:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0104078:	e8 73 cd ff ff       	call   c0100df0 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c010407d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104084:	e8 e3 11 00 00       	call   c010526c <alloc_pages>
c0104089:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010408c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010408f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104092:	74 24                	je     c01040b8 <basic_check+0x488>
c0104094:	c7 44 24 0c 78 e9 10 	movl   $0xc010e978,0xc(%esp)
c010409b:	c0 
c010409c:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01040a3:	c0 
c01040a4:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
c01040ab:	00 
c01040ac:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01040b3:	e8 38 cd ff ff       	call   c0100df0 <__panic>
    assert(alloc_page() == NULL);
c01040b8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01040bf:	e8 a8 11 00 00       	call   c010526c <alloc_pages>
c01040c4:	85 c0                	test   %eax,%eax
c01040c6:	74 24                	je     c01040ec <basic_check+0x4bc>
c01040c8:	c7 44 24 0c 3e e9 10 	movl   $0xc010e93e,0xc(%esp)
c01040cf:	c0 
c01040d0:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01040d7:	c0 
c01040d8:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c01040df:	00 
c01040e0:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01040e7:	e8 04 cd ff ff       	call   c0100df0 <__panic>

    assert(nr_free == 0);
c01040ec:	a1 8c cf 1c c0       	mov    0xc01ccf8c,%eax
c01040f1:	85 c0                	test   %eax,%eax
c01040f3:	74 24                	je     c0104119 <basic_check+0x4e9>
c01040f5:	c7 44 24 0c 91 e9 10 	movl   $0xc010e991,0xc(%esp)
c01040fc:	c0 
c01040fd:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0104104:	c0 
c0104105:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
c010410c:	00 
c010410d:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0104114:	e8 d7 cc ff ff       	call   c0100df0 <__panic>
    free_list = free_list_store;
c0104119:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010411c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010411f:	a3 84 cf 1c c0       	mov    %eax,0xc01ccf84
c0104124:	89 15 88 cf 1c c0    	mov    %edx,0xc01ccf88
    nr_free = nr_free_store;
c010412a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010412d:	a3 8c cf 1c c0       	mov    %eax,0xc01ccf8c

    free_page(p);
c0104132:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104139:	00 
c010413a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010413d:	89 04 24             	mov    %eax,(%esp)
c0104140:	e8 94 11 00 00       	call   c01052d9 <free_pages>
    free_page(p1);
c0104145:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010414c:	00 
c010414d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104150:	89 04 24             	mov    %eax,(%esp)
c0104153:	e8 81 11 00 00       	call   c01052d9 <free_pages>
    free_page(p2);
c0104158:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010415f:	00 
c0104160:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104163:	89 04 24             	mov    %eax,(%esp)
c0104166:	e8 6e 11 00 00       	call   c01052d9 <free_pages>
}
c010416b:	90                   	nop
c010416c:	89 ec                	mov    %ebp,%esp
c010416e:	5d                   	pop    %ebp
c010416f:	c3                   	ret    

c0104170 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0104170:	55                   	push   %ebp
c0104171:	89 e5                	mov    %esp,%ebp
c0104173:	81 ec 98 00 00 00    	sub    $0x98,%esp
    int count = 0, total = 0;
c0104179:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104180:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0104187:	c7 45 ec 84 cf 1c c0 	movl   $0xc01ccf84,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010418e:	eb 6a                	jmp    c01041fa <default_check+0x8a>
        struct Page *p = le2page(le, page_link);
c0104190:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104193:	83 e8 0c             	sub    $0xc,%eax
c0104196:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(PageProperty(p));
c0104199:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010419c:	83 c0 04             	add    $0x4,%eax
c010419f:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c01041a6:	89 45 cc             	mov    %eax,-0x34(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01041a9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01041ac:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01041af:	0f a3 10             	bt     %edx,(%eax)
c01041b2:	19 c0                	sbb    %eax,%eax
c01041b4:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c01041b7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01041bb:	0f 95 c0             	setne  %al
c01041be:	0f b6 c0             	movzbl %al,%eax
c01041c1:	85 c0                	test   %eax,%eax
c01041c3:	75 24                	jne    c01041e9 <default_check+0x79>
c01041c5:	c7 44 24 0c 9e e9 10 	movl   $0xc010e99e,0xc(%esp)
c01041cc:	c0 
c01041cd:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01041d4:	c0 
c01041d5:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
c01041dc:	00 
c01041dd:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01041e4:	e8 07 cc ff ff       	call   c0100df0 <__panic>
        count ++, total += p->property;
c01041e9:	ff 45 f4             	incl   -0xc(%ebp)
c01041ec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01041ef:	8b 50 08             	mov    0x8(%eax),%edx
c01041f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01041f5:	01 d0                	add    %edx,%eax
c01041f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01041fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01041fd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    return listelm->next;
c0104200:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104203:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != &free_list) {
c0104206:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104209:	81 7d ec 84 cf 1c c0 	cmpl   $0xc01ccf84,-0x14(%ebp)
c0104210:	0f 85 7a ff ff ff    	jne    c0104190 <default_check+0x20>
    }
    assert(total == nr_free_pages());
c0104216:	e8 f3 10 00 00       	call   c010530e <nr_free_pages>
c010421b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010421e:	39 d0                	cmp    %edx,%eax
c0104220:	74 24                	je     c0104246 <default_check+0xd6>
c0104222:	c7 44 24 0c ae e9 10 	movl   $0xc010e9ae,0xc(%esp)
c0104229:	c0 
c010422a:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0104231:	c0 
c0104232:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c0104239:	00 
c010423a:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0104241:	e8 aa cb ff ff       	call   c0100df0 <__panic>

    basic_check();
c0104246:	e8 e5 f9 ff ff       	call   c0103c30 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c010424b:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104252:	e8 15 10 00 00       	call   c010526c <alloc_pages>
c0104257:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(p0 != NULL);
c010425a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010425e:	75 24                	jne    c0104284 <default_check+0x114>
c0104260:	c7 44 24 0c c7 e9 10 	movl   $0xc010e9c7,0xc(%esp)
c0104267:	c0 
c0104268:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c010426f:	c0 
c0104270:	c7 44 24 04 07 01 00 	movl   $0x107,0x4(%esp)
c0104277:	00 
c0104278:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c010427f:	e8 6c cb ff ff       	call   c0100df0 <__panic>
    assert(!PageProperty(p0));
c0104284:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104287:	83 c0 04             	add    $0x4,%eax
c010428a:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104291:	89 45 bc             	mov    %eax,-0x44(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104294:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104297:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010429a:	0f a3 10             	bt     %edx,(%eax)
c010429d:	19 c0                	sbb    %eax,%eax
c010429f:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c01042a2:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01042a6:	0f 95 c0             	setne  %al
c01042a9:	0f b6 c0             	movzbl %al,%eax
c01042ac:	85 c0                	test   %eax,%eax
c01042ae:	74 24                	je     c01042d4 <default_check+0x164>
c01042b0:	c7 44 24 0c d2 e9 10 	movl   $0xc010e9d2,0xc(%esp)
c01042b7:	c0 
c01042b8:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01042bf:	c0 
c01042c0:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c01042c7:	00 
c01042c8:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01042cf:	e8 1c cb ff ff       	call   c0100df0 <__panic>

    list_entry_t free_list_store = free_list;
c01042d4:	a1 84 cf 1c c0       	mov    0xc01ccf84,%eax
c01042d9:	8b 15 88 cf 1c c0    	mov    0xc01ccf88,%edx
c01042df:	89 45 80             	mov    %eax,-0x80(%ebp)
c01042e2:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01042e5:	c7 45 b0 84 cf 1c c0 	movl   $0xc01ccf84,-0x50(%ebp)
    elm->prev = elm->next = elm;
c01042ec:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01042ef:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01042f2:	89 50 04             	mov    %edx,0x4(%eax)
c01042f5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01042f8:	8b 50 04             	mov    0x4(%eax),%edx
c01042fb:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01042fe:	89 10                	mov    %edx,(%eax)
}
c0104300:	90                   	nop
c0104301:	c7 45 b4 84 cf 1c c0 	movl   $0xc01ccf84,-0x4c(%ebp)
    return list->next == list;
c0104308:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010430b:	8b 40 04             	mov    0x4(%eax),%eax
c010430e:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
c0104311:	0f 94 c0             	sete   %al
c0104314:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0104317:	85 c0                	test   %eax,%eax
c0104319:	75 24                	jne    c010433f <default_check+0x1cf>
c010431b:	c7 44 24 0c 27 e9 10 	movl   $0xc010e927,0xc(%esp)
c0104322:	c0 
c0104323:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c010432a:	c0 
c010432b:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0104332:	00 
c0104333:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c010433a:	e8 b1 ca ff ff       	call   c0100df0 <__panic>
    assert(alloc_page() == NULL);
c010433f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104346:	e8 21 0f 00 00       	call   c010526c <alloc_pages>
c010434b:	85 c0                	test   %eax,%eax
c010434d:	74 24                	je     c0104373 <default_check+0x203>
c010434f:	c7 44 24 0c 3e e9 10 	movl   $0xc010e93e,0xc(%esp)
c0104356:	c0 
c0104357:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c010435e:	c0 
c010435f:	c7 44 24 04 0d 01 00 	movl   $0x10d,0x4(%esp)
c0104366:	00 
c0104367:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c010436e:	e8 7d ca ff ff       	call   c0100df0 <__panic>

    unsigned int nr_free_store = nr_free;
c0104373:	a1 8c cf 1c c0       	mov    0xc01ccf8c,%eax
c0104378:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    nr_free = 0;
c010437b:	c7 05 8c cf 1c c0 00 	movl   $0x0,0xc01ccf8c
c0104382:	00 00 00 

    free_pages(p0 + 2, 3);
c0104385:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104388:	83 c0 40             	add    $0x40,%eax
c010438b:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104392:	00 
c0104393:	89 04 24             	mov    %eax,(%esp)
c0104396:	e8 3e 0f 00 00       	call   c01052d9 <free_pages>
    assert(alloc_pages(4) == NULL);
c010439b:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c01043a2:	e8 c5 0e 00 00       	call   c010526c <alloc_pages>
c01043a7:	85 c0                	test   %eax,%eax
c01043a9:	74 24                	je     c01043cf <default_check+0x25f>
c01043ab:	c7 44 24 0c e4 e9 10 	movl   $0xc010e9e4,0xc(%esp)
c01043b2:	c0 
c01043b3:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01043ba:	c0 
c01043bb:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c01043c2:	00 
c01043c3:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01043ca:	e8 21 ca ff ff       	call   c0100df0 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01043cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01043d2:	83 c0 40             	add    $0x40,%eax
c01043d5:	83 c0 04             	add    $0x4,%eax
c01043d8:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01043df:	89 45 a8             	mov    %eax,-0x58(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01043e2:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01043e5:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01043e8:	0f a3 10             	bt     %edx,(%eax)
c01043eb:	19 c0                	sbb    %eax,%eax
c01043ed:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01043f0:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01043f4:	0f 95 c0             	setne  %al
c01043f7:	0f b6 c0             	movzbl %al,%eax
c01043fa:	85 c0                	test   %eax,%eax
c01043fc:	74 0e                	je     c010440c <default_check+0x29c>
c01043fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104401:	83 c0 40             	add    $0x40,%eax
c0104404:	8b 40 08             	mov    0x8(%eax),%eax
c0104407:	83 f8 03             	cmp    $0x3,%eax
c010440a:	74 24                	je     c0104430 <default_check+0x2c0>
c010440c:	c7 44 24 0c fc e9 10 	movl   $0xc010e9fc,0xc(%esp)
c0104413:	c0 
c0104414:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c010441b:	c0 
c010441c:	c7 44 24 04 14 01 00 	movl   $0x114,0x4(%esp)
c0104423:	00 
c0104424:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c010442b:	e8 c0 c9 ff ff       	call   c0100df0 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0104430:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0104437:	e8 30 0e 00 00       	call   c010526c <alloc_pages>
c010443c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010443f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0104443:	75 24                	jne    c0104469 <default_check+0x2f9>
c0104445:	c7 44 24 0c 28 ea 10 	movl   $0xc010ea28,0xc(%esp)
c010444c:	c0 
c010444d:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0104454:	c0 
c0104455:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c010445c:	00 
c010445d:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0104464:	e8 87 c9 ff ff       	call   c0100df0 <__panic>
    assert(alloc_page() == NULL);
c0104469:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104470:	e8 f7 0d 00 00       	call   c010526c <alloc_pages>
c0104475:	85 c0                	test   %eax,%eax
c0104477:	74 24                	je     c010449d <default_check+0x32d>
c0104479:	c7 44 24 0c 3e e9 10 	movl   $0xc010e93e,0xc(%esp)
c0104480:	c0 
c0104481:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0104488:	c0 
c0104489:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c0104490:	00 
c0104491:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0104498:	e8 53 c9 ff ff       	call   c0100df0 <__panic>
    assert(p0 + 2 == p1);
c010449d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01044a0:	83 c0 40             	add    $0x40,%eax
c01044a3:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c01044a6:	74 24                	je     c01044cc <default_check+0x35c>
c01044a8:	c7 44 24 0c 46 ea 10 	movl   $0xc010ea46,0xc(%esp)
c01044af:	c0 
c01044b0:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01044b7:	c0 
c01044b8:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
c01044bf:	00 
c01044c0:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01044c7:	e8 24 c9 ff ff       	call   c0100df0 <__panic>

    p2 = p0 + 1;
c01044cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01044cf:	83 c0 20             	add    $0x20,%eax
c01044d2:	89 45 dc             	mov    %eax,-0x24(%ebp)
    free_page(p0);
c01044d5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044dc:	00 
c01044dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01044e0:	89 04 24             	mov    %eax,(%esp)
c01044e3:	e8 f1 0d 00 00       	call   c01052d9 <free_pages>
    free_pages(p1, 3);
c01044e8:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01044ef:	00 
c01044f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01044f3:	89 04 24             	mov    %eax,(%esp)
c01044f6:	e8 de 0d 00 00       	call   c01052d9 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01044fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01044fe:	83 c0 04             	add    $0x4,%eax
c0104501:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c0104508:	89 45 9c             	mov    %eax,-0x64(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010450b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010450e:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0104511:	0f a3 10             	bt     %edx,(%eax)
c0104514:	19 c0                	sbb    %eax,%eax
c0104516:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0104519:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c010451d:	0f 95 c0             	setne  %al
c0104520:	0f b6 c0             	movzbl %al,%eax
c0104523:	85 c0                	test   %eax,%eax
c0104525:	74 0b                	je     c0104532 <default_check+0x3c2>
c0104527:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010452a:	8b 40 08             	mov    0x8(%eax),%eax
c010452d:	83 f8 01             	cmp    $0x1,%eax
c0104530:	74 24                	je     c0104556 <default_check+0x3e6>
c0104532:	c7 44 24 0c 54 ea 10 	movl   $0xc010ea54,0xc(%esp)
c0104539:	c0 
c010453a:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c0104541:	c0 
c0104542:	c7 44 24 04 1c 01 00 	movl   $0x11c,0x4(%esp)
c0104549:	00 
c010454a:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c0104551:	e8 9a c8 ff ff       	call   c0100df0 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0104556:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104559:	83 c0 04             	add    $0x4,%eax
c010455c:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0104563:	89 45 90             	mov    %eax,-0x70(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104566:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104569:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010456c:	0f a3 10             	bt     %edx,(%eax)
c010456f:	19 c0                	sbb    %eax,%eax
c0104571:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c0104574:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0104578:	0f 95 c0             	setne  %al
c010457b:	0f b6 c0             	movzbl %al,%eax
c010457e:	85 c0                	test   %eax,%eax
c0104580:	74 0b                	je     c010458d <default_check+0x41d>
c0104582:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104585:	8b 40 08             	mov    0x8(%eax),%eax
c0104588:	83 f8 03             	cmp    $0x3,%eax
c010458b:	74 24                	je     c01045b1 <default_check+0x441>
c010458d:	c7 44 24 0c 7c ea 10 	movl   $0xc010ea7c,0xc(%esp)
c0104594:	c0 
c0104595:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c010459c:	c0 
c010459d:	c7 44 24 04 1d 01 00 	movl   $0x11d,0x4(%esp)
c01045a4:	00 
c01045a5:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01045ac:	e8 3f c8 ff ff       	call   c0100df0 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01045b1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01045b8:	e8 af 0c 00 00       	call   c010526c <alloc_pages>
c01045bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01045c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01045c3:	83 e8 20             	sub    $0x20,%eax
c01045c6:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01045c9:	74 24                	je     c01045ef <default_check+0x47f>
c01045cb:	c7 44 24 0c a2 ea 10 	movl   $0xc010eaa2,0xc(%esp)
c01045d2:	c0 
c01045d3:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01045da:	c0 
c01045db:	c7 44 24 04 1f 01 00 	movl   $0x11f,0x4(%esp)
c01045e2:	00 
c01045e3:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01045ea:	e8 01 c8 ff ff       	call   c0100df0 <__panic>
    free_page(p0);
c01045ef:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01045f6:	00 
c01045f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01045fa:	89 04 24             	mov    %eax,(%esp)
c01045fd:	e8 d7 0c 00 00       	call   c01052d9 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0104602:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0104609:	e8 5e 0c 00 00       	call   c010526c <alloc_pages>
c010460e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104611:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104614:	83 c0 20             	add    $0x20,%eax
c0104617:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010461a:	74 24                	je     c0104640 <default_check+0x4d0>
c010461c:	c7 44 24 0c c0 ea 10 	movl   $0xc010eac0,0xc(%esp)
c0104623:	c0 
c0104624:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c010462b:	c0 
c010462c:	c7 44 24 04 21 01 00 	movl   $0x121,0x4(%esp)
c0104633:	00 
c0104634:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c010463b:	e8 b0 c7 ff ff       	call   c0100df0 <__panic>

    free_pages(p0, 2);
c0104640:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0104647:	00 
c0104648:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010464b:	89 04 24             	mov    %eax,(%esp)
c010464e:	e8 86 0c 00 00       	call   c01052d9 <free_pages>
    free_page(p2);
c0104653:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010465a:	00 
c010465b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010465e:	89 04 24             	mov    %eax,(%esp)
c0104661:	e8 73 0c 00 00       	call   c01052d9 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0104666:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010466d:	e8 fa 0b 00 00       	call   c010526c <alloc_pages>
c0104672:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104675:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104679:	75 24                	jne    c010469f <default_check+0x52f>
c010467b:	c7 44 24 0c e0 ea 10 	movl   $0xc010eae0,0xc(%esp)
c0104682:	c0 
c0104683:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c010468a:	c0 
c010468b:	c7 44 24 04 26 01 00 	movl   $0x126,0x4(%esp)
c0104692:	00 
c0104693:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c010469a:	e8 51 c7 ff ff       	call   c0100df0 <__panic>
    assert(alloc_page() == NULL);
c010469f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01046a6:	e8 c1 0b 00 00       	call   c010526c <alloc_pages>
c01046ab:	85 c0                	test   %eax,%eax
c01046ad:	74 24                	je     c01046d3 <default_check+0x563>
c01046af:	c7 44 24 0c 3e e9 10 	movl   $0xc010e93e,0xc(%esp)
c01046b6:	c0 
c01046b7:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01046be:	c0 
c01046bf:	c7 44 24 04 27 01 00 	movl   $0x127,0x4(%esp)
c01046c6:	00 
c01046c7:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01046ce:	e8 1d c7 ff ff       	call   c0100df0 <__panic>

    assert(nr_free == 0);
c01046d3:	a1 8c cf 1c c0       	mov    0xc01ccf8c,%eax
c01046d8:	85 c0                	test   %eax,%eax
c01046da:	74 24                	je     c0104700 <default_check+0x590>
c01046dc:	c7 44 24 0c 91 e9 10 	movl   $0xc010e991,0xc(%esp)
c01046e3:	c0 
c01046e4:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01046eb:	c0 
c01046ec:	c7 44 24 04 29 01 00 	movl   $0x129,0x4(%esp)
c01046f3:	00 
c01046f4:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01046fb:	e8 f0 c6 ff ff       	call   c0100df0 <__panic>
    nr_free = nr_free_store;
c0104700:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104703:	a3 8c cf 1c c0       	mov    %eax,0xc01ccf8c

    free_list = free_list_store;
c0104708:	8b 45 80             	mov    -0x80(%ebp),%eax
c010470b:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010470e:	a3 84 cf 1c c0       	mov    %eax,0xc01ccf84
c0104713:	89 15 88 cf 1c c0    	mov    %edx,0xc01ccf88
    free_pages(p0, 5);
c0104719:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0104720:	00 
c0104721:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104724:	89 04 24             	mov    %eax,(%esp)
c0104727:	e8 ad 0b 00 00       	call   c01052d9 <free_pages>

    le = &free_list;
c010472c:	c7 45 ec 84 cf 1c c0 	movl   $0xc01ccf84,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104733:	eb 1c                	jmp    c0104751 <default_check+0x5e1>
        struct Page *p = le2page(le, page_link);
c0104735:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104738:	83 e8 0c             	sub    $0xc,%eax
c010473b:	89 45 d8             	mov    %eax,-0x28(%ebp)
        count --, total -= p->property;
c010473e:	ff 4d f4             	decl   -0xc(%ebp)
c0104741:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104744:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104747:	8b 48 08             	mov    0x8(%eax),%ecx
c010474a:	89 d0                	mov    %edx,%eax
c010474c:	29 c8                	sub    %ecx,%eax
c010474e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104751:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104754:	89 45 88             	mov    %eax,-0x78(%ebp)
    return listelm->next;
c0104757:	8b 45 88             	mov    -0x78(%ebp),%eax
c010475a:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != &free_list) {
c010475d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104760:	81 7d ec 84 cf 1c c0 	cmpl   $0xc01ccf84,-0x14(%ebp)
c0104767:	75 cc                	jne    c0104735 <default_check+0x5c5>
    }
    assert(count == 0);
c0104769:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010476d:	74 24                	je     c0104793 <default_check+0x623>
c010476f:	c7 44 24 0c fe ea 10 	movl   $0xc010eafe,0xc(%esp)
c0104776:	c0 
c0104777:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c010477e:	c0 
c010477f:	c7 44 24 04 34 01 00 	movl   $0x134,0x4(%esp)
c0104786:	00 
c0104787:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c010478e:	e8 5d c6 ff ff       	call   c0100df0 <__panic>
    assert(total == 0);
c0104793:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104797:	74 24                	je     c01047bd <default_check+0x64d>
c0104799:	c7 44 24 0c 09 eb 10 	movl   $0xc010eb09,0xc(%esp)
c01047a0:	c0 
c01047a1:	c7 44 24 08 b6 e7 10 	movl   $0xc010e7b6,0x8(%esp)
c01047a8:	c0 
c01047a9:	c7 44 24 04 35 01 00 	movl   $0x135,0x4(%esp)
c01047b0:	00 
c01047b1:	c7 04 24 cb e7 10 c0 	movl   $0xc010e7cb,(%esp)
c01047b8:	e8 33 c6 ff ff       	call   c0100df0 <__panic>
}
c01047bd:	90                   	nop
c01047be:	89 ec                	mov    %ebp,%esp
c01047c0:	5d                   	pop    %ebp
c01047c1:	c3                   	ret    

c01047c2 <__intr_save>:
__intr_save(void) {
c01047c2:	55                   	push   %ebp
c01047c3:	89 e5                	mov    %esp,%ebp
c01047c5:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01047c8:	9c                   	pushf  
c01047c9:	58                   	pop    %eax
c01047ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01047cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01047d0:	25 00 02 00 00       	and    $0x200,%eax
c01047d5:	85 c0                	test   %eax,%eax
c01047d7:	74 0c                	je     c01047e5 <__intr_save+0x23>
        intr_disable();
c01047d9:	e8 c8 d8 ff ff       	call   c01020a6 <intr_disable>
        return 1;
c01047de:	b8 01 00 00 00       	mov    $0x1,%eax
c01047e3:	eb 05                	jmp    c01047ea <__intr_save+0x28>
    return 0;
c01047e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01047ea:	89 ec                	mov    %ebp,%esp
c01047ec:	5d                   	pop    %ebp
c01047ed:	c3                   	ret    

c01047ee <__intr_restore>:
__intr_restore(bool flag) {
c01047ee:	55                   	push   %ebp
c01047ef:	89 e5                	mov    %esp,%ebp
c01047f1:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01047f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01047f8:	74 05                	je     c01047ff <__intr_restore+0x11>
        intr_enable();
c01047fa:	e8 9f d8 ff ff       	call   c010209e <intr_enable>
}
c01047ff:	90                   	nop
c0104800:	89 ec                	mov    %ebp,%esp
c0104802:	5d                   	pop    %ebp
c0104803:	c3                   	ret    

c0104804 <page2ppn>:
page2ppn(struct Page *page) {
c0104804:	55                   	push   %ebp
c0104805:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104807:	8b 15 a0 cf 1c c0    	mov    0xc01ccfa0,%edx
c010480d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104810:	29 d0                	sub    %edx,%eax
c0104812:	c1 f8 05             	sar    $0x5,%eax
}
c0104815:	5d                   	pop    %ebp
c0104816:	c3                   	ret    

c0104817 <page2pa>:
page2pa(struct Page *page) {
c0104817:	55                   	push   %ebp
c0104818:	89 e5                	mov    %esp,%ebp
c010481a:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010481d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104820:	89 04 24             	mov    %eax,(%esp)
c0104823:	e8 dc ff ff ff       	call   c0104804 <page2ppn>
c0104828:	c1 e0 0c             	shl    $0xc,%eax
}
c010482b:	89 ec                	mov    %ebp,%esp
c010482d:	5d                   	pop    %ebp
c010482e:	c3                   	ret    

c010482f <pa2page>:
pa2page(uintptr_t pa) {
c010482f:	55                   	push   %ebp
c0104830:	89 e5                	mov    %esp,%ebp
c0104832:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104835:	8b 45 08             	mov    0x8(%ebp),%eax
c0104838:	c1 e8 0c             	shr    $0xc,%eax
c010483b:	89 c2                	mov    %eax,%edx
c010483d:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c0104842:	39 c2                	cmp    %eax,%edx
c0104844:	72 1c                	jb     c0104862 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104846:	c7 44 24 08 44 eb 10 	movl   $0xc010eb44,0x8(%esp)
c010484d:	c0 
c010484e:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104855:	00 
c0104856:	c7 04 24 63 eb 10 c0 	movl   $0xc010eb63,(%esp)
c010485d:	e8 8e c5 ff ff       	call   c0100df0 <__panic>
    return &pages[PPN(pa)];
c0104862:	8b 15 a0 cf 1c c0    	mov    0xc01ccfa0,%edx
c0104868:	8b 45 08             	mov    0x8(%ebp),%eax
c010486b:	c1 e8 0c             	shr    $0xc,%eax
c010486e:	c1 e0 05             	shl    $0x5,%eax
c0104871:	01 d0                	add    %edx,%eax
}
c0104873:	89 ec                	mov    %ebp,%esp
c0104875:	5d                   	pop    %ebp
c0104876:	c3                   	ret    

c0104877 <page2kva>:
page2kva(struct Page *page) {
c0104877:	55                   	push   %ebp
c0104878:	89 e5                	mov    %esp,%ebp
c010487a:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010487d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104880:	89 04 24             	mov    %eax,(%esp)
c0104883:	e8 8f ff ff ff       	call   c0104817 <page2pa>
c0104888:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010488b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010488e:	c1 e8 0c             	shr    $0xc,%eax
c0104891:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104894:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c0104899:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010489c:	72 23                	jb     c01048c1 <page2kva+0x4a>
c010489e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048a1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01048a5:	c7 44 24 08 74 eb 10 	movl   $0xc010eb74,0x8(%esp)
c01048ac:	c0 
c01048ad:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01048b4:	00 
c01048b5:	c7 04 24 63 eb 10 c0 	movl   $0xc010eb63,(%esp)
c01048bc:	e8 2f c5 ff ff       	call   c0100df0 <__panic>
c01048c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048c4:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01048c9:	89 ec                	mov    %ebp,%esp
c01048cb:	5d                   	pop    %ebp
c01048cc:	c3                   	ret    

c01048cd <kva2page>:
kva2page(void *kva) {
c01048cd:	55                   	push   %ebp
c01048ce:	89 e5                	mov    %esp,%ebp
c01048d0:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01048d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01048d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01048d9:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01048e0:	77 23                	ja     c0104905 <kva2page+0x38>
c01048e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048e5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01048e9:	c7 44 24 08 98 eb 10 	movl   $0xc010eb98,0x8(%esp)
c01048f0:	c0 
c01048f1:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01048f8:	00 
c01048f9:	c7 04 24 63 eb 10 c0 	movl   $0xc010eb63,(%esp)
c0104900:	e8 eb c4 ff ff       	call   c0100df0 <__panic>
c0104905:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104908:	05 00 00 00 40       	add    $0x40000000,%eax
c010490d:	89 04 24             	mov    %eax,(%esp)
c0104910:	e8 1a ff ff ff       	call   c010482f <pa2page>
}
c0104915:	89 ec                	mov    %ebp,%esp
c0104917:	5d                   	pop    %ebp
c0104918:	c3                   	ret    

c0104919 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104919:	55                   	push   %ebp
c010491a:	89 e5                	mov    %esp,%ebp
c010491c:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c010491f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104922:	ba 01 00 00 00       	mov    $0x1,%edx
c0104927:	88 c1                	mov    %al,%cl
c0104929:	d3 e2                	shl    %cl,%edx
c010492b:	89 d0                	mov    %edx,%eax
c010492d:	89 04 24             	mov    %eax,(%esp)
c0104930:	e8 37 09 00 00       	call   c010526c <alloc_pages>
c0104935:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104938:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010493c:	75 07                	jne    c0104945 <__slob_get_free_pages+0x2c>
    return NULL;
c010493e:	b8 00 00 00 00       	mov    $0x0,%eax
c0104943:	eb 0b                	jmp    c0104950 <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104945:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104948:	89 04 24             	mov    %eax,(%esp)
c010494b:	e8 27 ff ff ff       	call   c0104877 <page2kva>
}
c0104950:	89 ec                	mov    %ebp,%esp
c0104952:	5d                   	pop    %ebp
c0104953:	c3                   	ret    

c0104954 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104954:	55                   	push   %ebp
c0104955:	89 e5                	mov    %esp,%ebp
c0104957:	83 ec 18             	sub    $0x18,%esp
c010495a:	89 5d fc             	mov    %ebx,-0x4(%ebp)
  free_pages(kva2page(kva), 1 << order);
c010495d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104960:	ba 01 00 00 00       	mov    $0x1,%edx
c0104965:	88 c1                	mov    %al,%cl
c0104967:	d3 e2                	shl    %cl,%edx
c0104969:	89 d0                	mov    %edx,%eax
c010496b:	89 c3                	mov    %eax,%ebx
c010496d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104970:	89 04 24             	mov    %eax,(%esp)
c0104973:	e8 55 ff ff ff       	call   c01048cd <kva2page>
c0104978:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c010497c:	89 04 24             	mov    %eax,(%esp)
c010497f:	e8 55 09 00 00       	call   c01052d9 <free_pages>
}
c0104984:	90                   	nop
c0104985:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104988:	89 ec                	mov    %ebp,%esp
c010498a:	5d                   	pop    %ebp
c010498b:	c3                   	ret    

c010498c <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c010498c:	55                   	push   %ebp
c010498d:	89 e5                	mov    %esp,%ebp
c010498f:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104992:	8b 45 08             	mov    0x8(%ebp),%eax
c0104995:	83 c0 08             	add    $0x8,%eax
c0104998:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010499d:	76 24                	jbe    c01049c3 <slob_alloc+0x37>
c010499f:	c7 44 24 0c bc eb 10 	movl   $0xc010ebbc,0xc(%esp)
c01049a6:	c0 
c01049a7:	c7 44 24 08 db eb 10 	movl   $0xc010ebdb,0x8(%esp)
c01049ae:	c0 
c01049af:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01049b6:	00 
c01049b7:	c7 04 24 f0 eb 10 c0 	movl   $0xc010ebf0,(%esp)
c01049be:	e8 2d c4 ff ff       	call   c0100df0 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01049c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01049ca:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01049d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01049d4:	83 c0 07             	add    $0x7,%eax
c01049d7:	c1 e8 03             	shr    $0x3,%eax
c01049da:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01049dd:	e8 e0 fd ff ff       	call   c01047c2 <__intr_save>
c01049e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01049e5:	a1 e8 99 13 c0       	mov    0xc01399e8,%eax
c01049ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01049ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049f0:	8b 40 04             	mov    0x4(%eax),%eax
c01049f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01049f6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01049fa:	74 21                	je     c0104a1d <slob_alloc+0x91>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01049fc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049ff:	8b 45 10             	mov    0x10(%ebp),%eax
c0104a02:	01 d0                	add    %edx,%eax
c0104a04:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104a07:	8b 45 10             	mov    0x10(%ebp),%eax
c0104a0a:	f7 d8                	neg    %eax
c0104a0c:	21 d0                	and    %edx,%eax
c0104a0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104a11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a14:	2b 45 f0             	sub    -0x10(%ebp),%eax
c0104a17:	c1 f8 03             	sar    $0x3,%eax
c0104a1a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104a1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a20:	8b 00                	mov    (%eax),%eax
c0104a22:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104a25:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104a28:	01 ca                	add    %ecx,%edx
c0104a2a:	39 d0                	cmp    %edx,%eax
c0104a2c:	0f 8c aa 00 00 00    	jl     c0104adc <slob_alloc+0x150>
			if (delta) { /* need to fragment head to align? */
c0104a32:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104a36:	74 38                	je     c0104a70 <slob_alloc+0xe4>
				aligned->units = cur->units - delta;
c0104a38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a3b:	8b 00                	mov    (%eax),%eax
c0104a3d:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104a40:	89 c2                	mov    %eax,%edx
c0104a42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a45:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104a47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a4a:	8b 50 04             	mov    0x4(%eax),%edx
c0104a4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a50:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104a53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a56:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104a59:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104a5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a5f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104a62:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104a64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a67:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104a6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104a70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a73:	8b 00                	mov    (%eax),%eax
c0104a75:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0104a78:	75 0e                	jne    c0104a88 <slob_alloc+0xfc>
				prev->next = cur->next; /* unlink */
c0104a7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a7d:	8b 50 04             	mov    0x4(%eax),%edx
c0104a80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a83:	89 50 04             	mov    %edx,0x4(%eax)
c0104a86:	eb 3c                	jmp    c0104ac4 <slob_alloc+0x138>
			else { /* fragment */
				prev->next = cur + units;
c0104a88:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104a8b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104a92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a95:	01 c2                	add    %eax,%edx
c0104a97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a9a:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104a9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aa0:	8b 10                	mov    (%eax),%edx
c0104aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aa5:	8b 40 04             	mov    0x4(%eax),%eax
c0104aa8:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104aab:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104aad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ab0:	8b 40 04             	mov    0x4(%eax),%eax
c0104ab3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104ab6:	8b 52 04             	mov    0x4(%edx),%edx
c0104ab9:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104abc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104abf:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104ac2:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104ac4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ac7:	a3 e8 99 13 c0       	mov    %eax,0xc01399e8
			spin_unlock_irqrestore(&slob_lock, flags);
c0104acc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104acf:	89 04 24             	mov    %eax,(%esp)
c0104ad2:	e8 17 fd ff ff       	call   c01047ee <__intr_restore>
			return cur;
c0104ad7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ada:	eb 7f                	jmp    c0104b5b <slob_alloc+0x1cf>
		}
		if (cur == slobfree) {
c0104adc:	a1 e8 99 13 c0       	mov    0xc01399e8,%eax
c0104ae1:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104ae4:	75 61                	jne    c0104b47 <slob_alloc+0x1bb>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104ae6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104ae9:	89 04 24             	mov    %eax,(%esp)
c0104aec:	e8 fd fc ff ff       	call   c01047ee <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104af1:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104af8:	75 07                	jne    c0104b01 <slob_alloc+0x175>
				return 0;
c0104afa:	b8 00 00 00 00       	mov    $0x0,%eax
c0104aff:	eb 5a                	jmp    c0104b5b <slob_alloc+0x1cf>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104b01:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104b08:	00 
c0104b09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b0c:	89 04 24             	mov    %eax,(%esp)
c0104b0f:	e8 05 fe ff ff       	call   c0104919 <__slob_get_free_pages>
c0104b14:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104b17:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104b1b:	75 07                	jne    c0104b24 <slob_alloc+0x198>
				return 0;
c0104b1d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b22:	eb 37                	jmp    c0104b5b <slob_alloc+0x1cf>

			slob_free(cur, PAGE_SIZE);
c0104b24:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104b2b:	00 
c0104b2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b2f:	89 04 24             	mov    %eax,(%esp)
c0104b32:	e8 28 00 00 00       	call   c0104b5f <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104b37:	e8 86 fc ff ff       	call   c01047c2 <__intr_save>
c0104b3c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104b3f:	a1 e8 99 13 c0       	mov    0xc01399e8,%eax
c0104b44:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104b47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b50:	8b 40 04             	mov    0x4(%eax),%eax
c0104b53:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104b56:	e9 9b fe ff ff       	jmp    c01049f6 <slob_alloc+0x6a>
		}
	}
}
c0104b5b:	89 ec                	mov    %ebp,%esp
c0104b5d:	5d                   	pop    %ebp
c0104b5e:	c3                   	ret    

c0104b5f <slob_free>:

static void slob_free(void *block, int size)
{
c0104b5f:	55                   	push   %ebp
c0104b60:	89 e5                	mov    %esp,%ebp
c0104b62:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104b65:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b68:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104b6b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104b6f:	0f 84 01 01 00 00    	je     c0104c76 <slob_free+0x117>
		return;

	if (size)
c0104b75:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104b79:	74 10                	je     c0104b8b <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c0104b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b7e:	83 c0 07             	add    $0x7,%eax
c0104b81:	c1 e8 03             	shr    $0x3,%eax
c0104b84:	89 c2                	mov    %eax,%edx
c0104b86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b89:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104b8b:	e8 32 fc ff ff       	call   c01047c2 <__intr_save>
c0104b90:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104b93:	a1 e8 99 13 c0       	mov    0xc01399e8,%eax
c0104b98:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104b9b:	eb 27                	jmp    c0104bc4 <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ba0:	8b 40 04             	mov    0x4(%eax),%eax
c0104ba3:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0104ba6:	72 13                	jb     c0104bbb <slob_free+0x5c>
c0104ba8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104bae:	77 27                	ja     c0104bd7 <slob_free+0x78>
c0104bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bb3:	8b 40 04             	mov    0x4(%eax),%eax
c0104bb6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104bb9:	72 1c                	jb     c0104bd7 <slob_free+0x78>
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104bbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bbe:	8b 40 04             	mov    0x4(%eax),%eax
c0104bc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104bc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bc7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104bca:	76 d1                	jbe    c0104b9d <slob_free+0x3e>
c0104bcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bcf:	8b 40 04             	mov    0x4(%eax),%eax
c0104bd2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104bd5:	73 c6                	jae    c0104b9d <slob_free+0x3e>
			break;

	if (b + b->units == cur->next) {
c0104bd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bda:	8b 00                	mov    (%eax),%eax
c0104bdc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104be3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104be6:	01 c2                	add    %eax,%edx
c0104be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104beb:	8b 40 04             	mov    0x4(%eax),%eax
c0104bee:	39 c2                	cmp    %eax,%edx
c0104bf0:	75 25                	jne    c0104c17 <slob_free+0xb8>
		b->units += cur->next->units;
c0104bf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bf5:	8b 10                	mov    (%eax),%edx
c0104bf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bfa:	8b 40 04             	mov    0x4(%eax),%eax
c0104bfd:	8b 00                	mov    (%eax),%eax
c0104bff:	01 c2                	add    %eax,%edx
c0104c01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c04:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c09:	8b 40 04             	mov    0x4(%eax),%eax
c0104c0c:	8b 50 04             	mov    0x4(%eax),%edx
c0104c0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c12:	89 50 04             	mov    %edx,0x4(%eax)
c0104c15:	eb 0c                	jmp    c0104c23 <slob_free+0xc4>
	} else
		b->next = cur->next;
c0104c17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c1a:	8b 50 04             	mov    0x4(%eax),%edx
c0104c1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c20:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104c23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c26:	8b 00                	mov    (%eax),%eax
c0104c28:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104c2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c32:	01 d0                	add    %edx,%eax
c0104c34:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104c37:	75 1f                	jne    c0104c58 <slob_free+0xf9>
		cur->units += b->units;
c0104c39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c3c:	8b 10                	mov    (%eax),%edx
c0104c3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c41:	8b 00                	mov    (%eax),%eax
c0104c43:	01 c2                	add    %eax,%edx
c0104c45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c48:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104c4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c4d:	8b 50 04             	mov    0x4(%eax),%edx
c0104c50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c53:	89 50 04             	mov    %edx,0x4(%eax)
c0104c56:	eb 09                	jmp    c0104c61 <slob_free+0x102>
	} else
		cur->next = b;
c0104c58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c5b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c5e:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104c61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c64:	a3 e8 99 13 c0       	mov    %eax,0xc01399e8

	spin_unlock_irqrestore(&slob_lock, flags);
c0104c69:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c6c:	89 04 24             	mov    %eax,(%esp)
c0104c6f:	e8 7a fb ff ff       	call   c01047ee <__intr_restore>
c0104c74:	eb 01                	jmp    c0104c77 <slob_free+0x118>
		return;
c0104c76:	90                   	nop
}
c0104c77:	89 ec                	mov    %ebp,%esp
c0104c79:	5d                   	pop    %ebp
c0104c7a:	c3                   	ret    

c0104c7b <slob_init>:



void
slob_init(void) {
c0104c7b:	55                   	push   %ebp
c0104c7c:	89 e5                	mov    %esp,%ebp
c0104c7e:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104c81:	c7 04 24 02 ec 10 c0 	movl   $0xc010ec02,(%esp)
c0104c88:	e8 e5 b6 ff ff       	call   c0100372 <cprintf>
}
c0104c8d:	90                   	nop
c0104c8e:	89 ec                	mov    %ebp,%esp
c0104c90:	5d                   	pop    %ebp
c0104c91:	c3                   	ret    

c0104c92 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104c92:	55                   	push   %ebp
c0104c93:	89 e5                	mov    %esp,%ebp
c0104c95:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104c98:	e8 de ff ff ff       	call   c0104c7b <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104c9d:	c7 04 24 16 ec 10 c0 	movl   $0xc010ec16,(%esp)
c0104ca4:	e8 c9 b6 ff ff       	call   c0100372 <cprintf>
}
c0104ca9:	90                   	nop
c0104caa:	89 ec                	mov    %ebp,%esp
c0104cac:	5d                   	pop    %ebp
c0104cad:	c3                   	ret    

c0104cae <slob_allocated>:

size_t
slob_allocated(void) {
c0104cae:	55                   	push   %ebp
c0104caf:	89 e5                	mov    %esp,%ebp
  return 0;
c0104cb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cb6:	5d                   	pop    %ebp
c0104cb7:	c3                   	ret    

c0104cb8 <kallocated>:

size_t
kallocated(void) {
c0104cb8:	55                   	push   %ebp
c0104cb9:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104cbb:	e8 ee ff ff ff       	call   c0104cae <slob_allocated>
}
c0104cc0:	5d                   	pop    %ebp
c0104cc1:	c3                   	ret    

c0104cc2 <find_order>:

static int find_order(int size)
{
c0104cc2:	55                   	push   %ebp
c0104cc3:	89 e5                	mov    %esp,%ebp
c0104cc5:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104cc8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104ccf:	eb 06                	jmp    c0104cd7 <find_order+0x15>
		order++;
c0104cd1:	ff 45 fc             	incl   -0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104cd4:	d1 7d 08             	sarl   0x8(%ebp)
c0104cd7:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104cde:	7f f1                	jg     c0104cd1 <find_order+0xf>
	return order;
c0104ce0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104ce3:	89 ec                	mov    %ebp,%esp
c0104ce5:	5d                   	pop    %ebp
c0104ce6:	c3                   	ret    

c0104ce7 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104ce7:	55                   	push   %ebp
c0104ce8:	89 e5                	mov    %esp,%ebp
c0104cea:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104ced:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104cf4:	77 3b                	ja     c0104d31 <__kmalloc+0x4a>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104cf6:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cf9:	8d 50 08             	lea    0x8(%eax),%edx
c0104cfc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104d03:	00 
c0104d04:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104d0b:	89 14 24             	mov    %edx,(%esp)
c0104d0e:	e8 79 fc ff ff       	call   c010498c <slob_alloc>
c0104d13:	89 45 ec             	mov    %eax,-0x14(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104d16:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104d1a:	74 0b                	je     c0104d27 <__kmalloc+0x40>
c0104d1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d1f:	83 c0 08             	add    $0x8,%eax
c0104d22:	e9 b0 00 00 00       	jmp    c0104dd7 <__kmalloc+0xf0>
c0104d27:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d2c:	e9 a6 00 00 00       	jmp    c0104dd7 <__kmalloc+0xf0>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104d31:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104d38:	00 
c0104d39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104d40:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104d47:	e8 40 fc ff ff       	call   c010498c <slob_alloc>
c0104d4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!bb)
c0104d4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d53:	75 07                	jne    c0104d5c <__kmalloc+0x75>
		return 0;
c0104d55:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d5a:	eb 7b                	jmp    c0104dd7 <__kmalloc+0xf0>

	bb->order = find_order(size);
c0104d5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d5f:	89 04 24             	mov    %eax,(%esp)
c0104d62:	e8 5b ff ff ff       	call   c0104cc2 <find_order>
c0104d67:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104d6a:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d6f:	8b 00                	mov    (%eax),%eax
c0104d71:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104d75:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d78:	89 04 24             	mov    %eax,(%esp)
c0104d7b:	e8 99 fb ff ff       	call   c0104919 <__slob_get_free_pages>
c0104d80:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104d83:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d89:	8b 40 04             	mov    0x4(%eax),%eax
c0104d8c:	85 c0                	test   %eax,%eax
c0104d8e:	74 2f                	je     c0104dbf <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c0104d90:	e8 2d fa ff ff       	call   c01047c2 <__intr_save>
c0104d95:	89 45 f0             	mov    %eax,-0x10(%ebp)
		bb->next = bigblocks;
c0104d98:	8b 15 90 cf 1c c0    	mov    0xc01ccf90,%edx
c0104d9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104da1:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104da4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104da7:	a3 90 cf 1c c0       	mov    %eax,0xc01ccf90
		spin_unlock_irqrestore(&block_lock, flags);
c0104dac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104daf:	89 04 24             	mov    %eax,(%esp)
c0104db2:	e8 37 fa ff ff       	call   c01047ee <__intr_restore>
		return bb->pages;
c0104db7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dba:	8b 40 04             	mov    0x4(%eax),%eax
c0104dbd:	eb 18                	jmp    c0104dd7 <__kmalloc+0xf0>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104dbf:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104dc6:	00 
c0104dc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dca:	89 04 24             	mov    %eax,(%esp)
c0104dcd:	e8 8d fd ff ff       	call   c0104b5f <slob_free>
	return 0;
c0104dd2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104dd7:	89 ec                	mov    %ebp,%esp
c0104dd9:	5d                   	pop    %ebp
c0104dda:	c3                   	ret    

c0104ddb <kmalloc>:

void *
kmalloc(size_t size)
{
c0104ddb:	55                   	push   %ebp
c0104ddc:	89 e5                	mov    %esp,%ebp
c0104dde:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104de1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104de8:	00 
c0104de9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104dec:	89 04 24             	mov    %eax,(%esp)
c0104def:	e8 f3 fe ff ff       	call   c0104ce7 <__kmalloc>
}
c0104df4:	89 ec                	mov    %ebp,%esp
c0104df6:	5d                   	pop    %ebp
c0104df7:	c3                   	ret    

c0104df8 <kfree>:


void kfree(void *block)
{
c0104df8:	55                   	push   %ebp
c0104df9:	89 e5                	mov    %esp,%ebp
c0104dfb:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104dfe:	c7 45 f0 90 cf 1c c0 	movl   $0xc01ccf90,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104e05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104e09:	0f 84 a3 00 00 00    	je     c0104eb2 <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104e0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e12:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104e17:	85 c0                	test   %eax,%eax
c0104e19:	75 7f                	jne    c0104e9a <kfree+0xa2>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104e1b:	e8 a2 f9 ff ff       	call   c01047c2 <__intr_save>
c0104e20:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104e23:	a1 90 cf 1c c0       	mov    0xc01ccf90,%eax
c0104e28:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e2b:	eb 5c                	jmp    c0104e89 <kfree+0x91>
			if (bb->pages == block) {
c0104e2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e30:	8b 40 04             	mov    0x4(%eax),%eax
c0104e33:	39 45 08             	cmp    %eax,0x8(%ebp)
c0104e36:	75 3f                	jne    c0104e77 <kfree+0x7f>
				*last = bb->next;
c0104e38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e3b:	8b 50 08             	mov    0x8(%eax),%edx
c0104e3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e41:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104e43:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e46:	89 04 24             	mov    %eax,(%esp)
c0104e49:	e8 a0 f9 ff ff       	call   c01047ee <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e51:	8b 10                	mov    (%eax),%edx
c0104e53:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e56:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104e5a:	89 04 24             	mov    %eax,(%esp)
c0104e5d:	e8 f2 fa ff ff       	call   c0104954 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104e62:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104e69:	00 
c0104e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e6d:	89 04 24             	mov    %eax,(%esp)
c0104e70:	e8 ea fc ff ff       	call   c0104b5f <slob_free>
				return;
c0104e75:	eb 3c                	jmp    c0104eb3 <kfree+0xbb>
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104e77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e7a:	83 c0 08             	add    $0x8,%eax
c0104e7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104e80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e83:	8b 40 08             	mov    0x8(%eax),%eax
c0104e86:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e89:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e8d:	75 9e                	jne    c0104e2d <kfree+0x35>
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104e8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e92:	89 04 24             	mov    %eax,(%esp)
c0104e95:	e8 54 f9 ff ff       	call   c01047ee <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104e9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e9d:	83 e8 08             	sub    $0x8,%eax
c0104ea0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104ea7:	00 
c0104ea8:	89 04 24             	mov    %eax,(%esp)
c0104eab:	e8 af fc ff ff       	call   c0104b5f <slob_free>
	return;
c0104eb0:	eb 01                	jmp    c0104eb3 <kfree+0xbb>
		return;
c0104eb2:	90                   	nop
}
c0104eb3:	89 ec                	mov    %ebp,%esp
c0104eb5:	5d                   	pop    %ebp
c0104eb6:	c3                   	ret    

c0104eb7 <ksize>:


unsigned int ksize(const void *block)
{
c0104eb7:	55                   	push   %ebp
c0104eb8:	89 e5                	mov    %esp,%ebp
c0104eba:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104ebd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104ec1:	75 07                	jne    c0104eca <ksize+0x13>
		return 0;
c0104ec3:	b8 00 00 00 00       	mov    $0x0,%eax
c0104ec8:	eb 6b                	jmp    c0104f35 <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104eca:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ecd:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104ed2:	85 c0                	test   %eax,%eax
c0104ed4:	75 54                	jne    c0104f2a <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c0104ed6:	e8 e7 f8 ff ff       	call   c01047c2 <__intr_save>
c0104edb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104ede:	a1 90 cf 1c c0       	mov    0xc01ccf90,%eax
c0104ee3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ee6:	eb 31                	jmp    c0104f19 <ksize+0x62>
			if (bb->pages == block) {
c0104ee8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eeb:	8b 40 04             	mov    0x4(%eax),%eax
c0104eee:	39 45 08             	cmp    %eax,0x8(%ebp)
c0104ef1:	75 1d                	jne    c0104f10 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104ef3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ef6:	89 04 24             	mov    %eax,(%esp)
c0104ef9:	e8 f0 f8 ff ff       	call   c01047ee <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104efe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f01:	8b 00                	mov    (%eax),%eax
c0104f03:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104f08:	88 c1                	mov    %al,%cl
c0104f0a:	d3 e2                	shl    %cl,%edx
c0104f0c:	89 d0                	mov    %edx,%eax
c0104f0e:	eb 25                	jmp    c0104f35 <ksize+0x7e>
		for (bb = bigblocks; bb; bb = bb->next)
c0104f10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f13:	8b 40 08             	mov    0x8(%eax),%eax
c0104f16:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f19:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104f1d:	75 c9                	jne    c0104ee8 <ksize+0x31>
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104f1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f22:	89 04 24             	mov    %eax,(%esp)
c0104f25:	e8 c4 f8 ff ff       	call   c01047ee <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104f2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f2d:	83 e8 08             	sub    $0x8,%eax
c0104f30:	8b 00                	mov    (%eax),%eax
c0104f32:	c1 e0 03             	shl    $0x3,%eax
}
c0104f35:	89 ec                	mov    %ebp,%esp
c0104f37:	5d                   	pop    %ebp
c0104f38:	c3                   	ret    

c0104f39 <page2ppn>:
page2ppn(struct Page *page) {
c0104f39:	55                   	push   %ebp
c0104f3a:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104f3c:	8b 15 a0 cf 1c c0    	mov    0xc01ccfa0,%edx
c0104f42:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f45:	29 d0                	sub    %edx,%eax
c0104f47:	c1 f8 05             	sar    $0x5,%eax
}
c0104f4a:	5d                   	pop    %ebp
c0104f4b:	c3                   	ret    

c0104f4c <page2pa>:
page2pa(struct Page *page) {
c0104f4c:	55                   	push   %ebp
c0104f4d:	89 e5                	mov    %esp,%ebp
c0104f4f:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104f52:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f55:	89 04 24             	mov    %eax,(%esp)
c0104f58:	e8 dc ff ff ff       	call   c0104f39 <page2ppn>
c0104f5d:	c1 e0 0c             	shl    $0xc,%eax
}
c0104f60:	89 ec                	mov    %ebp,%esp
c0104f62:	5d                   	pop    %ebp
c0104f63:	c3                   	ret    

c0104f64 <pa2page>:
pa2page(uintptr_t pa) {
c0104f64:	55                   	push   %ebp
c0104f65:	89 e5                	mov    %esp,%ebp
c0104f67:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104f6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f6d:	c1 e8 0c             	shr    $0xc,%eax
c0104f70:	89 c2                	mov    %eax,%edx
c0104f72:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c0104f77:	39 c2                	cmp    %eax,%edx
c0104f79:	72 1c                	jb     c0104f97 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104f7b:	c7 44 24 08 34 ec 10 	movl   $0xc010ec34,0x8(%esp)
c0104f82:	c0 
c0104f83:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104f8a:	00 
c0104f8b:	c7 04 24 53 ec 10 c0 	movl   $0xc010ec53,(%esp)
c0104f92:	e8 59 be ff ff       	call   c0100df0 <__panic>
    return &pages[PPN(pa)];
c0104f97:	8b 15 a0 cf 1c c0    	mov    0xc01ccfa0,%edx
c0104f9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fa0:	c1 e8 0c             	shr    $0xc,%eax
c0104fa3:	c1 e0 05             	shl    $0x5,%eax
c0104fa6:	01 d0                	add    %edx,%eax
}
c0104fa8:	89 ec                	mov    %ebp,%esp
c0104faa:	5d                   	pop    %ebp
c0104fab:	c3                   	ret    

c0104fac <page2kva>:
page2kva(struct Page *page) {
c0104fac:	55                   	push   %ebp
c0104fad:	89 e5                	mov    %esp,%ebp
c0104faf:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104fb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fb5:	89 04 24             	mov    %eax,(%esp)
c0104fb8:	e8 8f ff ff ff       	call   c0104f4c <page2pa>
c0104fbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104fc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fc3:	c1 e8 0c             	shr    $0xc,%eax
c0104fc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104fc9:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c0104fce:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104fd1:	72 23                	jb     c0104ff6 <page2kva+0x4a>
c0104fd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fd6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104fda:	c7 44 24 08 64 ec 10 	movl   $0xc010ec64,0x8(%esp)
c0104fe1:	c0 
c0104fe2:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104fe9:	00 
c0104fea:	c7 04 24 53 ec 10 c0 	movl   $0xc010ec53,(%esp)
c0104ff1:	e8 fa bd ff ff       	call   c0100df0 <__panic>
c0104ff6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ff9:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104ffe:	89 ec                	mov    %ebp,%esp
c0105000:	5d                   	pop    %ebp
c0105001:	c3                   	ret    

c0105002 <pte2page>:
pte2page(pte_t pte) {
c0105002:	55                   	push   %ebp
c0105003:	89 e5                	mov    %esp,%ebp
c0105005:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0105008:	8b 45 08             	mov    0x8(%ebp),%eax
c010500b:	83 e0 01             	and    $0x1,%eax
c010500e:	85 c0                	test   %eax,%eax
c0105010:	75 1c                	jne    c010502e <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0105012:	c7 44 24 08 88 ec 10 	movl   $0xc010ec88,0x8(%esp)
c0105019:	c0 
c010501a:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0105021:	00 
c0105022:	c7 04 24 53 ec 10 c0 	movl   $0xc010ec53,(%esp)
c0105029:	e8 c2 bd ff ff       	call   c0100df0 <__panic>
    return pa2page(PTE_ADDR(pte));
c010502e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105031:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105036:	89 04 24             	mov    %eax,(%esp)
c0105039:	e8 26 ff ff ff       	call   c0104f64 <pa2page>
}
c010503e:	89 ec                	mov    %ebp,%esp
c0105040:	5d                   	pop    %ebp
c0105041:	c3                   	ret    

c0105042 <pde2page>:
pde2page(pde_t pde) {
c0105042:	55                   	push   %ebp
c0105043:	89 e5                	mov    %esp,%ebp
c0105045:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0105048:	8b 45 08             	mov    0x8(%ebp),%eax
c010504b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105050:	89 04 24             	mov    %eax,(%esp)
c0105053:	e8 0c ff ff ff       	call   c0104f64 <pa2page>
}
c0105058:	89 ec                	mov    %ebp,%esp
c010505a:	5d                   	pop    %ebp
c010505b:	c3                   	ret    

c010505c <page_ref>:
page_ref(struct Page *page) {
c010505c:	55                   	push   %ebp
c010505d:	89 e5                	mov    %esp,%ebp
    return page->ref;
c010505f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105062:	8b 00                	mov    (%eax),%eax
}
c0105064:	5d                   	pop    %ebp
c0105065:	c3                   	ret    

c0105066 <set_page_ref>:
set_page_ref(struct Page *page, int val) {
c0105066:	55                   	push   %ebp
c0105067:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0105069:	8b 45 08             	mov    0x8(%ebp),%eax
c010506c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010506f:	89 10                	mov    %edx,(%eax)
}
c0105071:	90                   	nop
c0105072:	5d                   	pop    %ebp
c0105073:	c3                   	ret    

c0105074 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0105074:	55                   	push   %ebp
c0105075:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0105077:	8b 45 08             	mov    0x8(%ebp),%eax
c010507a:	8b 00                	mov    (%eax),%eax
c010507c:	8d 50 01             	lea    0x1(%eax),%edx
c010507f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105082:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0105084:	8b 45 08             	mov    0x8(%ebp),%eax
c0105087:	8b 00                	mov    (%eax),%eax
}
c0105089:	5d                   	pop    %ebp
c010508a:	c3                   	ret    

c010508b <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c010508b:	55                   	push   %ebp
c010508c:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c010508e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105091:	8b 00                	mov    (%eax),%eax
c0105093:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105096:	8b 45 08             	mov    0x8(%ebp),%eax
c0105099:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010509b:	8b 45 08             	mov    0x8(%ebp),%eax
c010509e:	8b 00                	mov    (%eax),%eax
}
c01050a0:	5d                   	pop    %ebp
c01050a1:	c3                   	ret    

c01050a2 <__intr_save>:
__intr_save(void) {
c01050a2:	55                   	push   %ebp
c01050a3:	89 e5                	mov    %esp,%ebp
c01050a5:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01050a8:	9c                   	pushf  
c01050a9:	58                   	pop    %eax
c01050aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01050ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01050b0:	25 00 02 00 00       	and    $0x200,%eax
c01050b5:	85 c0                	test   %eax,%eax
c01050b7:	74 0c                	je     c01050c5 <__intr_save+0x23>
        intr_disable();
c01050b9:	e8 e8 cf ff ff       	call   c01020a6 <intr_disable>
        return 1;
c01050be:	b8 01 00 00 00       	mov    $0x1,%eax
c01050c3:	eb 05                	jmp    c01050ca <__intr_save+0x28>
    return 0;
c01050c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01050ca:	89 ec                	mov    %ebp,%esp
c01050cc:	5d                   	pop    %ebp
c01050cd:	c3                   	ret    

c01050ce <__intr_restore>:
__intr_restore(bool flag) {
c01050ce:	55                   	push   %ebp
c01050cf:	89 e5                	mov    %esp,%ebp
c01050d1:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01050d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01050d8:	74 05                	je     c01050df <__intr_restore+0x11>
        intr_enable();
c01050da:	e8 bf cf ff ff       	call   c010209e <intr_enable>
}
c01050df:	90                   	nop
c01050e0:	89 ec                	mov    %ebp,%esp
c01050e2:	5d                   	pop    %ebp
c01050e3:	c3                   	ret    

c01050e4 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c01050e4:	55                   	push   %ebp
c01050e5:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c01050e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01050ea:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c01050ed:	b8 23 00 00 00       	mov    $0x23,%eax
c01050f2:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c01050f4:	b8 23 00 00 00       	mov    $0x23,%eax
c01050f9:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c01050fb:	b8 10 00 00 00       	mov    $0x10,%eax
c0105100:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0105102:	b8 10 00 00 00       	mov    $0x10,%eax
c0105107:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0105109:	b8 10 00 00 00       	mov    $0x10,%eax
c010510e:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0105110:	ea 17 51 10 c0 08 00 	ljmp   $0x8,$0xc0105117
}
c0105117:	90                   	nop
c0105118:	5d                   	pop    %ebp
c0105119:	c3                   	ret    

c010511a <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c010511a:	55                   	push   %ebp
c010511b:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c010511d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105120:	a3 c4 cf 1c c0       	mov    %eax,0xc01ccfc4
}
c0105125:	90                   	nop
c0105126:	5d                   	pop    %ebp
c0105127:	c3                   	ret    

c0105128 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0105128:	55                   	push   %ebp
c0105129:	89 e5                	mov    %esp,%ebp
c010512b:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c010512e:	b8 00 90 13 c0       	mov    $0xc0139000,%eax
c0105133:	89 04 24             	mov    %eax,(%esp)
c0105136:	e8 df ff ff ff       	call   c010511a <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c010513b:	66 c7 05 c8 cf 1c c0 	movw   $0x10,0xc01ccfc8
c0105142:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0105144:	66 c7 05 48 9a 13 c0 	movw   $0x68,0xc0139a48
c010514b:	68 00 
c010514d:	b8 c0 cf 1c c0       	mov    $0xc01ccfc0,%eax
c0105152:	0f b7 c0             	movzwl %ax,%eax
c0105155:	66 a3 4a 9a 13 c0    	mov    %ax,0xc0139a4a
c010515b:	b8 c0 cf 1c c0       	mov    $0xc01ccfc0,%eax
c0105160:	c1 e8 10             	shr    $0x10,%eax
c0105163:	a2 4c 9a 13 c0       	mov    %al,0xc0139a4c
c0105168:	0f b6 05 4d 9a 13 c0 	movzbl 0xc0139a4d,%eax
c010516f:	24 f0                	and    $0xf0,%al
c0105171:	0c 09                	or     $0x9,%al
c0105173:	a2 4d 9a 13 c0       	mov    %al,0xc0139a4d
c0105178:	0f b6 05 4d 9a 13 c0 	movzbl 0xc0139a4d,%eax
c010517f:	24 ef                	and    $0xef,%al
c0105181:	a2 4d 9a 13 c0       	mov    %al,0xc0139a4d
c0105186:	0f b6 05 4d 9a 13 c0 	movzbl 0xc0139a4d,%eax
c010518d:	24 9f                	and    $0x9f,%al
c010518f:	a2 4d 9a 13 c0       	mov    %al,0xc0139a4d
c0105194:	0f b6 05 4d 9a 13 c0 	movzbl 0xc0139a4d,%eax
c010519b:	0c 80                	or     $0x80,%al
c010519d:	a2 4d 9a 13 c0       	mov    %al,0xc0139a4d
c01051a2:	0f b6 05 4e 9a 13 c0 	movzbl 0xc0139a4e,%eax
c01051a9:	24 f0                	and    $0xf0,%al
c01051ab:	a2 4e 9a 13 c0       	mov    %al,0xc0139a4e
c01051b0:	0f b6 05 4e 9a 13 c0 	movzbl 0xc0139a4e,%eax
c01051b7:	24 ef                	and    $0xef,%al
c01051b9:	a2 4e 9a 13 c0       	mov    %al,0xc0139a4e
c01051be:	0f b6 05 4e 9a 13 c0 	movzbl 0xc0139a4e,%eax
c01051c5:	24 df                	and    $0xdf,%al
c01051c7:	a2 4e 9a 13 c0       	mov    %al,0xc0139a4e
c01051cc:	0f b6 05 4e 9a 13 c0 	movzbl 0xc0139a4e,%eax
c01051d3:	0c 40                	or     $0x40,%al
c01051d5:	a2 4e 9a 13 c0       	mov    %al,0xc0139a4e
c01051da:	0f b6 05 4e 9a 13 c0 	movzbl 0xc0139a4e,%eax
c01051e1:	24 7f                	and    $0x7f,%al
c01051e3:	a2 4e 9a 13 c0       	mov    %al,0xc0139a4e
c01051e8:	b8 c0 cf 1c c0       	mov    $0xc01ccfc0,%eax
c01051ed:	c1 e8 18             	shr    $0x18,%eax
c01051f0:	a2 4f 9a 13 c0       	mov    %al,0xc0139a4f

    // reload all segment registers
    lgdt(&gdt_pd);
c01051f5:	c7 04 24 50 9a 13 c0 	movl   $0xc0139a50,(%esp)
c01051fc:	e8 e3 fe ff ff       	call   c01050e4 <lgdt>
c0105201:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0105207:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010520b:	0f 00 d8             	ltr    %ax
}
c010520e:	90                   	nop

    // load the TSS
    ltr(GD_TSS);
}
c010520f:	90                   	nop
c0105210:	89 ec                	mov    %ebp,%esp
c0105212:	5d                   	pop    %ebp
c0105213:	c3                   	ret    

c0105214 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0105214:	55                   	push   %ebp
c0105215:	89 e5                	mov    %esp,%ebp
c0105217:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c010521a:	c7 05 ac cf 1c c0 28 	movl   $0xc010eb28,0xc01ccfac
c0105221:	eb 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0105224:	a1 ac cf 1c c0       	mov    0xc01ccfac,%eax
c0105229:	8b 00                	mov    (%eax),%eax
c010522b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010522f:	c7 04 24 b4 ec 10 c0 	movl   $0xc010ecb4,(%esp)
c0105236:	e8 37 b1 ff ff       	call   c0100372 <cprintf>
    pmm_manager->init();
c010523b:	a1 ac cf 1c c0       	mov    0xc01ccfac,%eax
c0105240:	8b 40 04             	mov    0x4(%eax),%eax
c0105243:	ff d0                	call   *%eax
}
c0105245:	90                   	nop
c0105246:	89 ec                	mov    %ebp,%esp
c0105248:	5d                   	pop    %ebp
c0105249:	c3                   	ret    

c010524a <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c010524a:	55                   	push   %ebp
c010524b:	89 e5                	mov    %esp,%ebp
c010524d:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0105250:	a1 ac cf 1c c0       	mov    0xc01ccfac,%eax
c0105255:	8b 40 08             	mov    0x8(%eax),%eax
c0105258:	8b 55 0c             	mov    0xc(%ebp),%edx
c010525b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010525f:	8b 55 08             	mov    0x8(%ebp),%edx
c0105262:	89 14 24             	mov    %edx,(%esp)
c0105265:	ff d0                	call   *%eax
}
c0105267:	90                   	nop
c0105268:	89 ec                	mov    %ebp,%esp
c010526a:	5d                   	pop    %ebp
c010526b:	c3                   	ret    

c010526c <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c010526c:	55                   	push   %ebp
c010526d:	89 e5                	mov    %esp,%ebp
c010526f:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0105272:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0105279:	e8 24 fe ff ff       	call   c01050a2 <__intr_save>
c010527e:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105281:	a1 ac cf 1c c0       	mov    0xc01ccfac,%eax
c0105286:	8b 40 0c             	mov    0xc(%eax),%eax
c0105289:	8b 55 08             	mov    0x8(%ebp),%edx
c010528c:	89 14 24             	mov    %edx,(%esp)
c010528f:	ff d0                	call   *%eax
c0105291:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0105294:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105297:	89 04 24             	mov    %eax,(%esp)
c010529a:	e8 2f fe ff ff       	call   c01050ce <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c010529f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01052a3:	75 2d                	jne    c01052d2 <alloc_pages+0x66>
c01052a5:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c01052a9:	77 27                	ja     c01052d2 <alloc_pages+0x66>
c01052ab:	a1 44 d0 1c c0       	mov    0xc01cd044,%eax
c01052b0:	85 c0                	test   %eax,%eax
c01052b2:	74 1e                	je     c01052d2 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01052b4:	8b 55 08             	mov    0x8(%ebp),%edx
c01052b7:	a1 0c d1 1c c0       	mov    0xc01cd10c,%eax
c01052bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01052c3:	00 
c01052c4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01052c8:	89 04 24             	mov    %eax,(%esp)
c01052cb:	e8 d7 1d 00 00       	call   c01070a7 <swap_out>
    {
c01052d0:	eb a7                	jmp    c0105279 <alloc_pages+0xd>
    }
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01052d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01052d5:	89 ec                	mov    %ebp,%esp
c01052d7:	5d                   	pop    %ebp
c01052d8:	c3                   	ret    

c01052d9 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01052d9:	55                   	push   %ebp
c01052da:	89 e5                	mov    %esp,%ebp
c01052dc:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01052df:	e8 be fd ff ff       	call   c01050a2 <__intr_save>
c01052e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01052e7:	a1 ac cf 1c c0       	mov    0xc01ccfac,%eax
c01052ec:	8b 40 10             	mov    0x10(%eax),%eax
c01052ef:	8b 55 0c             	mov    0xc(%ebp),%edx
c01052f2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01052f6:	8b 55 08             	mov    0x8(%ebp),%edx
c01052f9:	89 14 24             	mov    %edx,(%esp)
c01052fc:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c01052fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105301:	89 04 24             	mov    %eax,(%esp)
c0105304:	e8 c5 fd ff ff       	call   c01050ce <__intr_restore>
}
c0105309:	90                   	nop
c010530a:	89 ec                	mov    %ebp,%esp
c010530c:	5d                   	pop    %ebp
c010530d:	c3                   	ret    

c010530e <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c010530e:	55                   	push   %ebp
c010530f:	89 e5                	mov    %esp,%ebp
c0105311:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0105314:	e8 89 fd ff ff       	call   c01050a2 <__intr_save>
c0105319:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c010531c:	a1 ac cf 1c c0       	mov    0xc01ccfac,%eax
c0105321:	8b 40 14             	mov    0x14(%eax),%eax
c0105324:	ff d0                	call   *%eax
c0105326:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0105329:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010532c:	89 04 24             	mov    %eax,(%esp)
c010532f:	e8 9a fd ff ff       	call   c01050ce <__intr_restore>
    return ret;
c0105334:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0105337:	89 ec                	mov    %ebp,%esp
c0105339:	5d                   	pop    %ebp
c010533a:	c3                   	ret    

c010533b <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c010533b:	55                   	push   %ebp
c010533c:	89 e5                	mov    %esp,%ebp
c010533e:	57                   	push   %edi
c010533f:	56                   	push   %esi
c0105340:	53                   	push   %ebx
c0105341:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0105347:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c010534e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0105355:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c010535c:	c7 04 24 cb ec 10 c0 	movl   $0xc010eccb,(%esp)
c0105363:	e8 0a b0 ff ff       	call   c0100372 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105368:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010536f:	e9 0c 01 00 00       	jmp    c0105480 <page_init+0x145>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105374:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105377:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010537a:	89 d0                	mov    %edx,%eax
c010537c:	c1 e0 02             	shl    $0x2,%eax
c010537f:	01 d0                	add    %edx,%eax
c0105381:	c1 e0 02             	shl    $0x2,%eax
c0105384:	01 c8                	add    %ecx,%eax
c0105386:	8b 50 08             	mov    0x8(%eax),%edx
c0105389:	8b 40 04             	mov    0x4(%eax),%eax
c010538c:	89 45 a0             	mov    %eax,-0x60(%ebp)
c010538f:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c0105392:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105395:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105398:	89 d0                	mov    %edx,%eax
c010539a:	c1 e0 02             	shl    $0x2,%eax
c010539d:	01 d0                	add    %edx,%eax
c010539f:	c1 e0 02             	shl    $0x2,%eax
c01053a2:	01 c8                	add    %ecx,%eax
c01053a4:	8b 48 0c             	mov    0xc(%eax),%ecx
c01053a7:	8b 58 10             	mov    0x10(%eax),%ebx
c01053aa:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01053ad:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c01053b0:	01 c8                	add    %ecx,%eax
c01053b2:	11 da                	adc    %ebx,%edx
c01053b4:	89 45 98             	mov    %eax,-0x68(%ebp)
c01053b7:	89 55 9c             	mov    %edx,-0x64(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01053ba:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01053bd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053c0:	89 d0                	mov    %edx,%eax
c01053c2:	c1 e0 02             	shl    $0x2,%eax
c01053c5:	01 d0                	add    %edx,%eax
c01053c7:	c1 e0 02             	shl    $0x2,%eax
c01053ca:	01 c8                	add    %ecx,%eax
c01053cc:	83 c0 14             	add    $0x14,%eax
c01053cf:	8b 00                	mov    (%eax),%eax
c01053d1:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c01053d7:	8b 45 98             	mov    -0x68(%ebp),%eax
c01053da:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01053dd:	83 c0 ff             	add    $0xffffffff,%eax
c01053e0:	83 d2 ff             	adc    $0xffffffff,%edx
c01053e3:	89 c6                	mov    %eax,%esi
c01053e5:	89 d7                	mov    %edx,%edi
c01053e7:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01053ea:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053ed:	89 d0                	mov    %edx,%eax
c01053ef:	c1 e0 02             	shl    $0x2,%eax
c01053f2:	01 d0                	add    %edx,%eax
c01053f4:	c1 e0 02             	shl    $0x2,%eax
c01053f7:	01 c8                	add    %ecx,%eax
c01053f9:	8b 48 0c             	mov    0xc(%eax),%ecx
c01053fc:	8b 58 10             	mov    0x10(%eax),%ebx
c01053ff:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0105405:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c0105409:	89 74 24 14          	mov    %esi,0x14(%esp)
c010540d:	89 7c 24 18          	mov    %edi,0x18(%esp)
c0105411:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0105414:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0105417:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010541b:	89 54 24 10          	mov    %edx,0x10(%esp)
c010541f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0105423:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c0105427:	c7 04 24 d8 ec 10 c0 	movl   $0xc010ecd8,(%esp)
c010542e:	e8 3f af ff ff       	call   c0100372 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0105433:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105436:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105439:	89 d0                	mov    %edx,%eax
c010543b:	c1 e0 02             	shl    $0x2,%eax
c010543e:	01 d0                	add    %edx,%eax
c0105440:	c1 e0 02             	shl    $0x2,%eax
c0105443:	01 c8                	add    %ecx,%eax
c0105445:	83 c0 14             	add    $0x14,%eax
c0105448:	8b 00                	mov    (%eax),%eax
c010544a:	83 f8 01             	cmp    $0x1,%eax
c010544d:	75 2e                	jne    c010547d <page_init+0x142>
            if (maxpa < end && begin < KMEMSIZE) {
c010544f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105452:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105455:	3b 45 98             	cmp    -0x68(%ebp),%eax
c0105458:	89 d0                	mov    %edx,%eax
c010545a:	1b 45 9c             	sbb    -0x64(%ebp),%eax
c010545d:	73 1e                	jae    c010547d <page_init+0x142>
c010545f:	ba ff ff ff 37       	mov    $0x37ffffff,%edx
c0105464:	b8 00 00 00 00       	mov    $0x0,%eax
c0105469:	3b 55 a0             	cmp    -0x60(%ebp),%edx
c010546c:	1b 45 a4             	sbb    -0x5c(%ebp),%eax
c010546f:	72 0c                	jb     c010547d <page_init+0x142>
                maxpa = end;
c0105471:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105474:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0105477:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010547a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    for (i = 0; i < memmap->nr_map; i ++) {
c010547d:	ff 45 dc             	incl   -0x24(%ebp)
c0105480:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105483:	8b 00                	mov    (%eax),%eax
c0105485:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105488:	0f 8c e6 fe ff ff    	jl     c0105374 <page_init+0x39>
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c010548e:	ba 00 00 00 38       	mov    $0x38000000,%edx
c0105493:	b8 00 00 00 00       	mov    $0x0,%eax
c0105498:	3b 55 e0             	cmp    -0x20(%ebp),%edx
c010549b:	1b 45 e4             	sbb    -0x1c(%ebp),%eax
c010549e:	73 0e                	jae    c01054ae <page_init+0x173>
        maxpa = KMEMSIZE;
c01054a0:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c01054a7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c01054ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01054b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01054b4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01054b8:	c1 ea 0c             	shr    $0xc,%edx
c01054bb:	a3 a4 cf 1c c0       	mov    %eax,0xc01ccfa4
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c01054c0:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
c01054c7:	b8 78 f2 1c c0       	mov    $0xc01cf278,%eax
c01054cc:	8d 50 ff             	lea    -0x1(%eax),%edx
c01054cf:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01054d2:	01 d0                	add    %edx,%eax
c01054d4:	89 45 bc             	mov    %eax,-0x44(%ebp)
c01054d7:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01054da:	ba 00 00 00 00       	mov    $0x0,%edx
c01054df:	f7 75 c0             	divl   -0x40(%ebp)
c01054e2:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01054e5:	29 d0                	sub    %edx,%eax
c01054e7:	a3 a0 cf 1c c0       	mov    %eax,0xc01ccfa0

    for (i = 0; i < npage; i ++) {
c01054ec:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01054f3:	eb 28                	jmp    c010551d <page_init+0x1e2>
        SetPageReserved(pages + i);
c01054f5:	8b 15 a0 cf 1c c0    	mov    0xc01ccfa0,%edx
c01054fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01054fe:	c1 e0 05             	shl    $0x5,%eax
c0105501:	01 d0                	add    %edx,%eax
c0105503:	83 c0 04             	add    $0x4,%eax
c0105506:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
c010550d:	89 45 90             	mov    %eax,-0x70(%ebp)
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105510:	8b 45 90             	mov    -0x70(%ebp),%eax
c0105513:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0105516:	0f ab 10             	bts    %edx,(%eax)
}
c0105519:	90                   	nop
    for (i = 0; i < npage; i ++) {
c010551a:	ff 45 dc             	incl   -0x24(%ebp)
c010551d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105520:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c0105525:	39 c2                	cmp    %eax,%edx
c0105527:	72 cc                	jb     c01054f5 <page_init+0x1ba>
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0105529:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c010552e:	c1 e0 05             	shl    $0x5,%eax
c0105531:	89 c2                	mov    %eax,%edx
c0105533:	a1 a0 cf 1c c0       	mov    0xc01ccfa0,%eax
c0105538:	01 d0                	add    %edx,%eax
c010553a:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010553d:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c0105544:	77 23                	ja     c0105569 <page_init+0x22e>
c0105546:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105549:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010554d:	c7 44 24 08 08 ed 10 	movl   $0xc010ed08,0x8(%esp)
c0105554:	c0 
c0105555:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
c010555c:	00 
c010555d:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105564:	e8 87 b8 ff ff       	call   c0100df0 <__panic>
c0105569:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010556c:	05 00 00 00 40       	add    $0x40000000,%eax
c0105571:	89 45 b4             	mov    %eax,-0x4c(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0105574:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010557b:	e9 53 01 00 00       	jmp    c01056d3 <page_init+0x398>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105580:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105583:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105586:	89 d0                	mov    %edx,%eax
c0105588:	c1 e0 02             	shl    $0x2,%eax
c010558b:	01 d0                	add    %edx,%eax
c010558d:	c1 e0 02             	shl    $0x2,%eax
c0105590:	01 c8                	add    %ecx,%eax
c0105592:	8b 50 08             	mov    0x8(%eax),%edx
c0105595:	8b 40 04             	mov    0x4(%eax),%eax
c0105598:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010559b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010559e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01055a1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01055a4:	89 d0                	mov    %edx,%eax
c01055a6:	c1 e0 02             	shl    $0x2,%eax
c01055a9:	01 d0                	add    %edx,%eax
c01055ab:	c1 e0 02             	shl    $0x2,%eax
c01055ae:	01 c8                	add    %ecx,%eax
c01055b0:	8b 48 0c             	mov    0xc(%eax),%ecx
c01055b3:	8b 58 10             	mov    0x10(%eax),%ebx
c01055b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055b9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01055bc:	01 c8                	add    %ecx,%eax
c01055be:	11 da                	adc    %ebx,%edx
c01055c0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01055c3:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01055c6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01055c9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01055cc:	89 d0                	mov    %edx,%eax
c01055ce:	c1 e0 02             	shl    $0x2,%eax
c01055d1:	01 d0                	add    %edx,%eax
c01055d3:	c1 e0 02             	shl    $0x2,%eax
c01055d6:	01 c8                	add    %ecx,%eax
c01055d8:	83 c0 14             	add    $0x14,%eax
c01055db:	8b 00                	mov    (%eax),%eax
c01055dd:	83 f8 01             	cmp    $0x1,%eax
c01055e0:	0f 85 ea 00 00 00    	jne    c01056d0 <page_init+0x395>
            if (begin < freemem) {
c01055e6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01055e9:	ba 00 00 00 00       	mov    $0x0,%edx
c01055ee:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c01055f1:	39 45 d0             	cmp    %eax,-0x30(%ebp)
c01055f4:	19 d1                	sbb    %edx,%ecx
c01055f6:	73 0d                	jae    c0105605 <page_init+0x2ca>
                begin = freemem;
c01055f8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01055fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01055fe:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0105605:	ba 00 00 00 38       	mov    $0x38000000,%edx
c010560a:	b8 00 00 00 00       	mov    $0x0,%eax
c010560f:	3b 55 c8             	cmp    -0x38(%ebp),%edx
c0105612:	1b 45 cc             	sbb    -0x34(%ebp),%eax
c0105615:	73 0e                	jae    c0105625 <page_init+0x2ea>
                end = KMEMSIZE;
c0105617:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c010561e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0105625:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105628:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010562b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010562e:	89 d0                	mov    %edx,%eax
c0105630:	1b 45 cc             	sbb    -0x34(%ebp),%eax
c0105633:	0f 83 97 00 00 00    	jae    c01056d0 <page_init+0x395>
                begin = ROUNDUP(begin, PGSIZE);
c0105639:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
c0105640:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105643:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105646:	01 d0                	add    %edx,%eax
c0105648:	48                   	dec    %eax
c0105649:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010564c:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010564f:	ba 00 00 00 00       	mov    $0x0,%edx
c0105654:	f7 75 b0             	divl   -0x50(%ebp)
c0105657:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010565a:	29 d0                	sub    %edx,%eax
c010565c:	ba 00 00 00 00       	mov    $0x0,%edx
c0105661:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105664:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105667:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010566a:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010566d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105670:	ba 00 00 00 00       	mov    $0x0,%edx
c0105675:	89 c7                	mov    %eax,%edi
c0105677:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c010567d:	89 7d 80             	mov    %edi,-0x80(%ebp)
c0105680:	89 d0                	mov    %edx,%eax
c0105682:	83 e0 00             	and    $0x0,%eax
c0105685:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0105688:	8b 45 80             	mov    -0x80(%ebp),%eax
c010568b:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010568e:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105691:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c0105694:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105697:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010569a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010569d:	89 d0                	mov    %edx,%eax
c010569f:	1b 45 cc             	sbb    -0x34(%ebp),%eax
c01056a2:	73 2c                	jae    c01056d0 <page_init+0x395>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c01056a4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01056a7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01056aa:	2b 45 d0             	sub    -0x30(%ebp),%eax
c01056ad:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c01056b0:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01056b4:	c1 ea 0c             	shr    $0xc,%edx
c01056b7:	89 c3                	mov    %eax,%ebx
c01056b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01056bc:	89 04 24             	mov    %eax,(%esp)
c01056bf:	e8 a0 f8 ff ff       	call   c0104f64 <pa2page>
c01056c4:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01056c8:	89 04 24             	mov    %eax,(%esp)
c01056cb:	e8 7a fb ff ff       	call   c010524a <init_memmap>
    for (i = 0; i < memmap->nr_map; i ++) {
c01056d0:	ff 45 dc             	incl   -0x24(%ebp)
c01056d3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01056d6:	8b 00                	mov    (%eax),%eax
c01056d8:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01056db:	0f 8c 9f fe ff ff    	jl     c0105580 <page_init+0x245>
                }
            }
        }
    }
}
c01056e1:	90                   	nop
c01056e2:	90                   	nop
c01056e3:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01056e9:	5b                   	pop    %ebx
c01056ea:	5e                   	pop    %esi
c01056eb:	5f                   	pop    %edi
c01056ec:	5d                   	pop    %ebp
c01056ed:	c3                   	ret    

c01056ee <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01056ee:	55                   	push   %ebp
c01056ef:	89 e5                	mov    %esp,%ebp
c01056f1:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01056f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01056f7:	33 45 14             	xor    0x14(%ebp),%eax
c01056fa:	25 ff 0f 00 00       	and    $0xfff,%eax
c01056ff:	85 c0                	test   %eax,%eax
c0105701:	74 24                	je     c0105727 <boot_map_segment+0x39>
c0105703:	c7 44 24 0c 3a ed 10 	movl   $0xc010ed3a,0xc(%esp)
c010570a:	c0 
c010570b:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0105712:	c0 
c0105713:	c7 44 24 04 08 01 00 	movl   $0x108,0x4(%esp)
c010571a:	00 
c010571b:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105722:	e8 c9 b6 ff ff       	call   c0100df0 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0105727:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c010572e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105731:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105736:	89 c2                	mov    %eax,%edx
c0105738:	8b 45 10             	mov    0x10(%ebp),%eax
c010573b:	01 c2                	add    %eax,%edx
c010573d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105740:	01 d0                	add    %edx,%eax
c0105742:	48                   	dec    %eax
c0105743:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105746:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105749:	ba 00 00 00 00       	mov    $0x0,%edx
c010574e:	f7 75 f0             	divl   -0x10(%ebp)
c0105751:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105754:	29 d0                	sub    %edx,%eax
c0105756:	c1 e8 0c             	shr    $0xc,%eax
c0105759:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c010575c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010575f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105762:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105765:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010576a:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c010576d:	8b 45 14             	mov    0x14(%ebp),%eax
c0105770:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105773:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105776:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010577b:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010577e:	eb 68                	jmp    c01057e8 <boot_map_segment+0xfa>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0105780:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105787:	00 
c0105788:	8b 45 0c             	mov    0xc(%ebp),%eax
c010578b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010578f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105792:	89 04 24             	mov    %eax,(%esp)
c0105795:	e8 8d 01 00 00       	call   c0105927 <get_pte>
c010579a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c010579d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01057a1:	75 24                	jne    c01057c7 <boot_map_segment+0xd9>
c01057a3:	c7 44 24 0c 66 ed 10 	movl   $0xc010ed66,0xc(%esp)
c01057aa:	c0 
c01057ab:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c01057b2:	c0 
c01057b3:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c01057ba:	00 
c01057bb:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01057c2:	e8 29 b6 ff ff       	call   c0100df0 <__panic>
        *ptep = pa | PTE_P | perm;
c01057c7:	8b 45 14             	mov    0x14(%ebp),%eax
c01057ca:	0b 45 18             	or     0x18(%ebp),%eax
c01057cd:	83 c8 01             	or     $0x1,%eax
c01057d0:	89 c2                	mov    %eax,%edx
c01057d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01057d5:	89 10                	mov    %edx,(%eax)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01057d7:	ff 4d f4             	decl   -0xc(%ebp)
c01057da:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01057e1:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01057e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01057ec:	75 92                	jne    c0105780 <boot_map_segment+0x92>
    }
}
c01057ee:	90                   	nop
c01057ef:	90                   	nop
c01057f0:	89 ec                	mov    %ebp,%esp
c01057f2:	5d                   	pop    %ebp
c01057f3:	c3                   	ret    

c01057f4 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01057f4:	55                   	push   %ebp
c01057f5:	89 e5                	mov    %esp,%ebp
c01057f7:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c01057fa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105801:	e8 66 fa ff ff       	call   c010526c <alloc_pages>
c0105806:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105809:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010580d:	75 1c                	jne    c010582b <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c010580f:	c7 44 24 08 73 ed 10 	movl   $0xc010ed73,0x8(%esp)
c0105816:	c0 
c0105817:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c010581e:	00 
c010581f:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105826:	e8 c5 b5 ff ff       	call   c0100df0 <__panic>
    }
    return page2kva(p);
c010582b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010582e:	89 04 24             	mov    %eax,(%esp)
c0105831:	e8 76 f7 ff ff       	call   c0104fac <page2kva>
}
c0105836:	89 ec                	mov    %ebp,%esp
c0105838:	5d                   	pop    %ebp
c0105839:	c3                   	ret    

c010583a <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c010583a:	55                   	push   %ebp
c010583b:	89 e5                	mov    %esp,%ebp
c010583d:	83 ec 38             	sub    $0x38,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0105840:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0105845:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105848:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010584f:	77 23                	ja     c0105874 <pmm_init+0x3a>
c0105851:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105854:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105858:	c7 44 24 08 08 ed 10 	movl   $0xc010ed08,0x8(%esp)
c010585f:	c0 
c0105860:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0105867:	00 
c0105868:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c010586f:	e8 7c b5 ff ff       	call   c0100df0 <__panic>
c0105874:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105877:	05 00 00 00 40       	add    $0x40000000,%eax
c010587c:	a3 a8 cf 1c c0       	mov    %eax,0xc01ccfa8
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105881:	e8 8e f9 ff ff       	call   c0105214 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0105886:	e8 b0 fa ff ff       	call   c010533b <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c010588b:	e8 b7 09 00 00       	call   c0106247 <check_alloc_page>

    check_pgdir();
c0105890:	e8 d3 09 00 00       	call   c0106268 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0105895:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c010589a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010589d:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01058a4:	77 23                	ja     c01058c9 <pmm_init+0x8f>
c01058a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058a9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01058ad:	c7 44 24 08 08 ed 10 	movl   $0xc010ed08,0x8(%esp)
c01058b4:	c0 
c01058b5:	c7 44 24 04 3a 01 00 	movl   $0x13a,0x4(%esp)
c01058bc:	00 
c01058bd:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01058c4:	e8 27 b5 ff ff       	call   c0100df0 <__panic>
c01058c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058cc:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c01058d2:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c01058d7:	05 ac 0f 00 00       	add    $0xfac,%eax
c01058dc:	83 ca 03             	or     $0x3,%edx
c01058df:	89 10                	mov    %edx,(%eax)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c01058e1:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c01058e6:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c01058ed:	00 
c01058ee:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01058f5:	00 
c01058f6:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c01058fd:	38 
c01058fe:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0105905:	c0 
c0105906:	89 04 24             	mov    %eax,(%esp)
c0105909:	e8 e0 fd ff ff       	call   c01056ee <boot_map_segment>

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c010590e:	e8 15 f8 ff ff       	call   c0105128 <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0105913:	e8 ee 0f 00 00       	call   c0106906 <check_boot_pgdir>

    print_pgdir();
c0105918:	e8 6b 14 00 00       	call   c0106d88 <print_pgdir>
    
    kmalloc_init();
c010591d:	e8 70 f3 ff ff       	call   c0104c92 <kmalloc_init>

}
c0105922:	90                   	nop
c0105923:	89 ec                	mov    %ebp,%esp
c0105925:	5d                   	pop    %ebp
c0105926:	c3                   	ret    

c0105927 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0105927:	55                   	push   %ebp
c0105928:	89 e5                	mov    %esp,%ebp
c010592a:	83 ec 38             	sub    $0x38,%esp
     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
     */
#if 1
    pde_t *pdep = PDX(la) + pgdir;  // (1) find page directory entry
c010592d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105930:	c1 e8 16             	shr    $0x16,%eax
c0105933:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010593a:	8b 45 08             	mov    0x8(%ebp),%eax
c010593d:	01 d0                	add    %edx,%eax
c010593f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!(*pdep & PTE_P)) {         // (2) check if entry is not present
c0105942:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105945:	8b 00                	mov    (%eax),%eax
c0105947:	83 e0 01             	and    $0x1,%eax
c010594a:	85 c0                	test   %eax,%eax
c010594c:	0f 85 af 00 00 00    	jne    c0105a01 <get_pte+0xda>
                          // (4) set page reference
        // (5) get linear address of page
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
        struct Page *page;
        if (!create || (page = alloc_page()) == NULL) {
c0105952:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105956:	74 15                	je     c010596d <get_pte+0x46>
c0105958:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010595f:	e8 08 f9 ff ff       	call   c010526c <alloc_pages>
c0105964:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105967:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010596b:	75 0a                	jne    c0105977 <get_pte+0x50>
            return NULL;
c010596d:	b8 00 00 00 00       	mov    $0x0,%eax
c0105972:	e9 ed 00 00 00       	jmp    c0105a64 <get_pte+0x13d>
        }
        set_page_ref(page, 1);
c0105977:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010597e:	00 
c010597f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105982:	89 04 24             	mov    %eax,(%esp)
c0105985:	e8 dc f6 ff ff       	call   c0105066 <set_page_ref>
        uintptr_t pa = page2pa(page);  // the physical address of page table
c010598a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010598d:	89 04 24             	mov    %eax,(%esp)
c0105990:	e8 b7 f5 ff ff       	call   c0104f4c <page2pa>
c0105995:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(pa), 0, PGSIZE);
c0105998:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010599b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010599e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01059a1:	c1 e8 0c             	shr    $0xc,%eax
c01059a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01059a7:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c01059ac:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01059af:	72 23                	jb     c01059d4 <get_pte+0xad>
c01059b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01059b4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01059b8:	c7 44 24 08 64 ec 10 	movl   $0xc010ec64,0x8(%esp)
c01059bf:	c0 
c01059c0:	c7 44 24 04 7d 01 00 	movl   $0x17d,0x4(%esp)
c01059c7:	00 
c01059c8:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01059cf:	e8 1c b4 ff ff       	call   c0100df0 <__panic>
c01059d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01059d7:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01059dc:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01059e3:	00 
c01059e4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01059eb:	00 
c01059ec:	89 04 24             	mov    %eax,(%esp)
c01059ef:	e8 41 82 00 00       	call   c010dc35 <memset>
        *pdep = pa | PTE_P | PTE_W | PTE_U;
c01059f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01059f7:	83 c8 07             	or     $0x7,%eax
c01059fa:	89 c2                	mov    %eax,%edx
c01059fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059ff:	89 10                	mov    %edx,(%eax)
    }

    pte_t *ptep = (pte_t *)KADDR(PDE_ADDR(*pdep)) + PTX(la);
c0105a01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a04:	8b 00                	mov    (%eax),%eax
c0105a06:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105a0b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105a0e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a11:	c1 e8 0c             	shr    $0xc,%eax
c0105a14:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105a17:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c0105a1c:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105a1f:	72 23                	jb     c0105a44 <get_pte+0x11d>
c0105a21:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a24:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105a28:	c7 44 24 08 64 ec 10 	movl   $0xc010ec64,0x8(%esp)
c0105a2f:	c0 
c0105a30:	c7 44 24 04 81 01 00 	movl   $0x181,0x4(%esp)
c0105a37:	00 
c0105a38:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105a3f:	e8 ac b3 ff ff       	call   c0100df0 <__panic>
c0105a44:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105a47:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105a4c:	89 c2                	mov    %eax,%edx
c0105a4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a51:	c1 e8 0c             	shr    $0xc,%eax
c0105a54:	25 ff 03 00 00       	and    $0x3ff,%eax
c0105a59:	c1 e0 02             	shl    $0x2,%eax
c0105a5c:	01 d0                	add    %edx,%eax
c0105a5e:	89 45 d8             	mov    %eax,-0x28(%ebp)
    return ptep;  // (8) return page table entry
c0105a61:	8b 45 d8             	mov    -0x28(%ebp),%eax
#endif
}
c0105a64:	89 ec                	mov    %ebp,%esp
c0105a66:	5d                   	pop    %ebp
c0105a67:	c3                   	ret    

c0105a68 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105a68:	55                   	push   %ebp
c0105a69:	89 e5                	mov    %esp,%ebp
c0105a6b:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105a6e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105a75:	00 
c0105a76:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a79:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a80:	89 04 24             	mov    %eax,(%esp)
c0105a83:	e8 9f fe ff ff       	call   c0105927 <get_pte>
c0105a88:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105a8b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105a8f:	74 08                	je     c0105a99 <get_page+0x31>
        *ptep_store = ptep;
c0105a91:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a94:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105a97:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105a99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a9d:	74 1b                	je     c0105aba <get_page+0x52>
c0105a9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105aa2:	8b 00                	mov    (%eax),%eax
c0105aa4:	83 e0 01             	and    $0x1,%eax
c0105aa7:	85 c0                	test   %eax,%eax
c0105aa9:	74 0f                	je     c0105aba <get_page+0x52>
        return pte2page(*ptep);
c0105aab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105aae:	8b 00                	mov    (%eax),%eax
c0105ab0:	89 04 24             	mov    %eax,(%esp)
c0105ab3:	e8 4a f5 ff ff       	call   c0105002 <pte2page>
c0105ab8:	eb 05                	jmp    c0105abf <get_page+0x57>
    }
    return NULL;
c0105aba:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105abf:	89 ec                	mov    %ebp,%esp
c0105ac1:	5d                   	pop    %ebp
c0105ac2:	c3                   	ret    

c0105ac3 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105ac3:	55                   	push   %ebp
c0105ac4:	89 e5                	mov    %esp,%ebp
c0105ac6:	83 ec 28             	sub    $0x28,%esp
     *                        edited are the ones currently in use by the processor.
     * DEFINEs:
     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
     */
#if 1
    if (*ptep & PTE_P)  //(1) check if this page table entry is present
c0105ac9:	8b 45 10             	mov    0x10(%ebp),%eax
c0105acc:	8b 00                	mov    (%eax),%eax
c0105ace:	83 e0 01             	and    $0x1,%eax
c0105ad1:	85 c0                	test   %eax,%eax
c0105ad3:	74 4d                	je     c0105b22 <page_remove_pte+0x5f>
    {
        struct Page *page = pte2page(*ptep);  //(2) find corresponding page to pte
c0105ad5:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ad8:	8b 00                	mov    (%eax),%eax
c0105ada:	89 04 24             	mov    %eax,(%esp)
c0105add:	e8 20 f5 ff ff       	call   c0105002 <pte2page>
c0105ae2:	89 45 f4             	mov    %eax,-0xc(%ebp)

        if (page_ref_dec(page) == 0)  //(3) decrease page reference
c0105ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ae8:	89 04 24             	mov    %eax,(%esp)
c0105aeb:	e8 9b f5 ff ff       	call   c010508b <page_ref_dec>
c0105af0:	85 c0                	test   %eax,%eax
c0105af2:	75 13                	jne    c0105b07 <page_remove_pte+0x44>
        {                             //free_page means add this page to freeList in FIFO
            free_page(page);          //(4) and free this page when page reference reachs 0
c0105af4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105afb:	00 
c0105afc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105aff:	89 04 24             	mov    %eax,(%esp)
c0105b02:	e8 d2 f7 ff ff       	call   c01052d9 <free_pages>
        }
        *ptep = 0;                  //(5) clear second page table entry
c0105b07:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b0a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);  //(6) flush tlb
c0105b10:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b13:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b17:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b1a:	89 04 24             	mov    %eax,(%esp)
c0105b1d:	e8 f0 05 00 00       	call   c0106112 <tlb_invalidate>
    }
#endif
}
c0105b22:	90                   	nop
c0105b23:	89 ec                	mov    %ebp,%esp
c0105b25:	5d                   	pop    %ebp
c0105b26:	c3                   	ret    

c0105b27 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105b27:	55                   	push   %ebp
c0105b28:	89 e5                	mov    %esp,%ebp
c0105b2a:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105b2d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b30:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b35:	85 c0                	test   %eax,%eax
c0105b37:	75 0c                	jne    c0105b45 <unmap_range+0x1e>
c0105b39:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b3c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105b41:	85 c0                	test   %eax,%eax
c0105b43:	74 24                	je     c0105b69 <unmap_range+0x42>
c0105b45:	c7 44 24 0c 8c ed 10 	movl   $0xc010ed8c,0xc(%esp)
c0105b4c:	c0 
c0105b4d:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0105b54:	c0 
c0105b55:	c7 44 24 04 b9 01 00 	movl   $0x1b9,0x4(%esp)
c0105b5c:	00 
c0105b5d:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105b64:	e8 87 b2 ff ff       	call   c0100df0 <__panic>
    assert(USER_ACCESS(start, end));
c0105b69:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105b70:	76 11                	jbe    c0105b83 <unmap_range+0x5c>
c0105b72:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b75:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b78:	73 09                	jae    c0105b83 <unmap_range+0x5c>
c0105b7a:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105b81:	76 24                	jbe    c0105ba7 <unmap_range+0x80>
c0105b83:	c7 44 24 0c b5 ed 10 	movl   $0xc010edb5,0xc(%esp)
c0105b8a:	c0 
c0105b8b:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0105b92:	c0 
c0105b93:	c7 44 24 04 ba 01 00 	movl   $0x1ba,0x4(%esp)
c0105b9a:	00 
c0105b9b:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105ba2:	e8 49 b2 ff ff       	call   c0100df0 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105ba7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105bae:	00 
c0105baf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bb2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105bb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bb9:	89 04 24             	mov    %eax,(%esp)
c0105bbc:	e8 66 fd ff ff       	call   c0105927 <get_pte>
c0105bc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105bc4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105bc8:	75 18                	jne    c0105be2 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105bca:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bcd:	05 00 00 40 00       	add    $0x400000,%eax
c0105bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105bd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105bd8:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105bdd:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105be0:	eb 29                	jmp    c0105c0b <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105be2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105be5:	8b 00                	mov    (%eax),%eax
c0105be7:	85 c0                	test   %eax,%eax
c0105be9:	74 19                	je     c0105c04 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105beb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bee:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105bf2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bf5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105bf9:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bfc:	89 04 24             	mov    %eax,(%esp)
c0105bff:	e8 bf fe ff ff       	call   c0105ac3 <page_remove_pte>
        }
        start += PGSIZE;
c0105c04:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105c0b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105c0f:	74 08                	je     c0105c19 <unmap_range+0xf2>
c0105c11:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c14:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c17:	72 8e                	jb     c0105ba7 <unmap_range+0x80>
}
c0105c19:	90                   	nop
c0105c1a:	89 ec                	mov    %ebp,%esp
c0105c1c:	5d                   	pop    %ebp
c0105c1d:	c3                   	ret    

c0105c1e <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105c1e:	55                   	push   %ebp
c0105c1f:	89 e5                	mov    %esp,%ebp
c0105c21:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105c24:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c27:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c2c:	85 c0                	test   %eax,%eax
c0105c2e:	75 0c                	jne    c0105c3c <exit_range+0x1e>
c0105c30:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c33:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105c38:	85 c0                	test   %eax,%eax
c0105c3a:	74 24                	je     c0105c60 <exit_range+0x42>
c0105c3c:	c7 44 24 0c 8c ed 10 	movl   $0xc010ed8c,0xc(%esp)
c0105c43:	c0 
c0105c44:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0105c4b:	c0 
c0105c4c:	c7 44 24 04 cb 01 00 	movl   $0x1cb,0x4(%esp)
c0105c53:	00 
c0105c54:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105c5b:	e8 90 b1 ff ff       	call   c0100df0 <__panic>
    assert(USER_ACCESS(start, end));
c0105c60:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105c67:	76 11                	jbe    c0105c7a <exit_range+0x5c>
c0105c69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c6c:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c6f:	73 09                	jae    c0105c7a <exit_range+0x5c>
c0105c71:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105c78:	76 24                	jbe    c0105c9e <exit_range+0x80>
c0105c7a:	c7 44 24 0c b5 ed 10 	movl   $0xc010edb5,0xc(%esp)
c0105c81:	c0 
c0105c82:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0105c89:	c0 
c0105c8a:	c7 44 24 04 cc 01 00 	movl   $0x1cc,0x4(%esp)
c0105c91:	00 
c0105c92:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105c99:	e8 52 b1 ff ff       	call   c0100df0 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105c9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ca1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105ca4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ca7:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105cac:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105caf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105cb2:	c1 e8 16             	shr    $0x16,%eax
c0105cb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105cb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cbb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105cc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cc5:	01 d0                	add    %edx,%eax
c0105cc7:	8b 00                	mov    (%eax),%eax
c0105cc9:	83 e0 01             	and    $0x1,%eax
c0105ccc:	85 c0                	test   %eax,%eax
c0105cce:	74 3e                	je     c0105d0e <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105cd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cd3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105cda:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cdd:	01 d0                	add    %edx,%eax
c0105cdf:	8b 00                	mov    (%eax),%eax
c0105ce1:	89 04 24             	mov    %eax,(%esp)
c0105ce4:	e8 59 f3 ff ff       	call   c0105042 <pde2page>
c0105ce9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105cf0:	00 
c0105cf1:	89 04 24             	mov    %eax,(%esp)
c0105cf4:	e8 e0 f5 ff ff       	call   c01052d9 <free_pages>
            pgdir[pde_idx] = 0;
c0105cf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cfc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105d03:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d06:	01 d0                	add    %edx,%eax
c0105d08:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105d0e:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105d15:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105d19:	74 08                	je     c0105d23 <exit_range+0x105>
c0105d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d1e:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105d21:	72 8c                	jb     c0105caf <exit_range+0x91>
}
c0105d23:	90                   	nop
c0105d24:	89 ec                	mov    %ebp,%esp
c0105d26:	5d                   	pop    %ebp
c0105d27:	c3                   	ret    

c0105d28 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105d28:	55                   	push   %ebp
c0105d29:	89 e5                	mov    %esp,%ebp
c0105d2b:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105d2e:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d31:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105d36:	85 c0                	test   %eax,%eax
c0105d38:	75 0c                	jne    c0105d46 <copy_range+0x1e>
c0105d3a:	8b 45 14             	mov    0x14(%ebp),%eax
c0105d3d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105d42:	85 c0                	test   %eax,%eax
c0105d44:	74 24                	je     c0105d6a <copy_range+0x42>
c0105d46:	c7 44 24 0c 8c ed 10 	movl   $0xc010ed8c,0xc(%esp)
c0105d4d:	c0 
c0105d4e:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0105d55:	c0 
c0105d56:	c7 44 24 04 e1 01 00 	movl   $0x1e1,0x4(%esp)
c0105d5d:	00 
c0105d5e:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105d65:	e8 86 b0 ff ff       	call   c0100df0 <__panic>
    assert(USER_ACCESS(start, end));
c0105d6a:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105d71:	76 11                	jbe    c0105d84 <copy_range+0x5c>
c0105d73:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d76:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105d79:	73 09                	jae    c0105d84 <copy_range+0x5c>
c0105d7b:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105d82:	76 24                	jbe    c0105da8 <copy_range+0x80>
c0105d84:	c7 44 24 0c b5 ed 10 	movl   $0xc010edb5,0xc(%esp)
c0105d8b:	c0 
c0105d8c:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0105d93:	c0 
c0105d94:	c7 44 24 04 e2 01 00 	movl   $0x1e2,0x4(%esp)
c0105d9b:	00 
c0105d9c:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105da3:	e8 48 b0 ff ff       	call   c0100df0 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105da8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105daf:	00 
c0105db0:	8b 45 10             	mov    0x10(%ebp),%eax
c0105db3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105db7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105dba:	89 04 24             	mov    %eax,(%esp)
c0105dbd:	e8 65 fb ff ff       	call   c0105927 <get_pte>
c0105dc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (ptep == NULL) {
c0105dc5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105dc9:	75 1b                	jne    c0105de6 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105dcb:	8b 45 10             	mov    0x10(%ebp),%eax
c0105dce:	05 00 00 40 00       	add    $0x400000,%eax
c0105dd3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0105dd6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105dd9:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105dde:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105de1:	e9 0f 02 00 00       	jmp    c0105ff5 <copy_range+0x2cd>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105de6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105de9:	8b 00                	mov    (%eax),%eax
c0105deb:	83 e0 01             	and    $0x1,%eax
c0105dee:	85 c0                	test   %eax,%eax
c0105df0:	0f 84 f8 01 00 00    	je     c0105fee <copy_range+0x2c6>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105df6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105dfd:	00 
c0105dfe:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e01:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e05:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e08:	89 04 24             	mov    %eax,(%esp)
c0105e0b:	e8 17 fb ff ff       	call   c0105927 <get_pte>
c0105e10:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105e13:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105e17:	75 0a                	jne    c0105e23 <copy_range+0xfb>
                return -E_NO_MEM;
c0105e19:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105e1e:	e9 e9 01 00 00       	jmp    c010600c <copy_range+0x2e4>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105e23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e26:	8b 00                	mov    (%eax),%eax
c0105e28:	83 e0 07             	and    $0x7,%eax
c0105e2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e31:	8b 00                	mov    (%eax),%eax
c0105e33:	89 04 24             	mov    %eax,(%esp)
c0105e36:	e8 c7 f1 ff ff       	call   c0105002 <pte2page>
c0105e3b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
            //struct Page *npage=alloc_page();
        assert(page!=NULL);
c0105e3e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105e42:	75 24                	jne    c0105e68 <copy_range+0x140>
c0105e44:	c7 44 24 0c cd ed 10 	movl   $0xc010edcd,0xc(%esp)
c0105e4b:	c0 
c0105e4c:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0105e53:	c0 
c0105e54:	c7 44 24 04 f5 01 00 	movl   $0x1f5,0x4(%esp)
c0105e5b:	00 
c0105e5c:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105e63:	e8 88 af ff ff       	call   c0100df0 <__panic>
            //assert(npage!=NULL);
        int ret=0;
c0105e68:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
            // 如果启用写时复制
            if(share)
c0105e6f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0105e73:	74 69                	je     c0105ede <copy_range+0x1b6>
            {
                cprintf("Sharing the page 0x%x\n", page2kva(page));
c0105e75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e78:	89 04 24             	mov    %eax,(%esp)
c0105e7b:	e8 2c f1 ff ff       	call   c0104fac <page2kva>
c0105e80:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e84:	c7 04 24 d8 ed 10 c0 	movl   $0xc010edd8,(%esp)
c0105e8b:	e8 e2 a4 ff ff       	call   c0100372 <cprintf>
                // 在两个PTE上均设置为只读
                page_insert(from, page, start, perm & ~PTE_W);
c0105e90:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105e93:	83 e0 fd             	and    $0xfffffffd,%eax
c0105e96:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105e9a:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e9d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ea1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ea4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ea8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105eab:	89 04 24             	mov    %eax,(%esp)
c0105eae:	e8 a4 01 00 00       	call   c0106057 <page_insert>
                ret = page_insert(to, page, start, perm & ~PTE_W);
c0105eb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105eb6:	83 e0 fd             	and    $0xfffffffd,%eax
c0105eb9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105ebd:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ec0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ec4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ec7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ecb:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ece:	89 04 24             	mov    %eax,(%esp)
c0105ed1:	e8 81 01 00 00       	call   c0106057 <page_insert>
c0105ed6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105ed9:	e9 e6 00 00 00       	jmp    c0105fc4 <copy_range+0x29c>
            // 完整拷贝内存
            else
            {
                // alloc a page for process B
                // 目标页面地址
                struct Page *npage = alloc_page();
c0105ede:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105ee5:	e8 82 f3 ff ff       	call   c010526c <alloc_pages>
c0105eea:	89 45 e0             	mov    %eax,-0x20(%ebp)
                assert(page!=NULL);
c0105eed:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105ef1:	75 24                	jne    c0105f17 <copy_range+0x1ef>
c0105ef3:	c7 44 24 0c cd ed 10 	movl   $0xc010edcd,0xc(%esp)
c0105efa:	c0 
c0105efb:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0105f02:	c0 
c0105f03:	c7 44 24 04 14 02 00 	movl   $0x214,0x4(%esp)
c0105f0a:	00 
c0105f0b:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105f12:	e8 d9 ae ff ff       	call   c0100df0 <__panic>
                assert(npage!=NULL);
c0105f17:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105f1b:	75 24                	jne    c0105f41 <copy_range+0x219>
c0105f1d:	c7 44 24 0c ef ed 10 	movl   $0xc010edef,0xc(%esp)
c0105f24:	c0 
c0105f25:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0105f2c:	c0 
c0105f2d:	c7 44 24 04 15 02 00 	movl   $0x215,0x4(%esp)
c0105f34:	00 
c0105f35:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105f3c:	e8 af ae ff ff       	call   c0100df0 <__panic>
                * (2) find dst_kvaddr: the kernel virtual address of npage
                * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
                * (4) build the map of phy addr of  nage with the linear addr start
                */
                uintptr_t src_kvaddr, dst_kvaddr;
                src_kvaddr = page2kva(page);
c0105f41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105f44:	89 04 24             	mov    %eax,(%esp)
c0105f47:	e8 60 f0 ff ff       	call   c0104fac <page2kva>
c0105f4c:	89 45 dc             	mov    %eax,-0x24(%ebp)
                dst_kvaddr = page2kva(npage);
c0105f4f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105f52:	89 04 24             	mov    %eax,(%esp)
c0105f55:	e8 52 f0 ff ff       	call   c0104fac <page2kva>
c0105f5a:	89 45 d8             	mov    %eax,-0x28(%ebp)
                memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0105f5d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105f60:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105f63:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105f6a:	00 
c0105f6b:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105f6f:	89 04 24             	mov    %eax,(%esp)
c0105f72:	e8 a3 7d 00 00       	call   c010dd1a <memcpy>
                ret = page_insert(to, npage, start, perm);
c0105f77:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105f7a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105f7e:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f81:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f85:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105f88:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f8f:	89 04 24             	mov    %eax,(%esp)
c0105f92:	e8 c0 00 00 00       	call   c0106057 <page_insert>
c0105f97:	89 45 f4             	mov    %eax,-0xc(%ebp)
                assert(ret == 0);
c0105f9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f9e:	74 24                	je     c0105fc4 <copy_range+0x29c>
c0105fa0:	c7 44 24 0c fb ed 10 	movl   $0xc010edfb,0xc(%esp)
c0105fa7:	c0 
c0105fa8:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0105faf:	c0 
c0105fb0:	c7 44 24 04 2a 02 00 	movl   $0x22a,0x4(%esp)
c0105fb7:	00 
c0105fb8:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105fbf:	e8 2c ae ff ff       	call   c0100df0 <__panic>
            }
        assert(ret == 0);
c0105fc4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105fc8:	74 24                	je     c0105fee <copy_range+0x2c6>
c0105fca:	c7 44 24 0c fb ed 10 	movl   $0xc010edfb,0xc(%esp)
c0105fd1:	c0 
c0105fd2:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0105fd9:	c0 
c0105fda:	c7 44 24 04 2c 02 00 	movl   $0x22c,0x4(%esp)
c0105fe1:	00 
c0105fe2:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0105fe9:	e8 02 ae ff ff       	call   c0100df0 <__panic>
        }
        start += PGSIZE;
c0105fee:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105ff5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105ff9:	74 0c                	je     c0106007 <copy_range+0x2df>
c0105ffb:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ffe:	3b 45 14             	cmp    0x14(%ebp),%eax
c0106001:	0f 82 a1 fd ff ff    	jb     c0105da8 <copy_range+0x80>
    return 0;
c0106007:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010600c:	89 ec                	mov    %ebp,%esp
c010600e:	5d                   	pop    %ebp
c010600f:	c3                   	ret    

c0106010 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0106010:	55                   	push   %ebp
c0106011:	89 e5                	mov    %esp,%ebp
c0106013:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0106016:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010601d:	00 
c010601e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106021:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106025:	8b 45 08             	mov    0x8(%ebp),%eax
c0106028:	89 04 24             	mov    %eax,(%esp)
c010602b:	e8 f7 f8 ff ff       	call   c0105927 <get_pte>
c0106030:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0106033:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106037:	74 19                	je     c0106052 <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0106039:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010603c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106040:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106043:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106047:	8b 45 08             	mov    0x8(%ebp),%eax
c010604a:	89 04 24             	mov    %eax,(%esp)
c010604d:	e8 71 fa ff ff       	call   c0105ac3 <page_remove_pte>
    }
}
c0106052:	90                   	nop
c0106053:	89 ec                	mov    %ebp,%esp
c0106055:	5d                   	pop    %ebp
c0106056:	c3                   	ret    

c0106057 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0106057:	55                   	push   %ebp
c0106058:	89 e5                	mov    %esp,%ebp
c010605a:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c010605d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0106064:	00 
c0106065:	8b 45 10             	mov    0x10(%ebp),%eax
c0106068:	89 44 24 04          	mov    %eax,0x4(%esp)
c010606c:	8b 45 08             	mov    0x8(%ebp),%eax
c010606f:	89 04 24             	mov    %eax,(%esp)
c0106072:	e8 b0 f8 ff ff       	call   c0105927 <get_pte>
c0106077:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c010607a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010607e:	75 0a                	jne    c010608a <page_insert+0x33>
        return -E_NO_MEM;
c0106080:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0106085:	e9 84 00 00 00       	jmp    c010610e <page_insert+0xb7>
    }
    page_ref_inc(page);
c010608a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010608d:	89 04 24             	mov    %eax,(%esp)
c0106090:	e8 df ef ff ff       	call   c0105074 <page_ref_inc>
    if (*ptep & PTE_P) {
c0106095:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106098:	8b 00                	mov    (%eax),%eax
c010609a:	83 e0 01             	and    $0x1,%eax
c010609d:	85 c0                	test   %eax,%eax
c010609f:	74 3e                	je     c01060df <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c01060a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060a4:	8b 00                	mov    (%eax),%eax
c01060a6:	89 04 24             	mov    %eax,(%esp)
c01060a9:	e8 54 ef ff ff       	call   c0105002 <pte2page>
c01060ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c01060b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060b4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01060b7:	75 0d                	jne    c01060c6 <page_insert+0x6f>
            page_ref_dec(page);
c01060b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01060bc:	89 04 24             	mov    %eax,(%esp)
c01060bf:	e8 c7 ef ff ff       	call   c010508b <page_ref_dec>
c01060c4:	eb 19                	jmp    c01060df <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c01060c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060c9:	89 44 24 08          	mov    %eax,0x8(%esp)
c01060cd:	8b 45 10             	mov    0x10(%ebp),%eax
c01060d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01060d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01060d7:	89 04 24             	mov    %eax,(%esp)
c01060da:	e8 e4 f9 ff ff       	call   c0105ac3 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c01060df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01060e2:	89 04 24             	mov    %eax,(%esp)
c01060e5:	e8 62 ee ff ff       	call   c0104f4c <page2pa>
c01060ea:	0b 45 14             	or     0x14(%ebp),%eax
c01060ed:	83 c8 01             	or     $0x1,%eax
c01060f0:	89 c2                	mov    %eax,%edx
c01060f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060f5:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c01060f7:	8b 45 10             	mov    0x10(%ebp),%eax
c01060fa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01060fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0106101:	89 04 24             	mov    %eax,(%esp)
c0106104:	e8 09 00 00 00       	call   c0106112 <tlb_invalidate>
    return 0;
c0106109:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010610e:	89 ec                	mov    %ebp,%esp
c0106110:	5d                   	pop    %ebp
c0106111:	c3                   	ret    

c0106112 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0106112:	55                   	push   %ebp
c0106113:	89 e5                	mov    %esp,%ebp
c0106115:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0106118:	0f 20 d8             	mov    %cr3,%eax
c010611b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c010611e:	8b 55 f0             	mov    -0x10(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c0106121:	8b 45 08             	mov    0x8(%ebp),%eax
c0106124:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106127:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010612e:	77 23                	ja     c0106153 <tlb_invalidate+0x41>
c0106130:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106133:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106137:	c7 44 24 08 08 ed 10 	movl   $0xc010ed08,0x8(%esp)
c010613e:	c0 
c010613f:	c7 44 24 04 5d 02 00 	movl   $0x25d,0x4(%esp)
c0106146:	00 
c0106147:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c010614e:	e8 9d ac ff ff       	call   c0100df0 <__panic>
c0106153:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106156:	05 00 00 00 40       	add    $0x40000000,%eax
c010615b:	39 d0                	cmp    %edx,%eax
c010615d:	75 0d                	jne    c010616c <tlb_invalidate+0x5a>
        invlpg((void *)la);
c010615f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106162:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0106165:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106168:	0f 01 38             	invlpg (%eax)
}
c010616b:	90                   	nop
    }
}
c010616c:	90                   	nop
c010616d:	89 ec                	mov    %ebp,%esp
c010616f:	5d                   	pop    %ebp
c0106170:	c3                   	ret    

c0106171 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0106171:	55                   	push   %ebp
c0106172:	89 e5                	mov    %esp,%ebp
c0106174:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0106177:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010617e:	e8 e9 f0 ff ff       	call   c010526c <alloc_pages>
c0106183:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0106186:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010618a:	0f 84 b0 00 00 00    	je     c0106240 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0106190:	8b 45 10             	mov    0x10(%ebp),%eax
c0106193:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106197:	8b 45 0c             	mov    0xc(%ebp),%eax
c010619a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010619e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01061a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01061a8:	89 04 24             	mov    %eax,(%esp)
c01061ab:	e8 a7 fe ff ff       	call   c0106057 <page_insert>
c01061b0:	85 c0                	test   %eax,%eax
c01061b2:	74 1a                	je     c01061ce <pgdir_alloc_page+0x5d>
            free_page(page);
c01061b4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01061bb:	00 
c01061bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061bf:	89 04 24             	mov    %eax,(%esp)
c01061c2:	e8 12 f1 ff ff       	call   c01052d9 <free_pages>
            return NULL;
c01061c7:	b8 00 00 00 00       	mov    $0x0,%eax
c01061cc:	eb 75                	jmp    c0106243 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c01061ce:	a1 44 d0 1c c0       	mov    0xc01cd044,%eax
c01061d3:	85 c0                	test   %eax,%eax
c01061d5:	74 69                	je     c0106240 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c01061d7:	a1 0c d1 1c c0       	mov    0xc01cd10c,%eax
c01061dc:	85 c0                	test   %eax,%eax
c01061de:	74 60                	je     c0106240 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c01061e0:	a1 0c d1 1c c0       	mov    0xc01cd10c,%eax
c01061e5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01061ec:	00 
c01061ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01061f0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01061f4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01061f7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01061fb:	89 04 24             	mov    %eax,(%esp)
c01061fe:	e8 54 0e 00 00       	call   c0107057 <swap_map_swappable>
                page->pra_vaddr=la;
c0106203:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106206:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106209:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c010620c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010620f:	89 04 24             	mov    %eax,(%esp)
c0106212:	e8 45 ee ff ff       	call   c010505c <page_ref>
c0106217:	83 f8 01             	cmp    $0x1,%eax
c010621a:	74 24                	je     c0106240 <pgdir_alloc_page+0xcf>
c010621c:	c7 44 24 0c 04 ee 10 	movl   $0xc010ee04,0xc(%esp)
c0106223:	c0 
c0106224:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c010622b:	c0 
c010622c:	c7 44 24 04 71 02 00 	movl   $0x271,0x4(%esp)
c0106233:	00 
c0106234:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c010623b:	e8 b0 ab ff ff       	call   c0100df0 <__panic>
            }
        }

    }

    return page;
c0106240:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106243:	89 ec                	mov    %ebp,%esp
c0106245:	5d                   	pop    %ebp
c0106246:	c3                   	ret    

c0106247 <check_alloc_page>:

static void
check_alloc_page(void) {
c0106247:	55                   	push   %ebp
c0106248:	89 e5                	mov    %esp,%ebp
c010624a:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c010624d:	a1 ac cf 1c c0       	mov    0xc01ccfac,%eax
c0106252:	8b 40 18             	mov    0x18(%eax),%eax
c0106255:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0106257:	c7 04 24 18 ee 10 c0 	movl   $0xc010ee18,(%esp)
c010625e:	e8 0f a1 ff ff       	call   c0100372 <cprintf>
}
c0106263:	90                   	nop
c0106264:	89 ec                	mov    %ebp,%esp
c0106266:	5d                   	pop    %ebp
c0106267:	c3                   	ret    

c0106268 <check_pgdir>:

static void
check_pgdir(void) {
c0106268:	55                   	push   %ebp
c0106269:	89 e5                	mov    %esp,%ebp
c010626b:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010626e:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c0106273:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106278:	76 24                	jbe    c010629e <check_pgdir+0x36>
c010627a:	c7 44 24 0c 37 ee 10 	movl   $0xc010ee37,0xc(%esp)
c0106281:	c0 
c0106282:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106289:	c0 
c010628a:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c0106291:	00 
c0106292:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106299:	e8 52 ab ff ff       	call   c0100df0 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010629e:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c01062a3:	85 c0                	test   %eax,%eax
c01062a5:	74 0e                	je     c01062b5 <check_pgdir+0x4d>
c01062a7:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c01062ac:	25 ff 0f 00 00       	and    $0xfff,%eax
c01062b1:	85 c0                	test   %eax,%eax
c01062b3:	74 24                	je     c01062d9 <check_pgdir+0x71>
c01062b5:	c7 44 24 0c 54 ee 10 	movl   $0xc010ee54,0xc(%esp)
c01062bc:	c0 
c01062bd:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c01062c4:	c0 
c01062c5:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c01062cc:	00 
c01062cd:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01062d4:	e8 17 ab ff ff       	call   c0100df0 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c01062d9:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c01062de:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01062e5:	00 
c01062e6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01062ed:	00 
c01062ee:	89 04 24             	mov    %eax,(%esp)
c01062f1:	e8 72 f7 ff ff       	call   c0105a68 <get_page>
c01062f6:	85 c0                	test   %eax,%eax
c01062f8:	74 24                	je     c010631e <check_pgdir+0xb6>
c01062fa:	c7 44 24 0c 8c ee 10 	movl   $0xc010ee8c,0xc(%esp)
c0106301:	c0 
c0106302:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106309:	c0 
c010630a:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
c0106311:	00 
c0106312:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106319:	e8 d2 aa ff ff       	call   c0100df0 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c010631e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106325:	e8 42 ef ff ff       	call   c010526c <alloc_pages>
c010632a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c010632d:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106332:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106339:	00 
c010633a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106341:	00 
c0106342:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106345:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106349:	89 04 24             	mov    %eax,(%esp)
c010634c:	e8 06 fd ff ff       	call   c0106057 <page_insert>
c0106351:	85 c0                	test   %eax,%eax
c0106353:	74 24                	je     c0106379 <check_pgdir+0x111>
c0106355:	c7 44 24 0c b4 ee 10 	movl   $0xc010eeb4,0xc(%esp)
c010635c:	c0 
c010635d:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106364:	c0 
c0106365:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c010636c:	00 
c010636d:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106374:	e8 77 aa ff ff       	call   c0100df0 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106379:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c010637e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106385:	00 
c0106386:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010638d:	00 
c010638e:	89 04 24             	mov    %eax,(%esp)
c0106391:	e8 91 f5 ff ff       	call   c0105927 <get_pte>
c0106396:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106399:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010639d:	75 24                	jne    c01063c3 <check_pgdir+0x15b>
c010639f:	c7 44 24 0c e0 ee 10 	movl   $0xc010eee0,0xc(%esp)
c01063a6:	c0 
c01063a7:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c01063ae:	c0 
c01063af:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c01063b6:	00 
c01063b7:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01063be:	e8 2d aa ff ff       	call   c0100df0 <__panic>
    assert(pte2page(*ptep) == p1);
c01063c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063c6:	8b 00                	mov    (%eax),%eax
c01063c8:	89 04 24             	mov    %eax,(%esp)
c01063cb:	e8 32 ec ff ff       	call   c0105002 <pte2page>
c01063d0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01063d3:	74 24                	je     c01063f9 <check_pgdir+0x191>
c01063d5:	c7 44 24 0c 0d ef 10 	movl   $0xc010ef0d,0xc(%esp)
c01063dc:	c0 
c01063dd:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c01063e4:	c0 
c01063e5:	c7 44 24 04 93 02 00 	movl   $0x293,0x4(%esp)
c01063ec:	00 
c01063ed:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01063f4:	e8 f7 a9 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p1) == 1);
c01063f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063fc:	89 04 24             	mov    %eax,(%esp)
c01063ff:	e8 58 ec ff ff       	call   c010505c <page_ref>
c0106404:	83 f8 01             	cmp    $0x1,%eax
c0106407:	74 24                	je     c010642d <check_pgdir+0x1c5>
c0106409:	c7 44 24 0c 23 ef 10 	movl   $0xc010ef23,0xc(%esp)
c0106410:	c0 
c0106411:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106418:	c0 
c0106419:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c0106420:	00 
c0106421:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106428:	e8 c3 a9 ff ff       	call   c0100df0 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c010642d:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106432:	8b 00                	mov    (%eax),%eax
c0106434:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106439:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010643c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010643f:	c1 e8 0c             	shr    $0xc,%eax
c0106442:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106445:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c010644a:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010644d:	72 23                	jb     c0106472 <check_pgdir+0x20a>
c010644f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106452:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106456:	c7 44 24 08 64 ec 10 	movl   $0xc010ec64,0x8(%esp)
c010645d:	c0 
c010645e:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c0106465:	00 
c0106466:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c010646d:	e8 7e a9 ff ff       	call   c0100df0 <__panic>
c0106472:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106475:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010647a:	83 c0 04             	add    $0x4,%eax
c010647d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0106480:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106485:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010648c:	00 
c010648d:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106494:	00 
c0106495:	89 04 24             	mov    %eax,(%esp)
c0106498:	e8 8a f4 ff ff       	call   c0105927 <get_pte>
c010649d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01064a0:	74 24                	je     c01064c6 <check_pgdir+0x25e>
c01064a2:	c7 44 24 0c 38 ef 10 	movl   $0xc010ef38,0xc(%esp)
c01064a9:	c0 
c01064aa:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c01064b1:	c0 
c01064b2:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c01064b9:	00 
c01064ba:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01064c1:	e8 2a a9 ff ff       	call   c0100df0 <__panic>

    p2 = alloc_page();
c01064c6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01064cd:	e8 9a ed ff ff       	call   c010526c <alloc_pages>
c01064d2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01064d5:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c01064da:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c01064e1:	00 
c01064e2:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01064e9:	00 
c01064ea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01064ed:	89 54 24 04          	mov    %edx,0x4(%esp)
c01064f1:	89 04 24             	mov    %eax,(%esp)
c01064f4:	e8 5e fb ff ff       	call   c0106057 <page_insert>
c01064f9:	85 c0                	test   %eax,%eax
c01064fb:	74 24                	je     c0106521 <check_pgdir+0x2b9>
c01064fd:	c7 44 24 0c 60 ef 10 	movl   $0xc010ef60,0xc(%esp)
c0106504:	c0 
c0106505:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c010650c:	c0 
c010650d:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c0106514:	00 
c0106515:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c010651c:	e8 cf a8 ff ff       	call   c0100df0 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106521:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106526:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010652d:	00 
c010652e:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106535:	00 
c0106536:	89 04 24             	mov    %eax,(%esp)
c0106539:	e8 e9 f3 ff ff       	call   c0105927 <get_pte>
c010653e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106541:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106545:	75 24                	jne    c010656b <check_pgdir+0x303>
c0106547:	c7 44 24 0c 98 ef 10 	movl   $0xc010ef98,0xc(%esp)
c010654e:	c0 
c010654f:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106556:	c0 
c0106557:	c7 44 24 04 9b 02 00 	movl   $0x29b,0x4(%esp)
c010655e:	00 
c010655f:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106566:	e8 85 a8 ff ff       	call   c0100df0 <__panic>
    assert(*ptep & PTE_U);
c010656b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010656e:	8b 00                	mov    (%eax),%eax
c0106570:	83 e0 04             	and    $0x4,%eax
c0106573:	85 c0                	test   %eax,%eax
c0106575:	75 24                	jne    c010659b <check_pgdir+0x333>
c0106577:	c7 44 24 0c c8 ef 10 	movl   $0xc010efc8,0xc(%esp)
c010657e:	c0 
c010657f:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106586:	c0 
c0106587:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c010658e:	00 
c010658f:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106596:	e8 55 a8 ff ff       	call   c0100df0 <__panic>
    assert(*ptep & PTE_W);
c010659b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010659e:	8b 00                	mov    (%eax),%eax
c01065a0:	83 e0 02             	and    $0x2,%eax
c01065a3:	85 c0                	test   %eax,%eax
c01065a5:	75 24                	jne    c01065cb <check_pgdir+0x363>
c01065a7:	c7 44 24 0c d6 ef 10 	movl   $0xc010efd6,0xc(%esp)
c01065ae:	c0 
c01065af:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c01065b6:	c0 
c01065b7:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c01065be:	00 
c01065bf:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01065c6:	e8 25 a8 ff ff       	call   c0100df0 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c01065cb:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c01065d0:	8b 00                	mov    (%eax),%eax
c01065d2:	83 e0 04             	and    $0x4,%eax
c01065d5:	85 c0                	test   %eax,%eax
c01065d7:	75 24                	jne    c01065fd <check_pgdir+0x395>
c01065d9:	c7 44 24 0c e4 ef 10 	movl   $0xc010efe4,0xc(%esp)
c01065e0:	c0 
c01065e1:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c01065e8:	c0 
c01065e9:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c01065f0:	00 
c01065f1:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01065f8:	e8 f3 a7 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p2) == 1);
c01065fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106600:	89 04 24             	mov    %eax,(%esp)
c0106603:	e8 54 ea ff ff       	call   c010505c <page_ref>
c0106608:	83 f8 01             	cmp    $0x1,%eax
c010660b:	74 24                	je     c0106631 <check_pgdir+0x3c9>
c010660d:	c7 44 24 0c fa ef 10 	movl   $0xc010effa,0xc(%esp)
c0106614:	c0 
c0106615:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c010661c:	c0 
c010661d:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c0106624:	00 
c0106625:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c010662c:	e8 bf a7 ff ff       	call   c0100df0 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0106631:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106636:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010663d:	00 
c010663e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106645:	00 
c0106646:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106649:	89 54 24 04          	mov    %edx,0x4(%esp)
c010664d:	89 04 24             	mov    %eax,(%esp)
c0106650:	e8 02 fa ff ff       	call   c0106057 <page_insert>
c0106655:	85 c0                	test   %eax,%eax
c0106657:	74 24                	je     c010667d <check_pgdir+0x415>
c0106659:	c7 44 24 0c 0c f0 10 	movl   $0xc010f00c,0xc(%esp)
c0106660:	c0 
c0106661:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106668:	c0 
c0106669:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c0106670:	00 
c0106671:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106678:	e8 73 a7 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p1) == 2);
c010667d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106680:	89 04 24             	mov    %eax,(%esp)
c0106683:	e8 d4 e9 ff ff       	call   c010505c <page_ref>
c0106688:	83 f8 02             	cmp    $0x2,%eax
c010668b:	74 24                	je     c01066b1 <check_pgdir+0x449>
c010668d:	c7 44 24 0c 38 f0 10 	movl   $0xc010f038,0xc(%esp)
c0106694:	c0 
c0106695:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c010669c:	c0 
c010669d:	c7 44 24 04 a2 02 00 	movl   $0x2a2,0x4(%esp)
c01066a4:	00 
c01066a5:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01066ac:	e8 3f a7 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p2) == 0);
c01066b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066b4:	89 04 24             	mov    %eax,(%esp)
c01066b7:	e8 a0 e9 ff ff       	call   c010505c <page_ref>
c01066bc:	85 c0                	test   %eax,%eax
c01066be:	74 24                	je     c01066e4 <check_pgdir+0x47c>
c01066c0:	c7 44 24 0c 4a f0 10 	movl   $0xc010f04a,0xc(%esp)
c01066c7:	c0 
c01066c8:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c01066cf:	c0 
c01066d0:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c01066d7:	00 
c01066d8:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01066df:	e8 0c a7 ff ff       	call   c0100df0 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01066e4:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c01066e9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01066f0:	00 
c01066f1:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01066f8:	00 
c01066f9:	89 04 24             	mov    %eax,(%esp)
c01066fc:	e8 26 f2 ff ff       	call   c0105927 <get_pte>
c0106701:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106704:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106708:	75 24                	jne    c010672e <check_pgdir+0x4c6>
c010670a:	c7 44 24 0c 98 ef 10 	movl   $0xc010ef98,0xc(%esp)
c0106711:	c0 
c0106712:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106719:	c0 
c010671a:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c0106721:	00 
c0106722:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106729:	e8 c2 a6 ff ff       	call   c0100df0 <__panic>
    assert(pte2page(*ptep) == p1);
c010672e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106731:	8b 00                	mov    (%eax),%eax
c0106733:	89 04 24             	mov    %eax,(%esp)
c0106736:	e8 c7 e8 ff ff       	call   c0105002 <pte2page>
c010673b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010673e:	74 24                	je     c0106764 <check_pgdir+0x4fc>
c0106740:	c7 44 24 0c 0d ef 10 	movl   $0xc010ef0d,0xc(%esp)
c0106747:	c0 
c0106748:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c010674f:	c0 
c0106750:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c0106757:	00 
c0106758:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c010675f:	e8 8c a6 ff ff       	call   c0100df0 <__panic>
    assert((*ptep & PTE_U) == 0);
c0106764:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106767:	8b 00                	mov    (%eax),%eax
c0106769:	83 e0 04             	and    $0x4,%eax
c010676c:	85 c0                	test   %eax,%eax
c010676e:	74 24                	je     c0106794 <check_pgdir+0x52c>
c0106770:	c7 44 24 0c 5c f0 10 	movl   $0xc010f05c,0xc(%esp)
c0106777:	c0 
c0106778:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c010677f:	c0 
c0106780:	c7 44 24 04 a6 02 00 	movl   $0x2a6,0x4(%esp)
c0106787:	00 
c0106788:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c010678f:	e8 5c a6 ff ff       	call   c0100df0 <__panic>

    page_remove(boot_pgdir, 0x0);
c0106794:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106799:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01067a0:	00 
c01067a1:	89 04 24             	mov    %eax,(%esp)
c01067a4:	e8 67 f8 ff ff       	call   c0106010 <page_remove>
    assert(page_ref(p1) == 1);
c01067a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067ac:	89 04 24             	mov    %eax,(%esp)
c01067af:	e8 a8 e8 ff ff       	call   c010505c <page_ref>
c01067b4:	83 f8 01             	cmp    $0x1,%eax
c01067b7:	74 24                	je     c01067dd <check_pgdir+0x575>
c01067b9:	c7 44 24 0c 23 ef 10 	movl   $0xc010ef23,0xc(%esp)
c01067c0:	c0 
c01067c1:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c01067c8:	c0 
c01067c9:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c01067d0:	00 
c01067d1:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01067d8:	e8 13 a6 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p2) == 0);
c01067dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01067e0:	89 04 24             	mov    %eax,(%esp)
c01067e3:	e8 74 e8 ff ff       	call   c010505c <page_ref>
c01067e8:	85 c0                	test   %eax,%eax
c01067ea:	74 24                	je     c0106810 <check_pgdir+0x5a8>
c01067ec:	c7 44 24 0c 4a f0 10 	movl   $0xc010f04a,0xc(%esp)
c01067f3:	c0 
c01067f4:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c01067fb:	c0 
c01067fc:	c7 44 24 04 aa 02 00 	movl   $0x2aa,0x4(%esp)
c0106803:	00 
c0106804:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c010680b:	e8 e0 a5 ff ff       	call   c0100df0 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0106810:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106815:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010681c:	00 
c010681d:	89 04 24             	mov    %eax,(%esp)
c0106820:	e8 eb f7 ff ff       	call   c0106010 <page_remove>
    assert(page_ref(p1) == 0);
c0106825:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106828:	89 04 24             	mov    %eax,(%esp)
c010682b:	e8 2c e8 ff ff       	call   c010505c <page_ref>
c0106830:	85 c0                	test   %eax,%eax
c0106832:	74 24                	je     c0106858 <check_pgdir+0x5f0>
c0106834:	c7 44 24 0c 71 f0 10 	movl   $0xc010f071,0xc(%esp)
c010683b:	c0 
c010683c:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106843:	c0 
c0106844:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
c010684b:	00 
c010684c:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106853:	e8 98 a5 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p2) == 0);
c0106858:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010685b:	89 04 24             	mov    %eax,(%esp)
c010685e:	e8 f9 e7 ff ff       	call   c010505c <page_ref>
c0106863:	85 c0                	test   %eax,%eax
c0106865:	74 24                	je     c010688b <check_pgdir+0x623>
c0106867:	c7 44 24 0c 4a f0 10 	movl   $0xc010f04a,0xc(%esp)
c010686e:	c0 
c010686f:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106876:	c0 
c0106877:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c010687e:	00 
c010687f:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106886:	e8 65 a5 ff ff       	call   c0100df0 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c010688b:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106890:	8b 00                	mov    (%eax),%eax
c0106892:	89 04 24             	mov    %eax,(%esp)
c0106895:	e8 a8 e7 ff ff       	call   c0105042 <pde2page>
c010689a:	89 04 24             	mov    %eax,(%esp)
c010689d:	e8 ba e7 ff ff       	call   c010505c <page_ref>
c01068a2:	83 f8 01             	cmp    $0x1,%eax
c01068a5:	74 24                	je     c01068cb <check_pgdir+0x663>
c01068a7:	c7 44 24 0c 84 f0 10 	movl   $0xc010f084,0xc(%esp)
c01068ae:	c0 
c01068af:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c01068b6:	c0 
c01068b7:	c7 44 24 04 b0 02 00 	movl   $0x2b0,0x4(%esp)
c01068be:	00 
c01068bf:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01068c6:	e8 25 a5 ff ff       	call   c0100df0 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c01068cb:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c01068d0:	8b 00                	mov    (%eax),%eax
c01068d2:	89 04 24             	mov    %eax,(%esp)
c01068d5:	e8 68 e7 ff ff       	call   c0105042 <pde2page>
c01068da:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01068e1:	00 
c01068e2:	89 04 24             	mov    %eax,(%esp)
c01068e5:	e8 ef e9 ff ff       	call   c01052d9 <free_pages>
    boot_pgdir[0] = 0;
c01068ea:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c01068ef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c01068f5:	c7 04 24 ab f0 10 c0 	movl   $0xc010f0ab,(%esp)
c01068fc:	e8 71 9a ff ff       	call   c0100372 <cprintf>
}
c0106901:	90                   	nop
c0106902:	89 ec                	mov    %ebp,%esp
c0106904:	5d                   	pop    %ebp
c0106905:	c3                   	ret    

c0106906 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0106906:	55                   	push   %ebp
c0106907:	89 e5                	mov    %esp,%ebp
c0106909:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c010690c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106913:	e9 ca 00 00 00       	jmp    c01069e2 <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0106918:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010691b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010691e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106921:	c1 e8 0c             	shr    $0xc,%eax
c0106924:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0106927:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c010692c:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010692f:	72 23                	jb     c0106954 <check_boot_pgdir+0x4e>
c0106931:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106934:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106938:	c7 44 24 08 64 ec 10 	movl   $0xc010ec64,0x8(%esp)
c010693f:	c0 
c0106940:	c7 44 24 04 bc 02 00 	movl   $0x2bc,0x4(%esp)
c0106947:	00 
c0106948:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c010694f:	e8 9c a4 ff ff       	call   c0100df0 <__panic>
c0106954:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106957:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010695c:	89 c2                	mov    %eax,%edx
c010695e:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106963:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010696a:	00 
c010696b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010696f:	89 04 24             	mov    %eax,(%esp)
c0106972:	e8 b0 ef ff ff       	call   c0105927 <get_pte>
c0106977:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010697a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010697e:	75 24                	jne    c01069a4 <check_boot_pgdir+0x9e>
c0106980:	c7 44 24 0c c8 f0 10 	movl   $0xc010f0c8,0xc(%esp)
c0106987:	c0 
c0106988:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c010698f:	c0 
c0106990:	c7 44 24 04 bc 02 00 	movl   $0x2bc,0x4(%esp)
c0106997:	00 
c0106998:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c010699f:	e8 4c a4 ff ff       	call   c0100df0 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c01069a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01069a7:	8b 00                	mov    (%eax),%eax
c01069a9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01069ae:	89 c2                	mov    %eax,%edx
c01069b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01069b3:	39 c2                	cmp    %eax,%edx
c01069b5:	74 24                	je     c01069db <check_boot_pgdir+0xd5>
c01069b7:	c7 44 24 0c 05 f1 10 	movl   $0xc010f105,0xc(%esp)
c01069be:	c0 
c01069bf:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c01069c6:	c0 
c01069c7:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c01069ce:	00 
c01069cf:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c01069d6:	e8 15 a4 ff ff       	call   c0100df0 <__panic>
    for (i = 0; i < npage; i += PGSIZE) {
c01069db:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01069e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01069e5:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c01069ea:	39 c2                	cmp    %eax,%edx
c01069ec:	0f 82 26 ff ff ff    	jb     c0106918 <check_boot_pgdir+0x12>
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c01069f2:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c01069f7:	05 ac 0f 00 00       	add    $0xfac,%eax
c01069fc:	8b 00                	mov    (%eax),%eax
c01069fe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106a03:	89 c2                	mov    %eax,%edx
c0106a05:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106a0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106a0d:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0106a14:	77 23                	ja     c0106a39 <check_boot_pgdir+0x133>
c0106a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a19:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106a1d:	c7 44 24 08 08 ed 10 	movl   $0xc010ed08,0x8(%esp)
c0106a24:	c0 
c0106a25:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c0106a2c:	00 
c0106a2d:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106a34:	e8 b7 a3 ff ff       	call   c0100df0 <__panic>
c0106a39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a3c:	05 00 00 00 40       	add    $0x40000000,%eax
c0106a41:	39 d0                	cmp    %edx,%eax
c0106a43:	74 24                	je     c0106a69 <check_boot_pgdir+0x163>
c0106a45:	c7 44 24 0c 1c f1 10 	movl   $0xc010f11c,0xc(%esp)
c0106a4c:	c0 
c0106a4d:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106a54:	c0 
c0106a55:	c7 44 24 04 c0 02 00 	movl   $0x2c0,0x4(%esp)
c0106a5c:	00 
c0106a5d:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106a64:	e8 87 a3 ff ff       	call   c0100df0 <__panic>

    assert(boot_pgdir[0] == 0);
c0106a69:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106a6e:	8b 00                	mov    (%eax),%eax
c0106a70:	85 c0                	test   %eax,%eax
c0106a72:	74 24                	je     c0106a98 <check_boot_pgdir+0x192>
c0106a74:	c7 44 24 0c 50 f1 10 	movl   $0xc010f150,0xc(%esp)
c0106a7b:	c0 
c0106a7c:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106a83:	c0 
c0106a84:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c0106a8b:	00 
c0106a8c:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106a93:	e8 58 a3 ff ff       	call   c0100df0 <__panic>

    struct Page *p;
    p = alloc_page();
c0106a98:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106a9f:	e8 c8 e7 ff ff       	call   c010526c <alloc_pages>
c0106aa4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106aa7:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106aac:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106ab3:	00 
c0106ab4:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106abb:	00 
c0106abc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106abf:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ac3:	89 04 24             	mov    %eax,(%esp)
c0106ac6:	e8 8c f5 ff ff       	call   c0106057 <page_insert>
c0106acb:	85 c0                	test   %eax,%eax
c0106acd:	74 24                	je     c0106af3 <check_boot_pgdir+0x1ed>
c0106acf:	c7 44 24 0c 64 f1 10 	movl   $0xc010f164,0xc(%esp)
c0106ad6:	c0 
c0106ad7:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106ade:	c0 
c0106adf:	c7 44 24 04 c6 02 00 	movl   $0x2c6,0x4(%esp)
c0106ae6:	00 
c0106ae7:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106aee:	e8 fd a2 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p) == 1);
c0106af3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106af6:	89 04 24             	mov    %eax,(%esp)
c0106af9:	e8 5e e5 ff ff       	call   c010505c <page_ref>
c0106afe:	83 f8 01             	cmp    $0x1,%eax
c0106b01:	74 24                	je     c0106b27 <check_boot_pgdir+0x221>
c0106b03:	c7 44 24 0c 92 f1 10 	movl   $0xc010f192,0xc(%esp)
c0106b0a:	c0 
c0106b0b:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106b12:	c0 
c0106b13:	c7 44 24 04 c7 02 00 	movl   $0x2c7,0x4(%esp)
c0106b1a:	00 
c0106b1b:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106b22:	e8 c9 a2 ff ff       	call   c0100df0 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0106b27:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106b2c:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106b33:	00 
c0106b34:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106b3b:	00 
c0106b3c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106b3f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106b43:	89 04 24             	mov    %eax,(%esp)
c0106b46:	e8 0c f5 ff ff       	call   c0106057 <page_insert>
c0106b4b:	85 c0                	test   %eax,%eax
c0106b4d:	74 24                	je     c0106b73 <check_boot_pgdir+0x26d>
c0106b4f:	c7 44 24 0c a4 f1 10 	movl   $0xc010f1a4,0xc(%esp)
c0106b56:	c0 
c0106b57:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106b5e:	c0 
c0106b5f:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c0106b66:	00 
c0106b67:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106b6e:	e8 7d a2 ff ff       	call   c0100df0 <__panic>
    assert(page_ref(p) == 2);
c0106b73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106b76:	89 04 24             	mov    %eax,(%esp)
c0106b79:	e8 de e4 ff ff       	call   c010505c <page_ref>
c0106b7e:	83 f8 02             	cmp    $0x2,%eax
c0106b81:	74 24                	je     c0106ba7 <check_boot_pgdir+0x2a1>
c0106b83:	c7 44 24 0c db f1 10 	movl   $0xc010f1db,0xc(%esp)
c0106b8a:	c0 
c0106b8b:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106b92:	c0 
c0106b93:	c7 44 24 04 c9 02 00 	movl   $0x2c9,0x4(%esp)
c0106b9a:	00 
c0106b9b:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106ba2:	e8 49 a2 ff ff       	call   c0100df0 <__panic>

    const char *str = "ucore: Hello world!!";
c0106ba7:	c7 45 e8 ec f1 10 c0 	movl   $0xc010f1ec,-0x18(%ebp)
    strcpy((void *)0x100, str);
c0106bae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106bb1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106bb5:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106bbc:	e8 a4 6d 00 00       	call   c010d965 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106bc1:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106bc8:	00 
c0106bc9:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106bd0:	e8 08 6e 00 00       	call   c010d9dd <strcmp>
c0106bd5:	85 c0                	test   %eax,%eax
c0106bd7:	74 24                	je     c0106bfd <check_boot_pgdir+0x2f7>
c0106bd9:	c7 44 24 0c 04 f2 10 	movl   $0xc010f204,0xc(%esp)
c0106be0:	c0 
c0106be1:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106be8:	c0 
c0106be9:	c7 44 24 04 cd 02 00 	movl   $0x2cd,0x4(%esp)
c0106bf0:	00 
c0106bf1:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106bf8:	e8 f3 a1 ff ff       	call   c0100df0 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106bfd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106c00:	89 04 24             	mov    %eax,(%esp)
c0106c03:	e8 a4 e3 ff ff       	call   c0104fac <page2kva>
c0106c08:	05 00 01 00 00       	add    $0x100,%eax
c0106c0d:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106c10:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106c17:	e8 ef 6c 00 00       	call   c010d90b <strlen>
c0106c1c:	85 c0                	test   %eax,%eax
c0106c1e:	74 24                	je     c0106c44 <check_boot_pgdir+0x33e>
c0106c20:	c7 44 24 0c 3c f2 10 	movl   $0xc010f23c,0xc(%esp)
c0106c27:	c0 
c0106c28:	c7 44 24 08 51 ed 10 	movl   $0xc010ed51,0x8(%esp)
c0106c2f:	c0 
c0106c30:	c7 44 24 04 d0 02 00 	movl   $0x2d0,0x4(%esp)
c0106c37:	00 
c0106c38:	c7 04 24 2c ed 10 c0 	movl   $0xc010ed2c,(%esp)
c0106c3f:	e8 ac a1 ff ff       	call   c0100df0 <__panic>

    free_page(p);
c0106c44:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106c4b:	00 
c0106c4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106c4f:	89 04 24             	mov    %eax,(%esp)
c0106c52:	e8 82 e6 ff ff       	call   c01052d9 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0106c57:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106c5c:	8b 00                	mov    (%eax),%eax
c0106c5e:	89 04 24             	mov    %eax,(%esp)
c0106c61:	e8 dc e3 ff ff       	call   c0105042 <pde2page>
c0106c66:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106c6d:	00 
c0106c6e:	89 04 24             	mov    %eax,(%esp)
c0106c71:	e8 63 e6 ff ff       	call   c01052d9 <free_pages>
    boot_pgdir[0] = 0;
c0106c76:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c0106c7b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106c81:	c7 04 24 60 f2 10 c0 	movl   $0xc010f260,(%esp)
c0106c88:	e8 e5 96 ff ff       	call   c0100372 <cprintf>
}
c0106c8d:	90                   	nop
c0106c8e:	89 ec                	mov    %ebp,%esp
c0106c90:	5d                   	pop    %ebp
c0106c91:	c3                   	ret    

c0106c92 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106c92:	55                   	push   %ebp
c0106c93:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106c95:	8b 45 08             	mov    0x8(%ebp),%eax
c0106c98:	83 e0 04             	and    $0x4,%eax
c0106c9b:	85 c0                	test   %eax,%eax
c0106c9d:	74 04                	je     c0106ca3 <perm2str+0x11>
c0106c9f:	b0 75                	mov    $0x75,%al
c0106ca1:	eb 02                	jmp    c0106ca5 <perm2str+0x13>
c0106ca3:	b0 2d                	mov    $0x2d,%al
c0106ca5:	a2 28 d0 1c c0       	mov    %al,0xc01cd028
    str[1] = 'r';
c0106caa:	c6 05 29 d0 1c c0 72 	movb   $0x72,0xc01cd029
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106cb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106cb4:	83 e0 02             	and    $0x2,%eax
c0106cb7:	85 c0                	test   %eax,%eax
c0106cb9:	74 04                	je     c0106cbf <perm2str+0x2d>
c0106cbb:	b0 77                	mov    $0x77,%al
c0106cbd:	eb 02                	jmp    c0106cc1 <perm2str+0x2f>
c0106cbf:	b0 2d                	mov    $0x2d,%al
c0106cc1:	a2 2a d0 1c c0       	mov    %al,0xc01cd02a
    str[3] = '\0';
c0106cc6:	c6 05 2b d0 1c c0 00 	movb   $0x0,0xc01cd02b
    return str;
c0106ccd:	b8 28 d0 1c c0       	mov    $0xc01cd028,%eax
}
c0106cd2:	5d                   	pop    %ebp
c0106cd3:	c3                   	ret    

c0106cd4 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106cd4:	55                   	push   %ebp
c0106cd5:	89 e5                	mov    %esp,%ebp
c0106cd7:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106cda:	8b 45 10             	mov    0x10(%ebp),%eax
c0106cdd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106ce0:	72 0d                	jb     c0106cef <get_pgtable_items+0x1b>
        return 0;
c0106ce2:	b8 00 00 00 00       	mov    $0x0,%eax
c0106ce7:	e9 98 00 00 00       	jmp    c0106d84 <get_pgtable_items+0xb0>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0106cec:	ff 45 10             	incl   0x10(%ebp)
    while (start < right && !(table[start] & PTE_P)) {
c0106cef:	8b 45 10             	mov    0x10(%ebp),%eax
c0106cf2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106cf5:	73 18                	jae    c0106d0f <get_pgtable_items+0x3b>
c0106cf7:	8b 45 10             	mov    0x10(%ebp),%eax
c0106cfa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106d01:	8b 45 14             	mov    0x14(%ebp),%eax
c0106d04:	01 d0                	add    %edx,%eax
c0106d06:	8b 00                	mov    (%eax),%eax
c0106d08:	83 e0 01             	and    $0x1,%eax
c0106d0b:	85 c0                	test   %eax,%eax
c0106d0d:	74 dd                	je     c0106cec <get_pgtable_items+0x18>
    }
    if (start < right) {
c0106d0f:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d12:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106d15:	73 68                	jae    c0106d7f <get_pgtable_items+0xab>
        if (left_store != NULL) {
c0106d17:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106d1b:	74 08                	je     c0106d25 <get_pgtable_items+0x51>
            *left_store = start;
c0106d1d:	8b 45 18             	mov    0x18(%ebp),%eax
c0106d20:	8b 55 10             	mov    0x10(%ebp),%edx
c0106d23:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106d25:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d28:	8d 50 01             	lea    0x1(%eax),%edx
c0106d2b:	89 55 10             	mov    %edx,0x10(%ebp)
c0106d2e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106d35:	8b 45 14             	mov    0x14(%ebp),%eax
c0106d38:	01 d0                	add    %edx,%eax
c0106d3a:	8b 00                	mov    (%eax),%eax
c0106d3c:	83 e0 07             	and    $0x7,%eax
c0106d3f:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106d42:	eb 03                	jmp    c0106d47 <get_pgtable_items+0x73>
            start ++;
c0106d44:	ff 45 10             	incl   0x10(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106d47:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d4a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106d4d:	73 1d                	jae    c0106d6c <get_pgtable_items+0x98>
c0106d4f:	8b 45 10             	mov    0x10(%ebp),%eax
c0106d52:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106d59:	8b 45 14             	mov    0x14(%ebp),%eax
c0106d5c:	01 d0                	add    %edx,%eax
c0106d5e:	8b 00                	mov    (%eax),%eax
c0106d60:	83 e0 07             	and    $0x7,%eax
c0106d63:	89 c2                	mov    %eax,%edx
c0106d65:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d68:	39 c2                	cmp    %eax,%edx
c0106d6a:	74 d8                	je     c0106d44 <get_pgtable_items+0x70>
        }
        if (right_store != NULL) {
c0106d6c:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106d70:	74 08                	je     c0106d7a <get_pgtable_items+0xa6>
            *right_store = start;
c0106d72:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106d75:	8b 55 10             	mov    0x10(%ebp),%edx
c0106d78:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106d7a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106d7d:	eb 05                	jmp    c0106d84 <get_pgtable_items+0xb0>
    }
    return 0;
c0106d7f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106d84:	89 ec                	mov    %ebp,%esp
c0106d86:	5d                   	pop    %ebp
c0106d87:	c3                   	ret    

c0106d88 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106d88:	55                   	push   %ebp
c0106d89:	89 e5                	mov    %esp,%ebp
c0106d8b:	57                   	push   %edi
c0106d8c:	56                   	push   %esi
c0106d8d:	53                   	push   %ebx
c0106d8e:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106d91:	c7 04 24 80 f2 10 c0 	movl   $0xc010f280,(%esp)
c0106d98:	e8 d5 95 ff ff       	call   c0100372 <cprintf>
    size_t left, right = 0, perm;
c0106d9d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106da4:	e9 f2 00 00 00       	jmp    c0106e9b <print_pgdir+0x113>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106da9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106dac:	89 04 24             	mov    %eax,(%esp)
c0106daf:	e8 de fe ff ff       	call   c0106c92 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106db4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106db7:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106dba:	29 ca                	sub    %ecx,%edx
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106dbc:	89 d6                	mov    %edx,%esi
c0106dbe:	c1 e6 16             	shl    $0x16,%esi
c0106dc1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106dc4:	89 d3                	mov    %edx,%ebx
c0106dc6:	c1 e3 16             	shl    $0x16,%ebx
c0106dc9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106dcc:	89 d1                	mov    %edx,%ecx
c0106dce:	c1 e1 16             	shl    $0x16,%ecx
c0106dd1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106dd4:	8b 7d e0             	mov    -0x20(%ebp),%edi
c0106dd7:	29 fa                	sub    %edi,%edx
c0106dd9:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106ddd:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106de1:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106de5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106de9:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ded:	c7 04 24 b1 f2 10 c0 	movl   $0xc010f2b1,(%esp)
c0106df4:	e8 79 95 ff ff       	call   c0100372 <cprintf>
        size_t l, r = left * NPTEENTRY;
c0106df9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106dfc:	c1 e0 0a             	shl    $0xa,%eax
c0106dff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106e02:	eb 50                	jmp    c0106e54 <print_pgdir+0xcc>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106e04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106e07:	89 04 24             	mov    %eax,(%esp)
c0106e0a:	e8 83 fe ff ff       	call   c0106c92 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106e0f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106e12:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0106e15:	29 ca                	sub    %ecx,%edx
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106e17:	89 d6                	mov    %edx,%esi
c0106e19:	c1 e6 0c             	shl    $0xc,%esi
c0106e1c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106e1f:	89 d3                	mov    %edx,%ebx
c0106e21:	c1 e3 0c             	shl    $0xc,%ebx
c0106e24:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106e27:	89 d1                	mov    %edx,%ecx
c0106e29:	c1 e1 0c             	shl    $0xc,%ecx
c0106e2c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106e2f:	8b 7d d8             	mov    -0x28(%ebp),%edi
c0106e32:	29 fa                	sub    %edi,%edx
c0106e34:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106e38:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106e3c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106e40:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106e44:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106e48:	c7 04 24 d0 f2 10 c0 	movl   $0xc010f2d0,(%esp)
c0106e4f:	e8 1e 95 ff ff       	call   c0100372 <cprintf>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106e54:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c0106e59:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106e5c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106e5f:	89 d3                	mov    %edx,%ebx
c0106e61:	c1 e3 0a             	shl    $0xa,%ebx
c0106e64:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106e67:	89 d1                	mov    %edx,%ecx
c0106e69:	c1 e1 0a             	shl    $0xa,%ecx
c0106e6c:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c0106e6f:	89 54 24 14          	mov    %edx,0x14(%esp)
c0106e73:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0106e76:	89 54 24 10          	mov    %edx,0x10(%esp)
c0106e7a:	89 74 24 0c          	mov    %esi,0xc(%esp)
c0106e7e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106e82:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0106e86:	89 0c 24             	mov    %ecx,(%esp)
c0106e89:	e8 46 fe ff ff       	call   c0106cd4 <get_pgtable_items>
c0106e8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106e91:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106e95:	0f 85 69 ff ff ff    	jne    c0106e04 <print_pgdir+0x7c>
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106e9b:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c0106ea0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106ea3:	8d 55 dc             	lea    -0x24(%ebp),%edx
c0106ea6:	89 54 24 14          	mov    %edx,0x14(%esp)
c0106eaa:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0106ead:	89 54 24 10          	mov    %edx,0x10(%esp)
c0106eb1:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0106eb5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106eb9:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106ec0:	00 
c0106ec1:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106ec8:	e8 07 fe ff ff       	call   c0106cd4 <get_pgtable_items>
c0106ecd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106ed0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106ed4:	0f 85 cf fe ff ff    	jne    c0106da9 <print_pgdir+0x21>
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106eda:	c7 04 24 f4 f2 10 c0 	movl   $0xc010f2f4,(%esp)
c0106ee1:	e8 8c 94 ff ff       	call   c0100372 <cprintf>
}
c0106ee6:	90                   	nop
c0106ee7:	83 c4 4c             	add    $0x4c,%esp
c0106eea:	5b                   	pop    %ebx
c0106eeb:	5e                   	pop    %esi
c0106eec:	5f                   	pop    %edi
c0106eed:	5d                   	pop    %ebp
c0106eee:	c3                   	ret    

c0106eef <pa2page>:
pa2page(uintptr_t pa) {
c0106eef:	55                   	push   %ebp
c0106ef0:	89 e5                	mov    %esp,%ebp
c0106ef2:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106ef5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ef8:	c1 e8 0c             	shr    $0xc,%eax
c0106efb:	89 c2                	mov    %eax,%edx
c0106efd:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c0106f02:	39 c2                	cmp    %eax,%edx
c0106f04:	72 1c                	jb     c0106f22 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106f06:	c7 44 24 08 28 f3 10 	movl   $0xc010f328,0x8(%esp)
c0106f0d:	c0 
c0106f0e:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106f15:	00 
c0106f16:	c7 04 24 47 f3 10 c0 	movl   $0xc010f347,(%esp)
c0106f1d:	e8 ce 9e ff ff       	call   c0100df0 <__panic>
    return &pages[PPN(pa)];
c0106f22:	8b 15 a0 cf 1c c0    	mov    0xc01ccfa0,%edx
c0106f28:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f2b:	c1 e8 0c             	shr    $0xc,%eax
c0106f2e:	c1 e0 05             	shl    $0x5,%eax
c0106f31:	01 d0                	add    %edx,%eax
}
c0106f33:	89 ec                	mov    %ebp,%esp
c0106f35:	5d                   	pop    %ebp
c0106f36:	c3                   	ret    

c0106f37 <pte2page>:
pte2page(pte_t pte) {
c0106f37:	55                   	push   %ebp
c0106f38:	89 e5                	mov    %esp,%ebp
c0106f3a:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106f3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f40:	83 e0 01             	and    $0x1,%eax
c0106f43:	85 c0                	test   %eax,%eax
c0106f45:	75 1c                	jne    c0106f63 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106f47:	c7 44 24 08 58 f3 10 	movl   $0xc010f358,0x8(%esp)
c0106f4e:	c0 
c0106f4f:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106f56:	00 
c0106f57:	c7 04 24 47 f3 10 c0 	movl   $0xc010f347,(%esp)
c0106f5e:	e8 8d 9e ff ff       	call   c0100df0 <__panic>
    return pa2page(PTE_ADDR(pte));
c0106f63:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f66:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106f6b:	89 04 24             	mov    %eax,(%esp)
c0106f6e:	e8 7c ff ff ff       	call   c0106eef <pa2page>
}
c0106f73:	89 ec                	mov    %ebp,%esp
c0106f75:	5d                   	pop    %ebp
c0106f76:	c3                   	ret    

c0106f77 <pde2page>:
pde2page(pde_t pde) {
c0106f77:	55                   	push   %ebp
c0106f78:	89 e5                	mov    %esp,%ebp
c0106f7a:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106f7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106f85:	89 04 24             	mov    %eax,(%esp)
c0106f88:	e8 62 ff ff ff       	call   c0106eef <pa2page>
}
c0106f8d:	89 ec                	mov    %ebp,%esp
c0106f8f:	5d                   	pop    %ebp
c0106f90:	c3                   	ret    

c0106f91 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106f91:	55                   	push   %ebp
c0106f92:	89 e5                	mov    %esp,%ebp
c0106f94:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106f97:	e8 a4 35 00 00       	call   c010a540 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106f9c:	a1 40 d0 1c c0       	mov    0xc01cd040,%eax
c0106fa1:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106fa6:	76 0c                	jbe    c0106fb4 <swap_init+0x23>
c0106fa8:	a1 40 d0 1c c0       	mov    0xc01cd040,%eax
c0106fad:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106fb2:	76 25                	jbe    c0106fd9 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106fb4:	a1 40 d0 1c c0       	mov    0xc01cd040,%eax
c0106fb9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106fbd:	c7 44 24 08 79 f3 10 	movl   $0xc010f379,0x8(%esp)
c0106fc4:	c0 
c0106fc5:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106fcc:	00 
c0106fcd:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c0106fd4:	e8 17 9e ff ff       	call   c0100df0 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106fd9:	c7 05 00 d1 1c c0 60 	movl   $0xc0139a60,0xc01cd100
c0106fe0:	9a 13 c0 
     int r = sm->init();
c0106fe3:	a1 00 d1 1c c0       	mov    0xc01cd100,%eax
c0106fe8:	8b 40 04             	mov    0x4(%eax),%eax
c0106feb:	ff d0                	call   *%eax
c0106fed:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106ff0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106ff4:	75 26                	jne    c010701c <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106ff6:	c7 05 44 d0 1c c0 01 	movl   $0x1,0xc01cd044
c0106ffd:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0107000:	a1 00 d1 1c c0       	mov    0xc01cd100,%eax
c0107005:	8b 00                	mov    (%eax),%eax
c0107007:	89 44 24 04          	mov    %eax,0x4(%esp)
c010700b:	c7 04 24 a3 f3 10 c0 	movl   $0xc010f3a3,(%esp)
c0107012:	e8 5b 93 ff ff       	call   c0100372 <cprintf>
          check_swap();
c0107017:	e8 b0 04 00 00       	call   c01074cc <check_swap>
     }

     return r;
c010701c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010701f:	89 ec                	mov    %ebp,%esp
c0107021:	5d                   	pop    %ebp
c0107022:	c3                   	ret    

c0107023 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0107023:	55                   	push   %ebp
c0107024:	89 e5                	mov    %esp,%ebp
c0107026:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0107029:	a1 00 d1 1c c0       	mov    0xc01cd100,%eax
c010702e:	8b 40 08             	mov    0x8(%eax),%eax
c0107031:	8b 55 08             	mov    0x8(%ebp),%edx
c0107034:	89 14 24             	mov    %edx,(%esp)
c0107037:	ff d0                	call   *%eax
}
c0107039:	89 ec                	mov    %ebp,%esp
c010703b:	5d                   	pop    %ebp
c010703c:	c3                   	ret    

c010703d <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c010703d:	55                   	push   %ebp
c010703e:	89 e5                	mov    %esp,%ebp
c0107040:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0107043:	a1 00 d1 1c c0       	mov    0xc01cd100,%eax
c0107048:	8b 40 0c             	mov    0xc(%eax),%eax
c010704b:	8b 55 08             	mov    0x8(%ebp),%edx
c010704e:	89 14 24             	mov    %edx,(%esp)
c0107051:	ff d0                	call   *%eax
}
c0107053:	89 ec                	mov    %ebp,%esp
c0107055:	5d                   	pop    %ebp
c0107056:	c3                   	ret    

c0107057 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107057:	55                   	push   %ebp
c0107058:	89 e5                	mov    %esp,%ebp
c010705a:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c010705d:	a1 00 d1 1c c0       	mov    0xc01cd100,%eax
c0107062:	8b 40 10             	mov    0x10(%eax),%eax
c0107065:	8b 55 14             	mov    0x14(%ebp),%edx
c0107068:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010706c:	8b 55 10             	mov    0x10(%ebp),%edx
c010706f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107073:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107076:	89 54 24 04          	mov    %edx,0x4(%esp)
c010707a:	8b 55 08             	mov    0x8(%ebp),%edx
c010707d:	89 14 24             	mov    %edx,(%esp)
c0107080:	ff d0                	call   *%eax
}
c0107082:	89 ec                	mov    %ebp,%esp
c0107084:	5d                   	pop    %ebp
c0107085:	c3                   	ret    

c0107086 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107086:	55                   	push   %ebp
c0107087:	89 e5                	mov    %esp,%ebp
c0107089:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c010708c:	a1 00 d1 1c c0       	mov    0xc01cd100,%eax
c0107091:	8b 40 14             	mov    0x14(%eax),%eax
c0107094:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107097:	89 54 24 04          	mov    %edx,0x4(%esp)
c010709b:	8b 55 08             	mov    0x8(%ebp),%edx
c010709e:	89 14 24             	mov    %edx,(%esp)
c01070a1:	ff d0                	call   *%eax
}
c01070a3:	89 ec                	mov    %ebp,%esp
c01070a5:	5d                   	pop    %ebp
c01070a6:	c3                   	ret    

c01070a7 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c01070a7:	55                   	push   %ebp
c01070a8:	89 e5                	mov    %esp,%ebp
c01070aa:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c01070ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01070b4:	e9 53 01 00 00       	jmp    c010720c <swap_out+0x165>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c01070b9:	a1 00 d1 1c c0       	mov    0xc01cd100,%eax
c01070be:	8b 40 18             	mov    0x18(%eax),%eax
c01070c1:	8b 55 10             	mov    0x10(%ebp),%edx
c01070c4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01070c8:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c01070cb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070cf:	8b 55 08             	mov    0x8(%ebp),%edx
c01070d2:	89 14 24             	mov    %edx,(%esp)
c01070d5:	ff d0                	call   *%eax
c01070d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c01070da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01070de:	74 18                	je     c01070f8 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c01070e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01070e7:	c7 04 24 b8 f3 10 c0 	movl   $0xc010f3b8,(%esp)
c01070ee:	e8 7f 92 ff ff       	call   c0100372 <cprintf>
c01070f3:	e9 20 01 00 00       	jmp    c0107218 <swap_out+0x171>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c01070f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01070fb:	8b 40 1c             	mov    0x1c(%eax),%eax
c01070fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0107101:	8b 45 08             	mov    0x8(%ebp),%eax
c0107104:	8b 40 0c             	mov    0xc(%eax),%eax
c0107107:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010710e:	00 
c010710f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107112:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107116:	89 04 24             	mov    %eax,(%esp)
c0107119:	e8 09 e8 ff ff       	call   c0105927 <get_pte>
c010711e:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0107121:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107124:	8b 00                	mov    (%eax),%eax
c0107126:	83 e0 01             	and    $0x1,%eax
c0107129:	85 c0                	test   %eax,%eax
c010712b:	75 24                	jne    c0107151 <swap_out+0xaa>
c010712d:	c7 44 24 0c e5 f3 10 	movl   $0xc010f3e5,0xc(%esp)
c0107134:	c0 
c0107135:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c010713c:	c0 
c010713d:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0107144:	00 
c0107145:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c010714c:	e8 9f 9c ff ff       	call   c0100df0 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0107151:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107154:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107157:	8b 52 1c             	mov    0x1c(%edx),%edx
c010715a:	c1 ea 0c             	shr    $0xc,%edx
c010715d:	42                   	inc    %edx
c010715e:	c1 e2 08             	shl    $0x8,%edx
c0107161:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107165:	89 14 24             	mov    %edx,(%esp)
c0107168:	e8 92 34 00 00       	call   c010a5ff <swapfs_write>
c010716d:	85 c0                	test   %eax,%eax
c010716f:	74 34                	je     c01071a5 <swap_out+0xfe>
                    cprintf("SWAP: failed to save\n");
c0107171:	c7 04 24 0f f4 10 c0 	movl   $0xc010f40f,(%esp)
c0107178:	e8 f5 91 ff ff       	call   c0100372 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c010717d:	a1 00 d1 1c c0       	mov    0xc01cd100,%eax
c0107182:	8b 40 10             	mov    0x10(%eax),%eax
c0107185:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107188:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010718f:	00 
c0107190:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107194:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107197:	89 54 24 04          	mov    %edx,0x4(%esp)
c010719b:	8b 55 08             	mov    0x8(%ebp),%edx
c010719e:	89 14 24             	mov    %edx,(%esp)
c01071a1:	ff d0                	call   *%eax
c01071a3:	eb 64                	jmp    c0107209 <swap_out+0x162>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c01071a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071a8:	8b 40 1c             	mov    0x1c(%eax),%eax
c01071ab:	c1 e8 0c             	shr    $0xc,%eax
c01071ae:	40                   	inc    %eax
c01071af:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01071b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01071b6:	89 44 24 08          	mov    %eax,0x8(%esp)
c01071ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01071bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01071c1:	c7 04 24 28 f4 10 c0 	movl   $0xc010f428,(%esp)
c01071c8:	e8 a5 91 ff ff       	call   c0100372 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c01071cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071d0:	8b 40 1c             	mov    0x1c(%eax),%eax
c01071d3:	c1 e8 0c             	shr    $0xc,%eax
c01071d6:	40                   	inc    %eax
c01071d7:	c1 e0 08             	shl    $0x8,%eax
c01071da:	89 c2                	mov    %eax,%edx
c01071dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01071df:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c01071e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01071e4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01071eb:	00 
c01071ec:	89 04 24             	mov    %eax,(%esp)
c01071ef:	e8 e5 e0 ff ff       	call   c01052d9 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c01071f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01071f7:	8b 40 0c             	mov    0xc(%eax),%eax
c01071fa:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01071fd:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107201:	89 04 24             	mov    %eax,(%esp)
c0107204:	e8 09 ef ff ff       	call   c0106112 <tlb_invalidate>
     for (i = 0; i != n; ++ i)
c0107209:	ff 45 f4             	incl   -0xc(%ebp)
c010720c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010720f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107212:	0f 85 a1 fe ff ff    	jne    c01070b9 <swap_out+0x12>
     }
     return i;
c0107218:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010721b:	89 ec                	mov    %ebp,%esp
c010721d:	5d                   	pop    %ebp
c010721e:	c3                   	ret    

c010721f <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c010721f:	55                   	push   %ebp
c0107220:	89 e5                	mov    %esp,%ebp
c0107222:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c0107225:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010722c:	e8 3b e0 ff ff       	call   c010526c <alloc_pages>
c0107231:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0107234:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107238:	75 24                	jne    c010725e <swap_in+0x3f>
c010723a:	c7 44 24 0c 68 f4 10 	movl   $0xc010f468,0xc(%esp)
c0107241:	c0 
c0107242:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c0107249:	c0 
c010724a:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0107251:	00 
c0107252:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c0107259:	e8 92 9b ff ff       	call   c0100df0 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c010725e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107261:	8b 40 0c             	mov    0xc(%eax),%eax
c0107264:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010726b:	00 
c010726c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010726f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107273:	89 04 24             	mov    %eax,(%esp)
c0107276:	e8 ac e6 ff ff       	call   c0105927 <get_pte>
c010727b:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c010727e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107281:	8b 00                	mov    (%eax),%eax
c0107283:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107286:	89 54 24 04          	mov    %edx,0x4(%esp)
c010728a:	89 04 24             	mov    %eax,(%esp)
c010728d:	e8 f9 32 00 00       	call   c010a58b <swapfs_read>
c0107292:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107295:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107299:	74 2a                	je     c01072c5 <swap_in+0xa6>
     {
        assert(r!=0);
c010729b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010729f:	75 24                	jne    c01072c5 <swap_in+0xa6>
c01072a1:	c7 44 24 0c 75 f4 10 	movl   $0xc010f475,0xc(%esp)
c01072a8:	c0 
c01072a9:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c01072b0:	c0 
c01072b1:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c01072b8:	00 
c01072b9:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c01072c0:	e8 2b 9b ff ff       	call   c0100df0 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c01072c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01072c8:	8b 00                	mov    (%eax),%eax
c01072ca:	c1 e8 08             	shr    $0x8,%eax
c01072cd:	89 c2                	mov    %eax,%edx
c01072cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01072d2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01072d6:	89 54 24 04          	mov    %edx,0x4(%esp)
c01072da:	c7 04 24 7c f4 10 c0 	movl   $0xc010f47c,(%esp)
c01072e1:	e8 8c 90 ff ff       	call   c0100372 <cprintf>
     *ptr_result=result;
c01072e6:	8b 45 10             	mov    0x10(%ebp),%eax
c01072e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01072ec:	89 10                	mov    %edx,(%eax)
     return 0;
c01072ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01072f3:	89 ec                	mov    %ebp,%esp
c01072f5:	5d                   	pop    %ebp
c01072f6:	c3                   	ret    

c01072f7 <check_content_set>:



static inline void
check_content_set(void)
{
c01072f7:	55                   	push   %ebp
c01072f8:	89 e5                	mov    %esp,%ebp
c01072fa:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01072fd:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107302:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107305:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c010730a:	83 f8 01             	cmp    $0x1,%eax
c010730d:	74 24                	je     c0107333 <check_content_set+0x3c>
c010730f:	c7 44 24 0c ba f4 10 	movl   $0xc010f4ba,0xc(%esp)
c0107316:	c0 
c0107317:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c010731e:	c0 
c010731f:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c0107326:	00 
c0107327:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c010732e:	e8 bd 9a ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0107333:	b8 10 10 00 00       	mov    $0x1010,%eax
c0107338:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010733b:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107340:	83 f8 01             	cmp    $0x1,%eax
c0107343:	74 24                	je     c0107369 <check_content_set+0x72>
c0107345:	c7 44 24 0c ba f4 10 	movl   $0xc010f4ba,0xc(%esp)
c010734c:	c0 
c010734d:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c0107354:	c0 
c0107355:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010735c:	00 
c010735d:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c0107364:	e8 87 9a ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0107369:	b8 00 20 00 00       	mov    $0x2000,%eax
c010736e:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107371:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107376:	83 f8 02             	cmp    $0x2,%eax
c0107379:	74 24                	je     c010739f <check_content_set+0xa8>
c010737b:	c7 44 24 0c c9 f4 10 	movl   $0xc010f4c9,0xc(%esp)
c0107382:	c0 
c0107383:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c010738a:	c0 
c010738b:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0107392:	00 
c0107393:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c010739a:	e8 51 9a ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c010739f:	b8 10 20 00 00       	mov    $0x2010,%eax
c01073a4:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01073a7:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c01073ac:	83 f8 02             	cmp    $0x2,%eax
c01073af:	74 24                	je     c01073d5 <check_content_set+0xde>
c01073b1:	c7 44 24 0c c9 f4 10 	movl   $0xc010f4c9,0xc(%esp)
c01073b8:	c0 
c01073b9:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c01073c0:	c0 
c01073c1:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c01073c8:	00 
c01073c9:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c01073d0:	e8 1b 9a ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c01073d5:	b8 00 30 00 00       	mov    $0x3000,%eax
c01073da:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01073dd:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c01073e2:	83 f8 03             	cmp    $0x3,%eax
c01073e5:	74 24                	je     c010740b <check_content_set+0x114>
c01073e7:	c7 44 24 0c d8 f4 10 	movl   $0xc010f4d8,0xc(%esp)
c01073ee:	c0 
c01073ef:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c01073f6:	c0 
c01073f7:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c01073fe:	00 
c01073ff:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c0107406:	e8 e5 99 ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c010740b:	b8 10 30 00 00       	mov    $0x3010,%eax
c0107410:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107413:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107418:	83 f8 03             	cmp    $0x3,%eax
c010741b:	74 24                	je     c0107441 <check_content_set+0x14a>
c010741d:	c7 44 24 0c d8 f4 10 	movl   $0xc010f4d8,0xc(%esp)
c0107424:	c0 
c0107425:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c010742c:	c0 
c010742d:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c0107434:	00 
c0107435:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c010743c:	e8 af 99 ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0107441:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107446:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107449:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c010744e:	83 f8 04             	cmp    $0x4,%eax
c0107451:	74 24                	je     c0107477 <check_content_set+0x180>
c0107453:	c7 44 24 0c e7 f4 10 	movl   $0xc010f4e7,0xc(%esp)
c010745a:	c0 
c010745b:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c0107462:	c0 
c0107463:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c010746a:	00 
c010746b:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c0107472:	e8 79 99 ff ff       	call   c0100df0 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0107477:	b8 10 40 00 00       	mov    $0x4010,%eax
c010747c:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010747f:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107484:	83 f8 04             	cmp    $0x4,%eax
c0107487:	74 24                	je     c01074ad <check_content_set+0x1b6>
c0107489:	c7 44 24 0c e7 f4 10 	movl   $0xc010f4e7,0xc(%esp)
c0107490:	c0 
c0107491:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c0107498:	c0 
c0107499:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c01074a0:	00 
c01074a1:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c01074a8:	e8 43 99 ff ff       	call   c0100df0 <__panic>
}
c01074ad:	90                   	nop
c01074ae:	89 ec                	mov    %ebp,%esp
c01074b0:	5d                   	pop    %ebp
c01074b1:	c3                   	ret    

c01074b2 <check_content_access>:

static inline int
check_content_access(void)
{
c01074b2:	55                   	push   %ebp
c01074b3:	89 e5                	mov    %esp,%ebp
c01074b5:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01074b8:	a1 00 d1 1c c0       	mov    0xc01cd100,%eax
c01074bd:	8b 40 1c             	mov    0x1c(%eax),%eax
c01074c0:	ff d0                	call   *%eax
c01074c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01074c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01074c8:	89 ec                	mov    %ebp,%esp
c01074ca:	5d                   	pop    %ebp
c01074cb:	c3                   	ret    

c01074cc <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c01074cc:	55                   	push   %ebp
c01074cd:	89 e5                	mov    %esp,%ebp
c01074cf:	83 ec 78             	sub    $0x78,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c01074d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01074d9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c01074e0:	c7 45 e8 84 cf 1c c0 	movl   $0xc01ccf84,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01074e7:	eb 6a                	jmp    c0107553 <check_swap+0x87>
        struct Page *p = le2page(le, page_link);
c01074e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01074ec:	83 e8 0c             	sub    $0xc,%eax
c01074ef:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(PageProperty(p));
c01074f2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01074f5:	83 c0 04             	add    $0x4,%eax
c01074f8:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c01074ff:	89 45 c0             	mov    %eax,-0x40(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107502:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107505:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107508:	0f a3 10             	bt     %edx,(%eax)
c010750b:	19 c0                	sbb    %eax,%eax
c010750d:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0107510:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107514:	0f 95 c0             	setne  %al
c0107517:	0f b6 c0             	movzbl %al,%eax
c010751a:	85 c0                	test   %eax,%eax
c010751c:	75 24                	jne    c0107542 <check_swap+0x76>
c010751e:	c7 44 24 0c f6 f4 10 	movl   $0xc010f4f6,0xc(%esp)
c0107525:	c0 
c0107526:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c010752d:	c0 
c010752e:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0107535:	00 
c0107536:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c010753d:	e8 ae 98 ff ff       	call   c0100df0 <__panic>
        count ++, total += p->property;
c0107542:	ff 45 f4             	incl   -0xc(%ebp)
c0107545:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107548:	8b 50 08             	mov    0x8(%eax),%edx
c010754b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010754e:	01 d0                	add    %edx,%eax
c0107550:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107553:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107556:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0107559:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010755c:	8b 40 04             	mov    0x4(%eax),%eax
     while ((le = list_next(le)) != &free_list) {
c010755f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107562:	81 7d e8 84 cf 1c c0 	cmpl   $0xc01ccf84,-0x18(%ebp)
c0107569:	0f 85 7a ff ff ff    	jne    c01074e9 <check_swap+0x1d>
     }
     assert(total == nr_free_pages());
c010756f:	e8 9a dd ff ff       	call   c010530e <nr_free_pages>
c0107574:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107577:	39 d0                	cmp    %edx,%eax
c0107579:	74 24                	je     c010759f <check_swap+0xd3>
c010757b:	c7 44 24 0c 06 f5 10 	movl   $0xc010f506,0xc(%esp)
c0107582:	c0 
c0107583:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c010758a:	c0 
c010758b:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0107592:	00 
c0107593:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c010759a:	e8 51 98 ff ff       	call   c0100df0 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c010759f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01075a2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01075a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075a9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01075ad:	c7 04 24 20 f5 10 c0 	movl   $0xc010f520,(%esp)
c01075b4:	e8 b9 8d ff ff       	call   c0100372 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01075b9:	e8 23 0c 00 00       	call   c01081e1 <mm_create>
c01075be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     assert(mm != NULL);
c01075c1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01075c5:	75 24                	jne    c01075eb <check_swap+0x11f>
c01075c7:	c7 44 24 0c 46 f5 10 	movl   $0xc010f546,0xc(%esp)
c01075ce:	c0 
c01075cf:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c01075d6:	c0 
c01075d7:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c01075de:	00 
c01075df:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c01075e6:	e8 05 98 ff ff       	call   c0100df0 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c01075eb:	a1 0c d1 1c c0       	mov    0xc01cd10c,%eax
c01075f0:	85 c0                	test   %eax,%eax
c01075f2:	74 24                	je     c0107618 <check_swap+0x14c>
c01075f4:	c7 44 24 0c 51 f5 10 	movl   $0xc010f551,0xc(%esp)
c01075fb:	c0 
c01075fc:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c0107603:	c0 
c0107604:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c010760b:	00 
c010760c:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c0107613:	e8 d8 97 ff ff       	call   c0100df0 <__panic>

     check_mm_struct = mm;
c0107618:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010761b:	a3 0c d1 1c c0       	mov    %eax,0xc01cd10c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0107620:	8b 15 00 9a 13 c0    	mov    0xc0139a00,%edx
c0107626:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107629:	89 50 0c             	mov    %edx,0xc(%eax)
c010762c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010762f:	8b 40 0c             	mov    0xc(%eax),%eax
c0107632:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(pgdir[0] == 0);
c0107635:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107638:	8b 00                	mov    (%eax),%eax
c010763a:	85 c0                	test   %eax,%eax
c010763c:	74 24                	je     c0107662 <check_swap+0x196>
c010763e:	c7 44 24 0c 69 f5 10 	movl   $0xc010f569,0xc(%esp)
c0107645:	c0 
c0107646:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c010764d:	c0 
c010764e:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c0107655:	00 
c0107656:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c010765d:	e8 8e 97 ff ff       	call   c0100df0 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0107662:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0107669:	00 
c010766a:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c0107671:	00 
c0107672:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0107679:	e8 0b 0c 00 00       	call   c0108289 <vma_create>
c010767e:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(vma != NULL);
c0107681:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107685:	75 24                	jne    c01076ab <check_swap+0x1df>
c0107687:	c7 44 24 0c 77 f5 10 	movl   $0xc010f577,0xc(%esp)
c010768e:	c0 
c010768f:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c0107696:	c0 
c0107697:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c010769e:	00 
c010769f:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c01076a6:	e8 45 97 ff ff       	call   c0100df0 <__panic>

     insert_vma_struct(mm, vma);
c01076ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01076ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01076b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01076b5:	89 04 24             	mov    %eax,(%esp)
c01076b8:	e8 63 0d 00 00       	call   c0108420 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c01076bd:	c7 04 24 84 f5 10 c0 	movl   $0xc010f584,(%esp)
c01076c4:	e8 a9 8c ff ff       	call   c0100372 <cprintf>
     pte_t *temp_ptep=NULL;
c01076c9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c01076d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01076d3:	8b 40 0c             	mov    0xc(%eax),%eax
c01076d6:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01076dd:	00 
c01076de:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01076e5:	00 
c01076e6:	89 04 24             	mov    %eax,(%esp)
c01076e9:	e8 39 e2 ff ff       	call   c0105927 <get_pte>
c01076ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(temp_ptep!= NULL);
c01076f1:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01076f5:	75 24                	jne    c010771b <check_swap+0x24f>
c01076f7:	c7 44 24 0c b8 f5 10 	movl   $0xc010f5b8,0xc(%esp)
c01076fe:	c0 
c01076ff:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c0107706:	c0 
c0107707:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c010770e:	00 
c010770f:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c0107716:	e8 d5 96 ff ff       	call   c0100df0 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c010771b:	c7 04 24 cc f5 10 c0 	movl   $0xc010f5cc,(%esp)
c0107722:	e8 4b 8c ff ff       	call   c0100372 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107727:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010772e:	e9 a2 00 00 00       	jmp    c01077d5 <check_swap+0x309>
          check_rp[i] = alloc_page();
c0107733:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010773a:	e8 2d db ff ff       	call   c010526c <alloc_pages>
c010773f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107742:	89 04 95 cc d0 1c c0 	mov    %eax,-0x3fe32f34(,%edx,4)
          assert(check_rp[i] != NULL );
c0107749:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010774c:	8b 04 85 cc d0 1c c0 	mov    -0x3fe32f34(,%eax,4),%eax
c0107753:	85 c0                	test   %eax,%eax
c0107755:	75 24                	jne    c010777b <check_swap+0x2af>
c0107757:	c7 44 24 0c f0 f5 10 	movl   $0xc010f5f0,0xc(%esp)
c010775e:	c0 
c010775f:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c0107766:	c0 
c0107767:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c010776e:	00 
c010776f:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c0107776:	e8 75 96 ff ff       	call   c0100df0 <__panic>
          assert(!PageProperty(check_rp[i]));
c010777b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010777e:	8b 04 85 cc d0 1c c0 	mov    -0x3fe32f34(,%eax,4),%eax
c0107785:	83 c0 04             	add    $0x4,%eax
c0107788:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c010778f:	89 45 b0             	mov    %eax,-0x50(%ebp)
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107792:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107795:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107798:	0f a3 10             	bt     %edx,(%eax)
c010779b:	19 c0                	sbb    %eax,%eax
c010779d:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c01077a0:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c01077a4:	0f 95 c0             	setne  %al
c01077a7:	0f b6 c0             	movzbl %al,%eax
c01077aa:	85 c0                	test   %eax,%eax
c01077ac:	74 24                	je     c01077d2 <check_swap+0x306>
c01077ae:	c7 44 24 0c 04 f6 10 	movl   $0xc010f604,0xc(%esp)
c01077b5:	c0 
c01077b6:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c01077bd:	c0 
c01077be:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c01077c5:	00 
c01077c6:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c01077cd:	e8 1e 96 ff ff       	call   c0100df0 <__panic>
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077d2:	ff 45 ec             	incl   -0x14(%ebp)
c01077d5:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01077d9:	0f 8e 54 ff ff ff    	jle    c0107733 <check_swap+0x267>
     }
     list_entry_t free_list_store = free_list;
c01077df:	a1 84 cf 1c c0       	mov    0xc01ccf84,%eax
c01077e4:	8b 15 88 cf 1c c0    	mov    0xc01ccf88,%edx
c01077ea:	89 45 98             	mov    %eax,-0x68(%ebp)
c01077ed:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01077f0:	c7 45 a4 84 cf 1c c0 	movl   $0xc01ccf84,-0x5c(%ebp)
    elm->prev = elm->next = elm;
c01077f7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01077fa:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c01077fd:	89 50 04             	mov    %edx,0x4(%eax)
c0107800:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107803:	8b 50 04             	mov    0x4(%eax),%edx
c0107806:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107809:	89 10                	mov    %edx,(%eax)
}
c010780b:	90                   	nop
c010780c:	c7 45 a8 84 cf 1c c0 	movl   $0xc01ccf84,-0x58(%ebp)
    return list->next == list;
c0107813:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107816:	8b 40 04             	mov    0x4(%eax),%eax
c0107819:	39 45 a8             	cmp    %eax,-0x58(%ebp)
c010781c:	0f 94 c0             	sete   %al
c010781f:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0107822:	85 c0                	test   %eax,%eax
c0107824:	75 24                	jne    c010784a <check_swap+0x37e>
c0107826:	c7 44 24 0c 1f f6 10 	movl   $0xc010f61f,0xc(%esp)
c010782d:	c0 
c010782e:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c0107835:	c0 
c0107836:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c010783d:	00 
c010783e:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c0107845:	e8 a6 95 ff ff       	call   c0100df0 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c010784a:	a1 8c cf 1c c0       	mov    0xc01ccf8c,%eax
c010784f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     nr_free = 0;
c0107852:	c7 05 8c cf 1c c0 00 	movl   $0x0,0xc01ccf8c
c0107859:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010785c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107863:	eb 1d                	jmp    c0107882 <check_swap+0x3b6>
        free_pages(check_rp[i],1);
c0107865:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107868:	8b 04 85 cc d0 1c c0 	mov    -0x3fe32f34(,%eax,4),%eax
c010786f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107876:	00 
c0107877:	89 04 24             	mov    %eax,(%esp)
c010787a:	e8 5a da ff ff       	call   c01052d9 <free_pages>
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010787f:	ff 45 ec             	incl   -0x14(%ebp)
c0107882:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107886:	7e dd                	jle    c0107865 <check_swap+0x399>
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0107888:	a1 8c cf 1c c0       	mov    0xc01ccf8c,%eax
c010788d:	83 f8 04             	cmp    $0x4,%eax
c0107890:	74 24                	je     c01078b6 <check_swap+0x3ea>
c0107892:	c7 44 24 0c 38 f6 10 	movl   $0xc010f638,0xc(%esp)
c0107899:	c0 
c010789a:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c01078a1:	c0 
c01078a2:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c01078a9:	00 
c01078aa:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c01078b1:	e8 3a 95 ff ff       	call   c0100df0 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c01078b6:	c7 04 24 5c f6 10 c0 	movl   $0xc010f65c,(%esp)
c01078bd:	e8 b0 8a ff ff       	call   c0100372 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c01078c2:	c7 05 10 d1 1c c0 00 	movl   $0x0,0xc01cd110
c01078c9:	00 00 00 
     
     check_content_set();
c01078cc:	e8 26 fa ff ff       	call   c01072f7 <check_content_set>
     assert( nr_free == 0);         
c01078d1:	a1 8c cf 1c c0       	mov    0xc01ccf8c,%eax
c01078d6:	85 c0                	test   %eax,%eax
c01078d8:	74 24                	je     c01078fe <check_swap+0x432>
c01078da:	c7 44 24 0c 83 f6 10 	movl   $0xc010f683,0xc(%esp)
c01078e1:	c0 
c01078e2:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c01078e9:	c0 
c01078ea:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c01078f1:	00 
c01078f2:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c01078f9:	e8 f2 94 ff ff       	call   c0100df0 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01078fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107905:	eb 25                	jmp    c010792c <check_swap+0x460>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0107907:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010790a:	c7 04 85 60 d0 1c c0 	movl   $0xffffffff,-0x3fe32fa0(,%eax,4)
c0107911:	ff ff ff ff 
c0107915:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107918:	8b 14 85 60 d0 1c c0 	mov    -0x3fe32fa0(,%eax,4),%edx
c010791f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107922:	89 14 85 a0 d0 1c c0 	mov    %edx,-0x3fe32f60(,%eax,4)
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107929:	ff 45 ec             	incl   -0x14(%ebp)
c010792c:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0107930:	7e d5                	jle    c0107907 <check_swap+0x43b>
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107932:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107939:	e9 e8 00 00 00       	jmp    c0107a26 <check_swap+0x55a>
         check_ptep[i]=0;
c010793e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107941:	c7 04 85 dc d0 1c c0 	movl   $0x0,-0x3fe32f24(,%eax,4)
c0107948:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c010794c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010794f:	40                   	inc    %eax
c0107950:	c1 e0 0c             	shl    $0xc,%eax
c0107953:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010795a:	00 
c010795b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010795f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107962:	89 04 24             	mov    %eax,(%esp)
c0107965:	e8 bd df ff ff       	call   c0105927 <get_pte>
c010796a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010796d:	89 04 95 dc d0 1c c0 	mov    %eax,-0x3fe32f24(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0107974:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107977:	8b 04 85 dc d0 1c c0 	mov    -0x3fe32f24(,%eax,4),%eax
c010797e:	85 c0                	test   %eax,%eax
c0107980:	75 24                	jne    c01079a6 <check_swap+0x4da>
c0107982:	c7 44 24 0c 90 f6 10 	movl   $0xc010f690,0xc(%esp)
c0107989:	c0 
c010798a:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c0107991:	c0 
c0107992:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107999:	00 
c010799a:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c01079a1:	e8 4a 94 ff ff       	call   c0100df0 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c01079a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01079a9:	8b 04 85 dc d0 1c c0 	mov    -0x3fe32f24(,%eax,4),%eax
c01079b0:	8b 00                	mov    (%eax),%eax
c01079b2:	89 04 24             	mov    %eax,(%esp)
c01079b5:	e8 7d f5 ff ff       	call   c0106f37 <pte2page>
c01079ba:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01079bd:	8b 14 95 cc d0 1c c0 	mov    -0x3fe32f34(,%edx,4),%edx
c01079c4:	39 d0                	cmp    %edx,%eax
c01079c6:	74 24                	je     c01079ec <check_swap+0x520>
c01079c8:	c7 44 24 0c a8 f6 10 	movl   $0xc010f6a8,0xc(%esp)
c01079cf:	c0 
c01079d0:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c01079d7:	c0 
c01079d8:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c01079df:	00 
c01079e0:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c01079e7:	e8 04 94 ff ff       	call   c0100df0 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c01079ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01079ef:	8b 04 85 dc d0 1c c0 	mov    -0x3fe32f24(,%eax,4),%eax
c01079f6:	8b 00                	mov    (%eax),%eax
c01079f8:	83 e0 01             	and    $0x1,%eax
c01079fb:	85 c0                	test   %eax,%eax
c01079fd:	75 24                	jne    c0107a23 <check_swap+0x557>
c01079ff:	c7 44 24 0c d0 f6 10 	movl   $0xc010f6d0,0xc(%esp)
c0107a06:	c0 
c0107a07:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c0107a0e:	c0 
c0107a0f:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107a16:	00 
c0107a17:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c0107a1e:	e8 cd 93 ff ff       	call   c0100df0 <__panic>
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107a23:	ff 45 ec             	incl   -0x14(%ebp)
c0107a26:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107a2a:	0f 8e 0e ff ff ff    	jle    c010793e <check_swap+0x472>
     }
     cprintf("set up init env for check_swap over!\n");
c0107a30:	c7 04 24 ec f6 10 c0 	movl   $0xc010f6ec,(%esp)
c0107a37:	e8 36 89 ff ff       	call   c0100372 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0107a3c:	e8 71 fa ff ff       	call   c01074b2 <check_content_access>
c0107a41:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(ret==0);
c0107a44:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0107a48:	74 24                	je     c0107a6e <check_swap+0x5a2>
c0107a4a:	c7 44 24 0c 12 f7 10 	movl   $0xc010f712,0xc(%esp)
c0107a51:	c0 
c0107a52:	c7 44 24 08 fa f3 10 	movl   $0xc010f3fa,0x8(%esp)
c0107a59:	c0 
c0107a5a:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0107a61:	00 
c0107a62:	c7 04 24 94 f3 10 c0 	movl   $0xc010f394,(%esp)
c0107a69:	e8 82 93 ff ff       	call   c0100df0 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107a6e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107a75:	eb 1d                	jmp    c0107a94 <check_swap+0x5c8>
         free_pages(check_rp[i],1);
c0107a77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a7a:	8b 04 85 cc d0 1c c0 	mov    -0x3fe32f34(,%eax,4),%eax
c0107a81:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107a88:	00 
c0107a89:	89 04 24             	mov    %eax,(%esp)
c0107a8c:	e8 48 d8 ff ff       	call   c01052d9 <free_pages>
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107a91:	ff 45 ec             	incl   -0x14(%ebp)
c0107a94:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107a98:	7e dd                	jle    c0107a77 <check_swap+0x5ab>
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0107a9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107a9d:	8b 00                	mov    (%eax),%eax
c0107a9f:	89 04 24             	mov    %eax,(%esp)
c0107aa2:	e8 d0 f4 ff ff       	call   c0106f77 <pde2page>
c0107aa7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107aae:	00 
c0107aaf:	89 04 24             	mov    %eax,(%esp)
c0107ab2:	e8 22 d8 ff ff       	call   c01052d9 <free_pages>
     pgdir[0] = 0;
c0107ab7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107aba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0107ac0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107ac3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107aca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107acd:	89 04 24             	mov    %eax,(%esp)
c0107ad0:	e8 81 0a 00 00       	call   c0108556 <mm_destroy>
     check_mm_struct = NULL;
c0107ad5:	c7 05 0c d1 1c c0 00 	movl   $0x0,0xc01cd10c
c0107adc:	00 00 00 
     
     nr_free = nr_free_store;
c0107adf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107ae2:	a3 8c cf 1c c0       	mov    %eax,0xc01ccf8c
     free_list = free_list_store;
c0107ae7:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107aea:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0107aed:	a3 84 cf 1c c0       	mov    %eax,0xc01ccf84
c0107af2:	89 15 88 cf 1c c0    	mov    %edx,0xc01ccf88

     
     le = &free_list;
c0107af8:	c7 45 e8 84 cf 1c c0 	movl   $0xc01ccf84,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107aff:	eb 1c                	jmp    c0107b1d <check_swap+0x651>
         struct Page *p = le2page(le, page_link);
c0107b01:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107b04:	83 e8 0c             	sub    $0xc,%eax
c0107b07:	89 45 cc             	mov    %eax,-0x34(%ebp)
         count --, total -= p->property;
c0107b0a:	ff 4d f4             	decl   -0xc(%ebp)
c0107b0d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107b10:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0107b13:	8b 48 08             	mov    0x8(%eax),%ecx
c0107b16:	89 d0                	mov    %edx,%eax
c0107b18:	29 c8                	sub    %ecx,%eax
c0107b1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107b1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107b20:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return listelm->next;
c0107b23:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107b26:	8b 40 04             	mov    0x4(%eax),%eax
     while ((le = list_next(le)) != &free_list) {
c0107b29:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107b2c:	81 7d e8 84 cf 1c c0 	cmpl   $0xc01ccf84,-0x18(%ebp)
c0107b33:	75 cc                	jne    c0107b01 <check_swap+0x635>
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107b35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b38:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b3f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107b43:	c7 04 24 19 f7 10 c0 	movl   $0xc010f719,(%esp)
c0107b4a:	e8 23 88 ff ff       	call   c0100372 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0107b4f:	c7 04 24 33 f7 10 c0 	movl   $0xc010f733,(%esp)
c0107b56:	e8 17 88 ff ff       	call   c0100372 <cprintf>
}
c0107b5b:	90                   	nop
c0107b5c:	89 ec                	mov    %ebp,%esp
c0107b5e:	5d                   	pop    %ebp
c0107b5f:	c3                   	ret    

c0107b60 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107b60:	55                   	push   %ebp
c0107b61:	89 e5                	mov    %esp,%ebp
c0107b63:	83 ec 10             	sub    $0x10,%esp
c0107b66:	c7 45 fc 04 d1 1c c0 	movl   $0xc01cd104,-0x4(%ebp)
    elm->prev = elm->next = elm;
c0107b6d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107b70:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107b73:	89 50 04             	mov    %edx,0x4(%eax)
c0107b76:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107b79:	8b 50 04             	mov    0x4(%eax),%edx
c0107b7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107b7f:	89 10                	mov    %edx,(%eax)
}
c0107b81:	90                   	nop
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107b82:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b85:	c7 40 14 04 d1 1c c0 	movl   $0xc01cd104,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0107b8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107b91:	89 ec                	mov    %ebp,%esp
c0107b93:	5d                   	pop    %ebp
c0107b94:	c3                   	ret    

c0107b95 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107b95:	55                   	push   %ebp
c0107b96:	89 e5                	mov    %esp,%ebp
c0107b98:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107b9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0107b9e:	8b 40 14             	mov    0x14(%eax),%eax
c0107ba1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107ba4:	8b 45 10             	mov    0x10(%ebp),%eax
c0107ba7:	83 c0 14             	add    $0x14,%eax
c0107baa:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107bad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107bb1:	74 06                	je     c0107bb9 <_fifo_map_swappable+0x24>
c0107bb3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107bb7:	75 24                	jne    c0107bdd <_fifo_map_swappable+0x48>
c0107bb9:	c7 44 24 0c 4c f7 10 	movl   $0xc010f74c,0xc(%esp)
c0107bc0:	c0 
c0107bc1:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107bc8:	c0 
c0107bc9:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107bd0:	00 
c0107bd1:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107bd8:	e8 13 92 ff ff       	call   c0100df0 <__panic>
c0107bdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107be3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107be6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107bec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107bef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107bf2:	89 45 e0             	mov    %eax,-0x20(%ebp)
    __list_add(elm, listelm, listelm->next);
c0107bf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107bf8:	8b 40 04             	mov    0x4(%eax),%eax
c0107bfb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107bfe:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0107c01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107c04:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0107c07:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    prev->next = next->prev = elm;
c0107c0a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107c0d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107c10:	89 10                	mov    %edx,(%eax)
c0107c12:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107c15:	8b 10                	mov    (%eax),%edx
c0107c17:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107c1a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107c1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107c20:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107c23:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107c26:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107c29:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107c2c:	89 10                	mov    %edx,(%eax)
}
c0107c2e:	90                   	nop
}
c0107c2f:	90                   	nop
}
c0107c30:	90                   	nop
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add(head, entry);
    return 0;
c0107c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107c36:	89 ec                	mov    %ebp,%esp
c0107c38:	5d                   	pop    %ebp
c0107c39:	c3                   	ret    

c0107c3a <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107c3a:	55                   	push   %ebp
c0107c3b:	89 e5                	mov    %esp,%ebp
c0107c3d:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107c40:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c43:	8b 40 14             	mov    0x14(%eax),%eax
c0107c46:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107c49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107c4d:	75 24                	jne    c0107c73 <_fifo_swap_out_victim+0x39>
c0107c4f:	c7 44 24 0c 93 f7 10 	movl   $0xc010f793,0xc(%esp)
c0107c56:	c0 
c0107c57:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107c5e:	c0 
c0107c5f:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107c66:	00 
c0107c67:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107c6e:	e8 7d 91 ff ff       	call   c0100df0 <__panic>
     assert(in_tick==0);
c0107c73:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107c77:	74 24                	je     c0107c9d <_fifo_swap_out_victim+0x63>
c0107c79:	c7 44 24 0c a0 f7 10 	movl   $0xc010f7a0,0xc(%esp)
c0107c80:	c0 
c0107c81:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107c88:	c0 
c0107c89:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107c90:	00 
c0107c91:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107c98:	e8 53 91 ff ff       	call   c0100df0 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  assign the value of *ptr_page to the addr of this page
     list_entry_t *le = head->prev;
c0107c9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ca0:	8b 00                	mov    (%eax),%eax
c0107ca2:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0107ca5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ca8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107cab:	75 24                	jne    c0107cd1 <_fifo_swap_out_victim+0x97>
c0107cad:	c7 44 24 0c ab f7 10 	movl   $0xc010f7ab,0xc(%esp)
c0107cb4:	c0 
c0107cb5:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107cbc:	c0 
c0107cbd:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c0107cc4:	00 
c0107cc5:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107ccc:	e8 1f 91 ff ff       	call   c0100df0 <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0107cd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107cd4:	83 e8 14             	sub    $0x14,%eax
c0107cd7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107cda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107cdd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    __list_del(listelm->prev, listelm->next);
c0107ce0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107ce3:	8b 40 04             	mov    0x4(%eax),%eax
c0107ce6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107ce9:	8b 12                	mov    (%edx),%edx
c0107ceb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107cee:	89 45 e0             	mov    %eax,-0x20(%ebp)
    prev->next = next;
c0107cf1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107cf4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107cf7:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107cfd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107d00:	89 10                	mov    %edx,(%eax)
}
c0107d02:	90                   	nop
}
c0107d03:	90                   	nop
     list_del(le);
     assert(p !=NULL);
c0107d04:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107d08:	75 24                	jne    c0107d2e <_fifo_swap_out_victim+0xf4>
c0107d0a:	c7 44 24 0c b4 f7 10 	movl   $0xc010f7b4,0xc(%esp)
c0107d11:	c0 
c0107d12:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107d19:	c0 
c0107d1a:	c7 44 24 04 4b 00 00 	movl   $0x4b,0x4(%esp)
c0107d21:	00 
c0107d22:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107d29:	e8 c2 90 ff ff       	call   c0100df0 <__panic>
     *ptr_page = p;
c0107d2e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107d31:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107d34:	89 10                	mov    %edx,(%eax)
     return 0;
c0107d36:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107d3b:	89 ec                	mov    %ebp,%esp
c0107d3d:	5d                   	pop    %ebp
c0107d3e:	c3                   	ret    

c0107d3f <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107d3f:	55                   	push   %ebp
c0107d40:	89 e5                	mov    %esp,%ebp
c0107d42:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107d45:	c7 04 24 c0 f7 10 c0 	movl   $0xc010f7c0,(%esp)
c0107d4c:	e8 21 86 ff ff       	call   c0100372 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107d51:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107d56:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107d59:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107d5e:	83 f8 04             	cmp    $0x4,%eax
c0107d61:	74 24                	je     c0107d87 <_fifo_check_swap+0x48>
c0107d63:	c7 44 24 0c e6 f7 10 	movl   $0xc010f7e6,0xc(%esp)
c0107d6a:	c0 
c0107d6b:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107d72:	c0 
c0107d73:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0107d7a:	00 
c0107d7b:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107d82:	e8 69 90 ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107d87:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c0107d8e:	e8 df 85 ff ff       	call   c0100372 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107d93:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107d98:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107d9b:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107da0:	83 f8 04             	cmp    $0x4,%eax
c0107da3:	74 24                	je     c0107dc9 <_fifo_check_swap+0x8a>
c0107da5:	c7 44 24 0c e6 f7 10 	movl   $0xc010f7e6,0xc(%esp)
c0107dac:	c0 
c0107dad:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107db4:	c0 
c0107db5:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0107dbc:	00 
c0107dbd:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107dc4:	e8 27 90 ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107dc9:	c7 04 24 20 f8 10 c0 	movl   $0xc010f820,(%esp)
c0107dd0:	e8 9d 85 ff ff       	call   c0100372 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107dd5:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107dda:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107ddd:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107de2:	83 f8 04             	cmp    $0x4,%eax
c0107de5:	74 24                	je     c0107e0b <_fifo_check_swap+0xcc>
c0107de7:	c7 44 24 0c e6 f7 10 	movl   $0xc010f7e6,0xc(%esp)
c0107dee:	c0 
c0107def:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107df6:	c0 
c0107df7:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0107dfe:	00 
c0107dff:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107e06:	e8 e5 8f ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107e0b:	c7 04 24 48 f8 10 c0 	movl   $0xc010f848,(%esp)
c0107e12:	e8 5b 85 ff ff       	call   c0100372 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107e17:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107e1c:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107e1f:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107e24:	83 f8 04             	cmp    $0x4,%eax
c0107e27:	74 24                	je     c0107e4d <_fifo_check_swap+0x10e>
c0107e29:	c7 44 24 0c e6 f7 10 	movl   $0xc010f7e6,0xc(%esp)
c0107e30:	c0 
c0107e31:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107e38:	c0 
c0107e39:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0107e40:	00 
c0107e41:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107e48:	e8 a3 8f ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107e4d:	c7 04 24 70 f8 10 c0 	movl   $0xc010f870,(%esp)
c0107e54:	e8 19 85 ff ff       	call   c0100372 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107e59:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107e5e:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107e61:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107e66:	83 f8 05             	cmp    $0x5,%eax
c0107e69:	74 24                	je     c0107e8f <_fifo_check_swap+0x150>
c0107e6b:	c7 44 24 0c 96 f8 10 	movl   $0xc010f896,0xc(%esp)
c0107e72:	c0 
c0107e73:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107e7a:	c0 
c0107e7b:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c0107e82:	00 
c0107e83:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107e8a:	e8 61 8f ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107e8f:	c7 04 24 48 f8 10 c0 	movl   $0xc010f848,(%esp)
c0107e96:	e8 d7 84 ff ff       	call   c0100372 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107e9b:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107ea0:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107ea3:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107ea8:	83 f8 05             	cmp    $0x5,%eax
c0107eab:	74 24                	je     c0107ed1 <_fifo_check_swap+0x192>
c0107ead:	c7 44 24 0c 96 f8 10 	movl   $0xc010f896,0xc(%esp)
c0107eb4:	c0 
c0107eb5:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107ebc:	c0 
c0107ebd:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0107ec4:	00 
c0107ec5:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107ecc:	e8 1f 8f ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107ed1:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c0107ed8:	e8 95 84 ff ff       	call   c0100372 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107edd:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107ee2:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107ee5:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107eea:	83 f8 06             	cmp    $0x6,%eax
c0107eed:	74 24                	je     c0107f13 <_fifo_check_swap+0x1d4>
c0107eef:	c7 44 24 0c a5 f8 10 	movl   $0xc010f8a5,0xc(%esp)
c0107ef6:	c0 
c0107ef7:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107efe:	c0 
c0107eff:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0107f06:	00 
c0107f07:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107f0e:	e8 dd 8e ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107f13:	c7 04 24 48 f8 10 c0 	movl   $0xc010f848,(%esp)
c0107f1a:	e8 53 84 ff ff       	call   c0100372 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107f1f:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107f24:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107f27:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107f2c:	83 f8 07             	cmp    $0x7,%eax
c0107f2f:	74 24                	je     c0107f55 <_fifo_check_swap+0x216>
c0107f31:	c7 44 24 0c b4 f8 10 	movl   $0xc010f8b4,0xc(%esp)
c0107f38:	c0 
c0107f39:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107f40:	c0 
c0107f41:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0107f48:	00 
c0107f49:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107f50:	e8 9b 8e ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107f55:	c7 04 24 c0 f7 10 c0 	movl   $0xc010f7c0,(%esp)
c0107f5c:	e8 11 84 ff ff       	call   c0100372 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107f61:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107f66:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107f69:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107f6e:	83 f8 08             	cmp    $0x8,%eax
c0107f71:	74 24                	je     c0107f97 <_fifo_check_swap+0x258>
c0107f73:	c7 44 24 0c c3 f8 10 	movl   $0xc010f8c3,0xc(%esp)
c0107f7a:	c0 
c0107f7b:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107f82:	c0 
c0107f83:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107f8a:	00 
c0107f8b:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107f92:	e8 59 8e ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107f97:	c7 04 24 20 f8 10 c0 	movl   $0xc010f820,(%esp)
c0107f9e:	e8 cf 83 ff ff       	call   c0100372 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107fa3:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107fa8:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107fab:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107fb0:	83 f8 09             	cmp    $0x9,%eax
c0107fb3:	74 24                	je     c0107fd9 <_fifo_check_swap+0x29a>
c0107fb5:	c7 44 24 0c d2 f8 10 	movl   $0xc010f8d2,0xc(%esp)
c0107fbc:	c0 
c0107fbd:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0107fc4:	c0 
c0107fc5:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c0107fcc:	00 
c0107fcd:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0107fd4:	e8 17 8e ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107fd9:	c7 04 24 70 f8 10 c0 	movl   $0xc010f870,(%esp)
c0107fe0:	e8 8d 83 ff ff       	call   c0100372 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107fe5:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107fea:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0107fed:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0107ff2:	83 f8 0a             	cmp    $0xa,%eax
c0107ff5:	74 24                	je     c010801b <_fifo_check_swap+0x2dc>
c0107ff7:	c7 44 24 0c e1 f8 10 	movl   $0xc010f8e1,0xc(%esp)
c0107ffe:	c0 
c0107fff:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0108006:	c0 
c0108007:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010800e:	00 
c010800f:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0108016:	e8 d5 8d ff ff       	call   c0100df0 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c010801b:	c7 04 24 f8 f7 10 c0 	movl   $0xc010f7f8,(%esp)
c0108022:	e8 4b 83 ff ff       	call   c0100372 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c0108027:	b8 00 10 00 00       	mov    $0x1000,%eax
c010802c:	0f b6 00             	movzbl (%eax),%eax
c010802f:	3c 0a                	cmp    $0xa,%al
c0108031:	74 24                	je     c0108057 <_fifo_check_swap+0x318>
c0108033:	c7 44 24 0c f4 f8 10 	movl   $0xc010f8f4,0xc(%esp)
c010803a:	c0 
c010803b:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0108042:	c0 
c0108043:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010804a:	00 
c010804b:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0108052:	e8 99 8d ff ff       	call   c0100df0 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0108057:	b8 00 10 00 00       	mov    $0x1000,%eax
c010805c:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c010805f:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c0108064:	83 f8 0b             	cmp    $0xb,%eax
c0108067:	74 24                	je     c010808d <_fifo_check_swap+0x34e>
c0108069:	c7 44 24 0c 15 f9 10 	movl   $0xc010f915,0xc(%esp)
c0108070:	c0 
c0108071:	c7 44 24 08 6a f7 10 	movl   $0xc010f76a,0x8(%esp)
c0108078:	c0 
c0108079:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
c0108080:	00 
c0108081:	c7 04 24 7f f7 10 c0 	movl   $0xc010f77f,(%esp)
c0108088:	e8 63 8d ff ff       	call   c0100df0 <__panic>
    return 0;
c010808d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108092:	89 ec                	mov    %ebp,%esp
c0108094:	5d                   	pop    %ebp
c0108095:	c3                   	ret    

c0108096 <_fifo_init>:


static int
_fifo_init(void)
{
c0108096:	55                   	push   %ebp
c0108097:	89 e5                	mov    %esp,%ebp
    return 0;
c0108099:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010809e:	5d                   	pop    %ebp
c010809f:	c3                   	ret    

c01080a0 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c01080a0:	55                   	push   %ebp
c01080a1:	89 e5                	mov    %esp,%ebp
    return 0;
c01080a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01080a8:	5d                   	pop    %ebp
c01080a9:	c3                   	ret    

c01080aa <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c01080aa:	55                   	push   %ebp
c01080ab:	89 e5                	mov    %esp,%ebp
c01080ad:	b8 00 00 00 00       	mov    $0x0,%eax
c01080b2:	5d                   	pop    %ebp
c01080b3:	c3                   	ret    

c01080b4 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c01080b4:	55                   	push   %ebp
c01080b5:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c01080b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01080ba:	8b 40 18             	mov    0x18(%eax),%eax
}
c01080bd:	5d                   	pop    %ebp
c01080be:	c3                   	ret    

c01080bf <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c01080bf:	55                   	push   %ebp
c01080c0:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c01080c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01080c5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01080c8:	89 50 18             	mov    %edx,0x18(%eax)
}
c01080cb:	90                   	nop
c01080cc:	5d                   	pop    %ebp
c01080cd:	c3                   	ret    

c01080ce <page2ppn>:
page2ppn(struct Page *page) {
c01080ce:	55                   	push   %ebp
c01080cf:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01080d1:	8b 15 a0 cf 1c c0    	mov    0xc01ccfa0,%edx
c01080d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01080da:	29 d0                	sub    %edx,%eax
c01080dc:	c1 f8 05             	sar    $0x5,%eax
}
c01080df:	5d                   	pop    %ebp
c01080e0:	c3                   	ret    

c01080e1 <page2pa>:
page2pa(struct Page *page) {
c01080e1:	55                   	push   %ebp
c01080e2:	89 e5                	mov    %esp,%ebp
c01080e4:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01080e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01080ea:	89 04 24             	mov    %eax,(%esp)
c01080ed:	e8 dc ff ff ff       	call   c01080ce <page2ppn>
c01080f2:	c1 e0 0c             	shl    $0xc,%eax
}
c01080f5:	89 ec                	mov    %ebp,%esp
c01080f7:	5d                   	pop    %ebp
c01080f8:	c3                   	ret    

c01080f9 <pa2page>:
pa2page(uintptr_t pa) {
c01080f9:	55                   	push   %ebp
c01080fa:	89 e5                	mov    %esp,%ebp
c01080fc:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01080ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0108102:	c1 e8 0c             	shr    $0xc,%eax
c0108105:	89 c2                	mov    %eax,%edx
c0108107:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c010810c:	39 c2                	cmp    %eax,%edx
c010810e:	72 1c                	jb     c010812c <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0108110:	c7 44 24 08 38 f9 10 	movl   $0xc010f938,0x8(%esp)
c0108117:	c0 
c0108118:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010811f:	00 
c0108120:	c7 04 24 57 f9 10 c0 	movl   $0xc010f957,(%esp)
c0108127:	e8 c4 8c ff ff       	call   c0100df0 <__panic>
    return &pages[PPN(pa)];
c010812c:	8b 15 a0 cf 1c c0    	mov    0xc01ccfa0,%edx
c0108132:	8b 45 08             	mov    0x8(%ebp),%eax
c0108135:	c1 e8 0c             	shr    $0xc,%eax
c0108138:	c1 e0 05             	shl    $0x5,%eax
c010813b:	01 d0                	add    %edx,%eax
}
c010813d:	89 ec                	mov    %ebp,%esp
c010813f:	5d                   	pop    %ebp
c0108140:	c3                   	ret    

c0108141 <page2kva>:
page2kva(struct Page *page) {
c0108141:	55                   	push   %ebp
c0108142:	89 e5                	mov    %esp,%ebp
c0108144:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0108147:	8b 45 08             	mov    0x8(%ebp),%eax
c010814a:	89 04 24             	mov    %eax,(%esp)
c010814d:	e8 8f ff ff ff       	call   c01080e1 <page2pa>
c0108152:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108155:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108158:	c1 e8 0c             	shr    $0xc,%eax
c010815b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010815e:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c0108163:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108166:	72 23                	jb     c010818b <page2kva+0x4a>
c0108168:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010816b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010816f:	c7 44 24 08 68 f9 10 	movl   $0xc010f968,0x8(%esp)
c0108176:	c0 
c0108177:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010817e:	00 
c010817f:	c7 04 24 57 f9 10 c0 	movl   $0xc010f957,(%esp)
c0108186:	e8 65 8c ff ff       	call   c0100df0 <__panic>
c010818b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010818e:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0108193:	89 ec                	mov    %ebp,%esp
c0108195:	5d                   	pop    %ebp
c0108196:	c3                   	ret    

c0108197 <pte2page>:
pte2page(pte_t pte) {
c0108197:	55                   	push   %ebp
c0108198:	89 e5                	mov    %esp,%ebp
c010819a:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c010819d:	8b 45 08             	mov    0x8(%ebp),%eax
c01081a0:	83 e0 01             	and    $0x1,%eax
c01081a3:	85 c0                	test   %eax,%eax
c01081a5:	75 1c                	jne    c01081c3 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c01081a7:	c7 44 24 08 8c f9 10 	movl   $0xc010f98c,0x8(%esp)
c01081ae:	c0 
c01081af:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c01081b6:	00 
c01081b7:	c7 04 24 57 f9 10 c0 	movl   $0xc010f957,(%esp)
c01081be:	e8 2d 8c ff ff       	call   c0100df0 <__panic>
    return pa2page(PTE_ADDR(pte));
c01081c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01081c6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01081cb:	89 04 24             	mov    %eax,(%esp)
c01081ce:	e8 26 ff ff ff       	call   c01080f9 <pa2page>
}
c01081d3:	89 ec                	mov    %ebp,%esp
c01081d5:	5d                   	pop    %ebp
c01081d6:	c3                   	ret    

c01081d7 <page_ref>:
page_ref(struct Page *page) {
c01081d7:	55                   	push   %ebp
c01081d8:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01081da:	8b 45 08             	mov    0x8(%ebp),%eax
c01081dd:	8b 00                	mov    (%eax),%eax
}
c01081df:	5d                   	pop    %ebp
c01081e0:	c3                   	ret    

c01081e1 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c01081e1:	55                   	push   %ebp
c01081e2:	89 e5                	mov    %esp,%ebp
c01081e4:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c01081e7:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c01081ee:	e8 e8 cb ff ff       	call   c0104ddb <kmalloc>
c01081f3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c01081f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01081fa:	0f 84 82 00 00 00    	je     c0108282 <mm_create+0xa1>
        list_init(&(mm->mmap_list));
c0108200:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108203:	89 45 f0             	mov    %eax,-0x10(%ebp)
    elm->prev = elm->next = elm;
c0108206:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108209:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010820c:	89 50 04             	mov    %edx,0x4(%eax)
c010820f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108212:	8b 50 04             	mov    0x4(%eax),%edx
c0108215:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108218:	89 10                	mov    %edx,(%eax)
}
c010821a:	90                   	nop
        mm->mmap_cache = NULL;
c010821b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010821e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0108225:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108228:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c010822f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108232:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0108239:	a1 44 d0 1c c0       	mov    0xc01cd044,%eax
c010823e:	85 c0                	test   %eax,%eax
c0108240:	74 0d                	je     c010824f <mm_create+0x6e>
c0108242:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108245:	89 04 24             	mov    %eax,(%esp)
c0108248:	e8 d6 ed ff ff       	call   c0107023 <swap_init_mm>
c010824d:	eb 0a                	jmp    c0108259 <mm_create+0x78>
        else mm->sm_priv = NULL;
c010824f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108252:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0108259:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0108260:	00 
c0108261:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108264:	89 04 24             	mov    %eax,(%esp)
c0108267:	e8 53 fe ff ff       	call   c01080bf <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c010826c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010826f:	83 c0 1c             	add    $0x1c,%eax
c0108272:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108279:	00 
c010827a:	89 04 24             	mov    %eax,(%esp)
c010827d:	e8 47 1b 00 00       	call   c0109dc9 <sem_init>
    }    
    return mm;
c0108282:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108285:	89 ec                	mov    %ebp,%esp
c0108287:	5d                   	pop    %ebp
c0108288:	c3                   	ret    

c0108289 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0108289:	55                   	push   %ebp
c010828a:	89 e5                	mov    %esp,%ebp
c010828c:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c010828f:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0108296:	e8 40 cb ff ff       	call   c0104ddb <kmalloc>
c010829b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c010829e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01082a2:	74 1b                	je     c01082bf <vma_create+0x36>
        vma->vm_start = vm_start;
c01082a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082a7:	8b 55 08             	mov    0x8(%ebp),%edx
c01082aa:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c01082ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082b0:	8b 55 0c             	mov    0xc(%ebp),%edx
c01082b3:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c01082b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082b9:	8b 55 10             	mov    0x10(%ebp),%edx
c01082bc:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c01082bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01082c2:	89 ec                	mov    %ebp,%esp
c01082c4:	5d                   	pop    %ebp
c01082c5:	c3                   	ret    

c01082c6 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c01082c6:	55                   	push   %ebp
c01082c7:	89 e5                	mov    %esp,%ebp
c01082c9:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c01082cc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c01082d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01082d7:	0f 84 95 00 00 00    	je     c0108372 <find_vma+0xac>
        vma = mm->mmap_cache;
c01082dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01082e0:	8b 40 08             	mov    0x8(%eax),%eax
c01082e3:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c01082e6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01082ea:	74 16                	je     c0108302 <find_vma+0x3c>
c01082ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01082ef:	8b 40 04             	mov    0x4(%eax),%eax
c01082f2:	39 45 0c             	cmp    %eax,0xc(%ebp)
c01082f5:	72 0b                	jb     c0108302 <find_vma+0x3c>
c01082f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01082fa:	8b 40 08             	mov    0x8(%eax),%eax
c01082fd:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0108300:	72 61                	jb     c0108363 <find_vma+0x9d>
                bool found = 0;
c0108302:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0108309:	8b 45 08             	mov    0x8(%ebp),%eax
c010830c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010830f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108312:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0108315:	eb 28                	jmp    c010833f <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0108317:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010831a:	83 e8 10             	sub    $0x10,%eax
c010831d:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0108320:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108323:	8b 40 04             	mov    0x4(%eax),%eax
c0108326:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0108329:	72 14                	jb     c010833f <find_vma+0x79>
c010832b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010832e:	8b 40 08             	mov    0x8(%eax),%eax
c0108331:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0108334:	73 09                	jae    c010833f <find_vma+0x79>
                        found = 1;
c0108336:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c010833d:	eb 17                	jmp    c0108356 <find_vma+0x90>
c010833f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108342:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return listelm->next;
c0108345:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108348:	8b 40 04             	mov    0x4(%eax),%eax
                while ((le = list_next(le)) != list) {
c010834b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010834e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108351:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108354:	75 c1                	jne    c0108317 <find_vma+0x51>
                    }
                }
                if (!found) {
c0108356:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010835a:	75 07                	jne    c0108363 <find_vma+0x9d>
                    vma = NULL;
c010835c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0108363:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108367:	74 09                	je     c0108372 <find_vma+0xac>
            mm->mmap_cache = vma;
c0108369:	8b 45 08             	mov    0x8(%ebp),%eax
c010836c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010836f:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0108372:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0108375:	89 ec                	mov    %ebp,%esp
c0108377:	5d                   	pop    %ebp
c0108378:	c3                   	ret    

c0108379 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0108379:	55                   	push   %ebp
c010837a:	89 e5                	mov    %esp,%ebp
c010837c:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c010837f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108382:	8b 50 04             	mov    0x4(%eax),%edx
c0108385:	8b 45 08             	mov    0x8(%ebp),%eax
c0108388:	8b 40 08             	mov    0x8(%eax),%eax
c010838b:	39 c2                	cmp    %eax,%edx
c010838d:	72 24                	jb     c01083b3 <check_vma_overlap+0x3a>
c010838f:	c7 44 24 0c ad f9 10 	movl   $0xc010f9ad,0xc(%esp)
c0108396:	c0 
c0108397:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c010839e:	c0 
c010839f:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c01083a6:	00 
c01083a7:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c01083ae:	e8 3d 8a ff ff       	call   c0100df0 <__panic>
    assert(prev->vm_end <= next->vm_start);
c01083b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01083b6:	8b 50 08             	mov    0x8(%eax),%edx
c01083b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083bc:	8b 40 04             	mov    0x4(%eax),%eax
c01083bf:	39 c2                	cmp    %eax,%edx
c01083c1:	76 24                	jbe    c01083e7 <check_vma_overlap+0x6e>
c01083c3:	c7 44 24 0c f0 f9 10 	movl   $0xc010f9f0,0xc(%esp)
c01083ca:	c0 
c01083cb:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c01083d2:	c0 
c01083d3:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c01083da:	00 
c01083db:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c01083e2:	e8 09 8a ff ff       	call   c0100df0 <__panic>
    assert(next->vm_start < next->vm_end);
c01083e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083ea:	8b 50 04             	mov    0x4(%eax),%edx
c01083ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083f0:	8b 40 08             	mov    0x8(%eax),%eax
c01083f3:	39 c2                	cmp    %eax,%edx
c01083f5:	72 24                	jb     c010841b <check_vma_overlap+0xa2>
c01083f7:	c7 44 24 0c 0f fa 10 	movl   $0xc010fa0f,0xc(%esp)
c01083fe:	c0 
c01083ff:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108406:	c0 
c0108407:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010840e:	00 
c010840f:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108416:	e8 d5 89 ff ff       	call   c0100df0 <__panic>
}
c010841b:	90                   	nop
c010841c:	89 ec                	mov    %ebp,%esp
c010841e:	5d                   	pop    %ebp
c010841f:	c3                   	ret    

c0108420 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0108420:	55                   	push   %ebp
c0108421:	89 e5                	mov    %esp,%ebp
c0108423:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c0108426:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108429:	8b 50 04             	mov    0x4(%eax),%edx
c010842c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010842f:	8b 40 08             	mov    0x8(%eax),%eax
c0108432:	39 c2                	cmp    %eax,%edx
c0108434:	72 24                	jb     c010845a <insert_vma_struct+0x3a>
c0108436:	c7 44 24 0c 2d fa 10 	movl   $0xc010fa2d,0xc(%esp)
c010843d:	c0 
c010843e:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108445:	c0 
c0108446:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010844d:	00 
c010844e:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108455:	e8 96 89 ff ff       	call   c0100df0 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c010845a:	8b 45 08             	mov    0x8(%ebp),%eax
c010845d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0108460:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108463:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0108466:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108469:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c010846c:	eb 1f                	jmp    c010848d <insert_vma_struct+0x6d>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c010846e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108471:	83 e8 10             	sub    $0x10,%eax
c0108474:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0108477:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010847a:	8b 50 04             	mov    0x4(%eax),%edx
c010847d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108480:	8b 40 04             	mov    0x4(%eax),%eax
c0108483:	39 c2                	cmp    %eax,%edx
c0108485:	77 1f                	ja     c01084a6 <insert_vma_struct+0x86>
                break;
            }
            le_prev = le;
c0108487:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010848a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010848d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108490:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108493:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108496:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c0108499:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010849c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010849f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01084a2:	75 ca                	jne    c010846e <insert_vma_struct+0x4e>
c01084a4:	eb 01                	jmp    c01084a7 <insert_vma_struct+0x87>
                break;
c01084a6:	90                   	nop
c01084a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084aa:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01084ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01084b0:	8b 40 04             	mov    0x4(%eax),%eax
        }

    le_next = list_next(le_prev);
c01084b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c01084b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084b9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01084bc:	74 15                	je     c01084d3 <insert_vma_struct+0xb3>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01084be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084c1:	8d 50 f0             	lea    -0x10(%eax),%edx
c01084c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084cb:	89 14 24             	mov    %edx,(%esp)
c01084ce:	e8 a6 fe ff ff       	call   c0108379 <check_vma_overlap>
    }
    if (le_next != list) {
c01084d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01084d6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01084d9:	74 15                	je     c01084f0 <insert_vma_struct+0xd0>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01084db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01084de:	83 e8 10             	sub    $0x10,%eax
c01084e1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084e8:	89 04 24             	mov    %eax,(%esp)
c01084eb:	e8 89 fe ff ff       	call   c0108379 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c01084f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084f3:	8b 55 08             	mov    0x8(%ebp),%edx
c01084f6:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01084f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084fb:	8d 50 10             	lea    0x10(%eax),%edx
c01084fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108501:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108504:	89 55 d4             	mov    %edx,-0x2c(%ebp)
    __list_add(elm, listelm, listelm->next);
c0108507:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010850a:	8b 40 04             	mov    0x4(%eax),%eax
c010850d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108510:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0108513:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108516:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0108519:	89 45 c8             	mov    %eax,-0x38(%ebp)
    prev->next = next->prev = elm;
c010851c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010851f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0108522:	89 10                	mov    %edx,(%eax)
c0108524:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108527:	8b 10                	mov    (%eax),%edx
c0108529:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010852c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010852f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108532:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0108535:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108538:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010853b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010853e:	89 10                	mov    %edx,(%eax)
}
c0108540:	90                   	nop
}
c0108541:	90                   	nop

    mm->map_count ++;
c0108542:	8b 45 08             	mov    0x8(%ebp),%eax
c0108545:	8b 40 10             	mov    0x10(%eax),%eax
c0108548:	8d 50 01             	lea    0x1(%eax),%edx
c010854b:	8b 45 08             	mov    0x8(%ebp),%eax
c010854e:	89 50 10             	mov    %edx,0x10(%eax)
}
c0108551:	90                   	nop
c0108552:	89 ec                	mov    %ebp,%esp
c0108554:	5d                   	pop    %ebp
c0108555:	c3                   	ret    

c0108556 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0108556:	55                   	push   %ebp
c0108557:	89 e5                	mov    %esp,%ebp
c0108559:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c010855c:	8b 45 08             	mov    0x8(%ebp),%eax
c010855f:	89 04 24             	mov    %eax,(%esp)
c0108562:	e8 4d fb ff ff       	call   c01080b4 <mm_count>
c0108567:	85 c0                	test   %eax,%eax
c0108569:	74 24                	je     c010858f <mm_destroy+0x39>
c010856b:	c7 44 24 0c 49 fa 10 	movl   $0xc010fa49,0xc(%esp)
c0108572:	c0 
c0108573:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c010857a:	c0 
c010857b:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0108582:	00 
c0108583:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c010858a:	e8 61 88 ff ff       	call   c0100df0 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010858f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108592:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0108595:	eb 38                	jmp    c01085cf <mm_destroy+0x79>
c0108597:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010859a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    __list_del(listelm->prev, listelm->next);
c010859d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01085a0:	8b 40 04             	mov    0x4(%eax),%eax
c01085a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01085a6:	8b 12                	mov    (%edx),%edx
c01085a8:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01085ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    prev->next = next;
c01085ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01085b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01085b4:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01085b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01085ba:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01085bd:	89 10                	mov    %edx,(%eax)
}
c01085bf:	90                   	nop
}
c01085c0:	90                   	nop
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01085c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085c4:	83 e8 10             	sub    $0x10,%eax
c01085c7:	89 04 24             	mov    %eax,(%esp)
c01085ca:	e8 29 c8 ff ff       	call   c0104df8 <kfree>
c01085cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->next;
c01085d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01085d8:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(list)) != list) {
c01085db:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01085de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01085e4:	75 b1                	jne    c0108597 <mm_destroy+0x41>
    }
    kfree(mm); //kfree mm
c01085e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01085e9:	89 04 24             	mov    %eax,(%esp)
c01085ec:	e8 07 c8 ff ff       	call   c0104df8 <kfree>
    mm=NULL;
c01085f1:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01085f8:	90                   	nop
c01085f9:	89 ec                	mov    %ebp,%esp
c01085fb:	5d                   	pop    %ebp
c01085fc:	c3                   	ret    

c01085fd <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01085fd:	55                   	push   %ebp
c01085fe:	89 e5                	mov    %esp,%ebp
c0108600:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0108603:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108606:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108609:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010860c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108611:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108614:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c010861b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010861e:	8b 45 10             	mov    0x10(%ebp),%eax
c0108621:	01 c2                	add    %eax,%edx
c0108623:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108626:	01 d0                	add    %edx,%eax
c0108628:	48                   	dec    %eax
c0108629:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010862c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010862f:	ba 00 00 00 00       	mov    $0x0,%edx
c0108634:	f7 75 e8             	divl   -0x18(%ebp)
c0108637:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010863a:	29 d0                	sub    %edx,%eax
c010863c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c010863f:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0108646:	76 11                	jbe    c0108659 <mm_map+0x5c>
c0108648:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010864b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010864e:	73 09                	jae    c0108659 <mm_map+0x5c>
c0108650:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0108657:	76 0a                	jbe    c0108663 <mm_map+0x66>
        return -E_INVAL;
c0108659:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010865e:	e9 b0 00 00 00       	jmp    c0108713 <mm_map+0x116>
    }

    assert(mm != NULL);
c0108663:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108667:	75 24                	jne    c010868d <mm_map+0x90>
c0108669:	c7 44 24 0c 5b fa 10 	movl   $0xc010fa5b,0xc(%esp)
c0108670:	c0 
c0108671:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108678:	c0 
c0108679:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c0108680:	00 
c0108681:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108688:	e8 63 87 ff ff       	call   c0100df0 <__panic>

    int ret = -E_INVAL;
c010868d:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0108694:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108697:	89 44 24 04          	mov    %eax,0x4(%esp)
c010869b:	8b 45 08             	mov    0x8(%ebp),%eax
c010869e:	89 04 24             	mov    %eax,(%esp)
c01086a1:	e8 20 fc ff ff       	call   c01082c6 <find_vma>
c01086a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01086a9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01086ad:	74 0b                	je     c01086ba <mm_map+0xbd>
c01086af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01086b2:	8b 40 04             	mov    0x4(%eax),%eax
c01086b5:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c01086b8:	77 52                	ja     c010870c <mm_map+0x10f>
        goto out;
    }
    ret = -E_NO_MEM;
c01086ba:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c01086c1:	8b 45 14             	mov    0x14(%ebp),%eax
c01086c4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01086c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01086cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01086d2:	89 04 24             	mov    %eax,(%esp)
c01086d5:	e8 af fb ff ff       	call   c0108289 <vma_create>
c01086da:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01086dd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01086e1:	74 2c                	je     c010870f <mm_map+0x112>
        goto out;
    }
    insert_vma_struct(mm, vma);
c01086e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01086e6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01086ed:	89 04 24             	mov    %eax,(%esp)
c01086f0:	e8 2b fd ff ff       	call   c0108420 <insert_vma_struct>
    if (vma_store != NULL) {
c01086f5:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01086f9:	74 08                	je     c0108703 <mm_map+0x106>
        *vma_store = vma;
c01086fb:	8b 45 18             	mov    0x18(%ebp),%eax
c01086fe:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108701:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0108703:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010870a:	eb 04                	jmp    c0108710 <mm_map+0x113>
        goto out;
c010870c:	90                   	nop
c010870d:	eb 01                	jmp    c0108710 <mm_map+0x113>
        goto out;
c010870f:	90                   	nop

out:
    return ret;
c0108710:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108713:	89 ec                	mov    %ebp,%esp
c0108715:	5d                   	pop    %ebp
c0108716:	c3                   	ret    

c0108717 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0108717:	55                   	push   %ebp
c0108718:	89 e5                	mov    %esp,%ebp
c010871a:	56                   	push   %esi
c010871b:	53                   	push   %ebx
c010871c:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c010871f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108723:	74 06                	je     c010872b <dup_mmap+0x14>
c0108725:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108729:	75 24                	jne    c010874f <dup_mmap+0x38>
c010872b:	c7 44 24 0c 66 fa 10 	movl   $0xc010fa66,0xc(%esp)
c0108732:	c0 
c0108733:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c010873a:	c0 
c010873b:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0108742:	00 
c0108743:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c010874a:	e8 a1 86 ff ff       	call   c0100df0 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c010874f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108752:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108755:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108758:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c010875b:	e9 92 00 00 00       	jmp    c01087f2 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0108760:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108763:	83 e8 10             	sub    $0x10,%eax
c0108766:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0108769:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010876c:	8b 48 0c             	mov    0xc(%eax),%ecx
c010876f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108772:	8b 50 08             	mov    0x8(%eax),%edx
c0108775:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108778:	8b 40 04             	mov    0x4(%eax),%eax
c010877b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010877f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108783:	89 04 24             	mov    %eax,(%esp)
c0108786:	e8 fe fa ff ff       	call   c0108289 <vma_create>
c010878b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c010878e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108792:	75 07                	jne    c010879b <dup_mmap+0x84>
            return -E_NO_MEM;
c0108794:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108799:	eb 76                	jmp    c0108811 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c010879b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010879e:	89 44 24 04          	mov    %eax,0x4(%esp)
c01087a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01087a5:	89 04 24             	mov    %eax,(%esp)
c01087a8:	e8 73 fc ff ff       	call   c0108420 <insert_vma_struct>

        bool share = 1;
c01087ad:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c01087b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01087b7:	8b 58 08             	mov    0x8(%eax),%ebx
c01087ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01087bd:	8b 48 04             	mov    0x4(%eax),%ecx
c01087c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01087c3:	8b 50 0c             	mov    0xc(%eax),%edx
c01087c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01087c9:	8b 40 0c             	mov    0xc(%eax),%eax
c01087cc:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c01087cf:	89 74 24 10          	mov    %esi,0x10(%esp)
c01087d3:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01087d7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01087db:	89 54 24 04          	mov    %edx,0x4(%esp)
c01087df:	89 04 24             	mov    %eax,(%esp)
c01087e2:	e8 41 d5 ff ff       	call   c0105d28 <copy_range>
c01087e7:	85 c0                	test   %eax,%eax
c01087e9:	74 07                	je     c01087f2 <dup_mmap+0xdb>
            return -E_NO_MEM;
c01087eb:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01087f0:	eb 1f                	jmp    c0108811 <dup_mmap+0xfa>
c01087f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->prev;
c01087f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01087fb:	8b 00                	mov    (%eax),%eax
    while ((le = list_prev(le)) != list) {
c01087fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108800:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108803:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108806:	0f 85 54 ff ff ff    	jne    c0108760 <dup_mmap+0x49>
        }
    }
    return 0;
c010880c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108811:	83 c4 40             	add    $0x40,%esp
c0108814:	5b                   	pop    %ebx
c0108815:	5e                   	pop    %esi
c0108816:	5d                   	pop    %ebp
c0108817:	c3                   	ret    

c0108818 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0108818:	55                   	push   %ebp
c0108819:	89 e5                	mov    %esp,%ebp
c010881b:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c010881e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108822:	74 0f                	je     c0108833 <exit_mmap+0x1b>
c0108824:	8b 45 08             	mov    0x8(%ebp),%eax
c0108827:	89 04 24             	mov    %eax,(%esp)
c010882a:	e8 85 f8 ff ff       	call   c01080b4 <mm_count>
c010882f:	85 c0                	test   %eax,%eax
c0108831:	74 24                	je     c0108857 <exit_mmap+0x3f>
c0108833:	c7 44 24 0c 84 fa 10 	movl   $0xc010fa84,0xc(%esp)
c010883a:	c0 
c010883b:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108842:	c0 
c0108843:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c010884a:	00 
c010884b:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108852:	e8 99 85 ff ff       	call   c0100df0 <__panic>
    pde_t *pgdir = mm->pgdir;
c0108857:	8b 45 08             	mov    0x8(%ebp),%eax
c010885a:	8b 40 0c             	mov    0xc(%eax),%eax
c010885d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0108860:	8b 45 08             	mov    0x8(%ebp),%eax
c0108863:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108866:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108869:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010886c:	eb 28                	jmp    c0108896 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c010886e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108871:	83 e8 10             	sub    $0x10,%eax
c0108874:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0108877:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010887a:	8b 50 08             	mov    0x8(%eax),%edx
c010887d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108880:	8b 40 04             	mov    0x4(%eax),%eax
c0108883:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108887:	89 44 24 04          	mov    %eax,0x4(%esp)
c010888b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010888e:	89 04 24             	mov    %eax,(%esp)
c0108891:	e8 91 d2 ff ff       	call   c0105b27 <unmap_range>
c0108896:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108899:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return listelm->next;
c010889c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010889f:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != list) {
c01088a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01088a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088a8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01088ab:	75 c1                	jne    c010886e <exit_mmap+0x56>
    }
    while ((le = list_next(le)) != list) {
c01088ad:	eb 28                	jmp    c01088d7 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c01088af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088b2:	83 e8 10             	sub    $0x10,%eax
c01088b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c01088b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088bb:	8b 50 08             	mov    0x8(%eax),%edx
c01088be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088c1:	8b 40 04             	mov    0x4(%eax),%eax
c01088c4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01088c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01088cf:	89 04 24             	mov    %eax,(%esp)
c01088d2:	e8 47 d3 ff ff       	call   c0105c1e <exit_range>
c01088d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088da:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01088dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01088e0:	8b 40 04             	mov    0x4(%eax),%eax
    while ((le = list_next(le)) != list) {
c01088e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01088e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088e9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01088ec:	75 c1                	jne    c01088af <exit_mmap+0x97>
    }
}
c01088ee:	90                   	nop
c01088ef:	90                   	nop
c01088f0:	89 ec                	mov    %ebp,%esp
c01088f2:	5d                   	pop    %ebp
c01088f3:	c3                   	ret    

c01088f4 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c01088f4:	55                   	push   %ebp
c01088f5:	89 e5                	mov    %esp,%ebp
c01088f7:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c01088fa:	8b 45 10             	mov    0x10(%ebp),%eax
c01088fd:	8b 55 18             	mov    0x18(%ebp),%edx
c0108900:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108904:	8b 55 14             	mov    0x14(%ebp),%edx
c0108907:	89 54 24 08          	mov    %edx,0x8(%esp)
c010890b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010890f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108912:	89 04 24             	mov    %eax,(%esp)
c0108915:	e8 55 0a 00 00       	call   c010936f <user_mem_check>
c010891a:	85 c0                	test   %eax,%eax
c010891c:	75 07                	jne    c0108925 <copy_from_user+0x31>
        return 0;
c010891e:	b8 00 00 00 00       	mov    $0x0,%eax
c0108923:	eb 1e                	jmp    c0108943 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c0108925:	8b 45 14             	mov    0x14(%ebp),%eax
c0108928:	89 44 24 08          	mov    %eax,0x8(%esp)
c010892c:	8b 45 10             	mov    0x10(%ebp),%eax
c010892f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108933:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108936:	89 04 24             	mov    %eax,(%esp)
c0108939:	e8 dc 53 00 00       	call   c010dd1a <memcpy>
    return 1;
c010893e:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108943:	89 ec                	mov    %ebp,%esp
c0108945:	5d                   	pop    %ebp
c0108946:	c3                   	ret    

c0108947 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0108947:	55                   	push   %ebp
c0108948:	89 e5                	mov    %esp,%ebp
c010894a:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c010894d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108950:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108957:	00 
c0108958:	8b 55 14             	mov    0x14(%ebp),%edx
c010895b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010895f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108963:	8b 45 08             	mov    0x8(%ebp),%eax
c0108966:	89 04 24             	mov    %eax,(%esp)
c0108969:	e8 01 0a 00 00       	call   c010936f <user_mem_check>
c010896e:	85 c0                	test   %eax,%eax
c0108970:	75 07                	jne    c0108979 <copy_to_user+0x32>
        return 0;
c0108972:	b8 00 00 00 00       	mov    $0x0,%eax
c0108977:	eb 1e                	jmp    c0108997 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c0108979:	8b 45 14             	mov    0x14(%ebp),%eax
c010897c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108980:	8b 45 10             	mov    0x10(%ebp),%eax
c0108983:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108987:	8b 45 0c             	mov    0xc(%ebp),%eax
c010898a:	89 04 24             	mov    %eax,(%esp)
c010898d:	e8 88 53 00 00       	call   c010dd1a <memcpy>
    return 1;
c0108992:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108997:	89 ec                	mov    %ebp,%esp
c0108999:	5d                   	pop    %ebp
c010899a:	c3                   	ret    

c010899b <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c010899b:	55                   	push   %ebp
c010899c:	89 e5                	mov    %esp,%ebp
c010899e:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c01089a1:	e8 05 00 00 00       	call   c01089ab <check_vmm>
}
c01089a6:	90                   	nop
c01089a7:	89 ec                	mov    %ebp,%esp
c01089a9:	5d                   	pop    %ebp
c01089aa:	c3                   	ret    

c01089ab <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c01089ab:	55                   	push   %ebp
c01089ac:	89 e5                	mov    %esp,%ebp
c01089ae:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01089b1:	e8 58 c9 ff ff       	call   c010530e <nr_free_pages>
c01089b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c01089b9:	e8 16 00 00 00       	call   c01089d4 <check_vma_struct>
    check_pgfault();
c01089be:	e8 a5 04 00 00       	call   c0108e68 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c01089c3:	c7 04 24 a4 fa 10 c0 	movl   $0xc010faa4,(%esp)
c01089ca:	e8 a3 79 ff ff       	call   c0100372 <cprintf>
}
c01089cf:	90                   	nop
c01089d0:	89 ec                	mov    %ebp,%esp
c01089d2:	5d                   	pop    %ebp
c01089d3:	c3                   	ret    

c01089d4 <check_vma_struct>:

static void
check_vma_struct(void) {
c01089d4:	55                   	push   %ebp
c01089d5:	89 e5                	mov    %esp,%ebp
c01089d7:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01089da:	e8 2f c9 ff ff       	call   c010530e <nr_free_pages>
c01089df:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c01089e2:	e8 fa f7 ff ff       	call   c01081e1 <mm_create>
c01089e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c01089ea:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01089ee:	75 24                	jne    c0108a14 <check_vma_struct+0x40>
c01089f0:	c7 44 24 0c 5b fa 10 	movl   $0xc010fa5b,0xc(%esp)
c01089f7:	c0 
c01089f8:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c01089ff:	c0 
c0108a00:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0108a07:	00 
c0108a08:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108a0f:	e8 dc 83 ff ff       	call   c0100df0 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0108a14:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0108a1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108a1e:	89 d0                	mov    %edx,%eax
c0108a20:	c1 e0 02             	shl    $0x2,%eax
c0108a23:	01 d0                	add    %edx,%eax
c0108a25:	01 c0                	add    %eax,%eax
c0108a27:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0108a2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108a2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108a30:	eb 6f                	jmp    c0108aa1 <check_vma_struct+0xcd>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108a32:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108a35:	89 d0                	mov    %edx,%eax
c0108a37:	c1 e0 02             	shl    $0x2,%eax
c0108a3a:	01 d0                	add    %edx,%eax
c0108a3c:	83 c0 02             	add    $0x2,%eax
c0108a3f:	89 c1                	mov    %eax,%ecx
c0108a41:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108a44:	89 d0                	mov    %edx,%eax
c0108a46:	c1 e0 02             	shl    $0x2,%eax
c0108a49:	01 d0                	add    %edx,%eax
c0108a4b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108a52:	00 
c0108a53:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108a57:	89 04 24             	mov    %eax,(%esp)
c0108a5a:	e8 2a f8 ff ff       	call   c0108289 <vma_create>
c0108a5f:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma != NULL);
c0108a62:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108a66:	75 24                	jne    c0108a8c <check_vma_struct+0xb8>
c0108a68:	c7 44 24 0c bc fa 10 	movl   $0xc010fabc,0xc(%esp)
c0108a6f:	c0 
c0108a70:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108a77:	c0 
c0108a78:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c0108a7f:	00 
c0108a80:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108a87:	e8 64 83 ff ff       	call   c0100df0 <__panic>
        insert_vma_struct(mm, vma);
c0108a8c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108a8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a93:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a96:	89 04 24             	mov    %eax,(%esp)
c0108a99:	e8 82 f9 ff ff       	call   c0108420 <insert_vma_struct>
    for (i = step1; i >= 1; i --) {
c0108a9e:	ff 4d f4             	decl   -0xc(%ebp)
c0108aa1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108aa5:	7f 8b                	jg     c0108a32 <check_vma_struct+0x5e>
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108aa7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108aaa:	40                   	inc    %eax
c0108aab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108aae:	eb 6f                	jmp    c0108b1f <check_vma_struct+0x14b>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108ab0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108ab3:	89 d0                	mov    %edx,%eax
c0108ab5:	c1 e0 02             	shl    $0x2,%eax
c0108ab8:	01 d0                	add    %edx,%eax
c0108aba:	83 c0 02             	add    $0x2,%eax
c0108abd:	89 c1                	mov    %eax,%ecx
c0108abf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108ac2:	89 d0                	mov    %edx,%eax
c0108ac4:	c1 e0 02             	shl    $0x2,%eax
c0108ac7:	01 d0                	add    %edx,%eax
c0108ac9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108ad0:	00 
c0108ad1:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108ad5:	89 04 24             	mov    %eax,(%esp)
c0108ad8:	e8 ac f7 ff ff       	call   c0108289 <vma_create>
c0108add:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma != NULL);
c0108ae0:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108ae4:	75 24                	jne    c0108b0a <check_vma_struct+0x136>
c0108ae6:	c7 44 24 0c bc fa 10 	movl   $0xc010fabc,0xc(%esp)
c0108aed:	c0 
c0108aee:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108af5:	c0 
c0108af6:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0108afd:	00 
c0108afe:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108b05:	e8 e6 82 ff ff       	call   c0100df0 <__panic>
        insert_vma_struct(mm, vma);
c0108b0a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0108b0d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b14:	89 04 24             	mov    %eax,(%esp)
c0108b17:	e8 04 f9 ff ff       	call   c0108420 <insert_vma_struct>
    for (i = step1 + 1; i <= step2; i ++) {
c0108b1c:	ff 45 f4             	incl   -0xc(%ebp)
c0108b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b22:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108b25:	7e 89                	jle    c0108ab0 <check_vma_struct+0xdc>
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0108b27:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b2a:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108b2d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108b30:	8b 40 04             	mov    0x4(%eax),%eax
c0108b33:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0108b36:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0108b3d:	e9 96 00 00 00       	jmp    c0108bd8 <check_vma_struct+0x204>
        assert(le != &(mm->mmap_list));
c0108b42:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b45:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108b48:	75 24                	jne    c0108b6e <check_vma_struct+0x19a>
c0108b4a:	c7 44 24 0c c8 fa 10 	movl   $0xc010fac8,0xc(%esp)
c0108b51:	c0 
c0108b52:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108b59:	c0 
c0108b5a:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c0108b61:	00 
c0108b62:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108b69:	e8 82 82 ff ff       	call   c0100df0 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0108b6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108b71:	83 e8 10             	sub    $0x10,%eax
c0108b74:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0108b77:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0108b7a:	8b 48 04             	mov    0x4(%eax),%ecx
c0108b7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108b80:	89 d0                	mov    %edx,%eax
c0108b82:	c1 e0 02             	shl    $0x2,%eax
c0108b85:	01 d0                	add    %edx,%eax
c0108b87:	39 c1                	cmp    %eax,%ecx
c0108b89:	75 17                	jne    c0108ba2 <check_vma_struct+0x1ce>
c0108b8b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0108b8e:	8b 48 08             	mov    0x8(%eax),%ecx
c0108b91:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108b94:	89 d0                	mov    %edx,%eax
c0108b96:	c1 e0 02             	shl    $0x2,%eax
c0108b99:	01 d0                	add    %edx,%eax
c0108b9b:	83 c0 02             	add    $0x2,%eax
c0108b9e:	39 c1                	cmp    %eax,%ecx
c0108ba0:	74 24                	je     c0108bc6 <check_vma_struct+0x1f2>
c0108ba2:	c7 44 24 0c e0 fa 10 	movl   $0xc010fae0,0xc(%esp)
c0108ba9:	c0 
c0108baa:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108bb1:	c0 
c0108bb2:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0108bb9:	00 
c0108bba:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108bc1:	e8 2a 82 ff ff       	call   c0100df0 <__panic>
c0108bc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108bc9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0108bcc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108bcf:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 1; i <= step2; i ++) {
c0108bd5:	ff 45 f4             	incl   -0xc(%ebp)
c0108bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bdb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108bde:	0f 8e 5e ff ff ff    	jle    c0108b42 <check_vma_struct+0x16e>
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108be4:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0108beb:	e9 cb 01 00 00       	jmp    c0108dbb <check_vma_struct+0x3e7>
        struct vma_struct *vma1 = find_vma(mm, i);
c0108bf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bf3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bf7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bfa:	89 04 24             	mov    %eax,(%esp)
c0108bfd:	e8 c4 f6 ff ff       	call   c01082c6 <find_vma>
c0108c02:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma1 != NULL);
c0108c05:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0108c09:	75 24                	jne    c0108c2f <check_vma_struct+0x25b>
c0108c0b:	c7 44 24 0c 15 fb 10 	movl   $0xc010fb15,0xc(%esp)
c0108c12:	c0 
c0108c13:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108c1a:	c0 
c0108c1b:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0108c22:	00 
c0108c23:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108c2a:	e8 c1 81 ff ff       	call   c0100df0 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0108c2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c32:	40                   	inc    %eax
c0108c33:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c37:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c3a:	89 04 24             	mov    %eax,(%esp)
c0108c3d:	e8 84 f6 ff ff       	call   c01082c6 <find_vma>
c0108c42:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(vma2 != NULL);
c0108c45:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0108c49:	75 24                	jne    c0108c6f <check_vma_struct+0x29b>
c0108c4b:	c7 44 24 0c 22 fb 10 	movl   $0xc010fb22,0xc(%esp)
c0108c52:	c0 
c0108c53:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108c5a:	c0 
c0108c5b:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0108c62:	00 
c0108c63:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108c6a:	e8 81 81 ff ff       	call   c0100df0 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0108c6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c72:	83 c0 02             	add    $0x2,%eax
c0108c75:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c79:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c7c:	89 04 24             	mov    %eax,(%esp)
c0108c7f:	e8 42 f6 ff ff       	call   c01082c6 <find_vma>
c0108c84:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma3 == NULL);
c0108c87:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0108c8b:	74 24                	je     c0108cb1 <check_vma_struct+0x2dd>
c0108c8d:	c7 44 24 0c 2f fb 10 	movl   $0xc010fb2f,0xc(%esp)
c0108c94:	c0 
c0108c95:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108c9c:	c0 
c0108c9d:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108ca4:	00 
c0108ca5:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108cac:	e8 3f 81 ff ff       	call   c0100df0 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108cb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cb4:	83 c0 03             	add    $0x3,%eax
c0108cb7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cbb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108cbe:	89 04 24             	mov    %eax,(%esp)
c0108cc1:	e8 00 f6 ff ff       	call   c01082c6 <find_vma>
c0108cc6:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma4 == NULL);
c0108cc9:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108ccd:	74 24                	je     c0108cf3 <check_vma_struct+0x31f>
c0108ccf:	c7 44 24 0c 3c fb 10 	movl   $0xc010fb3c,0xc(%esp)
c0108cd6:	c0 
c0108cd7:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108cde:	c0 
c0108cdf:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108ce6:	00 
c0108ce7:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108cee:	e8 fd 80 ff ff       	call   c0100df0 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108cf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cf6:	83 c0 04             	add    $0x4,%eax
c0108cf9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cfd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d00:	89 04 24             	mov    %eax,(%esp)
c0108d03:	e8 be f5 ff ff       	call   c01082c6 <find_vma>
c0108d08:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma5 == NULL);
c0108d0b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0108d0f:	74 24                	je     c0108d35 <check_vma_struct+0x361>
c0108d11:	c7 44 24 0c 49 fb 10 	movl   $0xc010fb49,0xc(%esp)
c0108d18:	c0 
c0108d19:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108d20:	c0 
c0108d21:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108d28:	00 
c0108d29:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108d30:	e8 bb 80 ff ff       	call   c0100df0 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108d35:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108d38:	8b 50 04             	mov    0x4(%eax),%edx
c0108d3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d3e:	39 c2                	cmp    %eax,%edx
c0108d40:	75 10                	jne    c0108d52 <check_vma_struct+0x37e>
c0108d42:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108d45:	8b 40 08             	mov    0x8(%eax),%eax
c0108d48:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d4b:	83 c2 02             	add    $0x2,%edx
c0108d4e:	39 d0                	cmp    %edx,%eax
c0108d50:	74 24                	je     c0108d76 <check_vma_struct+0x3a2>
c0108d52:	c7 44 24 0c 58 fb 10 	movl   $0xc010fb58,0xc(%esp)
c0108d59:	c0 
c0108d5a:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108d61:	c0 
c0108d62:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108d69:	00 
c0108d6a:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108d71:	e8 7a 80 ff ff       	call   c0100df0 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108d76:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108d79:	8b 50 04             	mov    0x4(%eax),%edx
c0108d7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d7f:	39 c2                	cmp    %eax,%edx
c0108d81:	75 10                	jne    c0108d93 <check_vma_struct+0x3bf>
c0108d83:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108d86:	8b 40 08             	mov    0x8(%eax),%eax
c0108d89:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d8c:	83 c2 02             	add    $0x2,%edx
c0108d8f:	39 d0                	cmp    %edx,%eax
c0108d91:	74 24                	je     c0108db7 <check_vma_struct+0x3e3>
c0108d93:	c7 44 24 0c 88 fb 10 	movl   $0xc010fb88,0xc(%esp)
c0108d9a:	c0 
c0108d9b:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108da2:	c0 
c0108da3:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108daa:	00 
c0108dab:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108db2:	e8 39 80 ff ff       	call   c0100df0 <__panic>
    for (i = 5; i <= 5 * step2; i +=5) {
c0108db7:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108dbb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108dbe:	89 d0                	mov    %edx,%eax
c0108dc0:	c1 e0 02             	shl    $0x2,%eax
c0108dc3:	01 d0                	add    %edx,%eax
c0108dc5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0108dc8:	0f 8e 22 fe ff ff    	jle    c0108bf0 <check_vma_struct+0x21c>
    }

    for (i =4; i>=0; i--) {
c0108dce:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108dd5:	eb 6f                	jmp    c0108e46 <check_vma_struct+0x472>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108dd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dda:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108dde:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108de1:	89 04 24             	mov    %eax,(%esp)
c0108de4:	e8 dd f4 ff ff       	call   c01082c6 <find_vma>
c0108de9:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (vma_below_5 != NULL ) {
c0108dec:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108df0:	74 27                	je     c0108e19 <check_vma_struct+0x445>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108df2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108df5:	8b 50 08             	mov    0x8(%eax),%edx
c0108df8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108dfb:	8b 40 04             	mov    0x4(%eax),%eax
c0108dfe:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108e02:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108e06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e09:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e0d:	c7 04 24 b8 fb 10 c0 	movl   $0xc010fbb8,(%esp)
c0108e14:	e8 59 75 ff ff       	call   c0100372 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108e19:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108e1d:	74 24                	je     c0108e43 <check_vma_struct+0x46f>
c0108e1f:	c7 44 24 0c dd fb 10 	movl   $0xc010fbdd,0xc(%esp)
c0108e26:	c0 
c0108e27:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108e2e:	c0 
c0108e2f:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108e36:	00 
c0108e37:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108e3e:	e8 ad 7f ff ff       	call   c0100df0 <__panic>
    for (i =4; i>=0; i--) {
c0108e43:	ff 4d f4             	decl   -0xc(%ebp)
c0108e46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108e4a:	79 8b                	jns    c0108dd7 <check_vma_struct+0x403>
    }

    mm_destroy(mm);
c0108e4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e4f:	89 04 24             	mov    %eax,(%esp)
c0108e52:	e8 ff f6 ff ff       	call   c0108556 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108e57:	c7 04 24 f4 fb 10 c0 	movl   $0xc010fbf4,(%esp)
c0108e5e:	e8 0f 75 ff ff       	call   c0100372 <cprintf>
}
c0108e63:	90                   	nop
c0108e64:	89 ec                	mov    %ebp,%esp
c0108e66:	5d                   	pop    %ebp
c0108e67:	c3                   	ret    

c0108e68 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108e68:	55                   	push   %ebp
c0108e69:	89 e5                	mov    %esp,%ebp
c0108e6b:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108e6e:	e8 9b c4 ff ff       	call   c010530e <nr_free_pages>
c0108e73:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108e76:	e8 66 f3 ff ff       	call   c01081e1 <mm_create>
c0108e7b:	a3 0c d1 1c c0       	mov    %eax,0xc01cd10c
    assert(check_mm_struct != NULL);
c0108e80:	a1 0c d1 1c c0       	mov    0xc01cd10c,%eax
c0108e85:	85 c0                	test   %eax,%eax
c0108e87:	75 24                	jne    c0108ead <check_pgfault+0x45>
c0108e89:	c7 44 24 0c 13 fc 10 	movl   $0xc010fc13,0xc(%esp)
c0108e90:	c0 
c0108e91:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108e98:	c0 
c0108e99:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108ea0:	00 
c0108ea1:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108ea8:	e8 43 7f ff ff       	call   c0100df0 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108ead:	a1 0c d1 1c c0       	mov    0xc01cd10c,%eax
c0108eb2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108eb5:	8b 15 00 9a 13 c0    	mov    0xc0139a00,%edx
c0108ebb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ebe:	89 50 0c             	mov    %edx,0xc(%eax)
c0108ec1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ec4:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ec7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108eca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108ecd:	8b 00                	mov    (%eax),%eax
c0108ecf:	85 c0                	test   %eax,%eax
c0108ed1:	74 24                	je     c0108ef7 <check_pgfault+0x8f>
c0108ed3:	c7 44 24 0c 2b fc 10 	movl   $0xc010fc2b,0xc(%esp)
c0108eda:	c0 
c0108edb:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108ee2:	c0 
c0108ee3:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108eea:	00 
c0108eeb:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108ef2:	e8 f9 7e ff ff       	call   c0100df0 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108ef7:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108efe:	00 
c0108eff:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108f06:	00 
c0108f07:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108f0e:	e8 76 f3 ff ff       	call   c0108289 <vma_create>
c0108f13:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108f16:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108f1a:	75 24                	jne    c0108f40 <check_pgfault+0xd8>
c0108f1c:	c7 44 24 0c bc fa 10 	movl   $0xc010fabc,0xc(%esp)
c0108f23:	c0 
c0108f24:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108f2b:	c0 
c0108f2c:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108f33:	00 
c0108f34:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108f3b:	e8 b0 7e ff ff       	call   c0100df0 <__panic>

    insert_vma_struct(mm, vma);
c0108f40:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108f43:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f4a:	89 04 24             	mov    %eax,(%esp)
c0108f4d:	e8 ce f4 ff ff       	call   c0108420 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108f52:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108f59:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108f5c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108f60:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f63:	89 04 24             	mov    %eax,(%esp)
c0108f66:	e8 5b f3 ff ff       	call   c01082c6 <find_vma>
c0108f6b:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0108f6e:	74 24                	je     c0108f94 <check_pgfault+0x12c>
c0108f70:	c7 44 24 0c 39 fc 10 	movl   $0xc010fc39,0xc(%esp)
c0108f77:	c0 
c0108f78:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108f7f:	c0 
c0108f80:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108f87:	00 
c0108f88:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0108f8f:	e8 5c 7e ff ff       	call   c0100df0 <__panic>

    int i, sum = 0;
c0108f94:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108f9b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108fa2:	eb 16                	jmp    c0108fba <check_pgfault+0x152>
        *(char *)(addr + i) = i;
c0108fa4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108fa7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108faa:	01 d0                	add    %edx,%eax
c0108fac:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108faf:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108fb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fb4:	01 45 f0             	add    %eax,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108fb7:	ff 45 f4             	incl   -0xc(%ebp)
c0108fba:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108fbe:	7e e4                	jle    c0108fa4 <check_pgfault+0x13c>
    }
    for (i = 0; i < 100; i ++) {
c0108fc0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108fc7:	eb 14                	jmp    c0108fdd <check_pgfault+0x175>
        sum -= *(char *)(addr + i);
c0108fc9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108fcc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108fcf:	01 d0                	add    %edx,%eax
c0108fd1:	0f b6 00             	movzbl (%eax),%eax
c0108fd4:	0f be c0             	movsbl %al,%eax
c0108fd7:	29 45 f0             	sub    %eax,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108fda:	ff 45 f4             	incl   -0xc(%ebp)
c0108fdd:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108fe1:	7e e6                	jle    c0108fc9 <check_pgfault+0x161>
    }
    assert(sum == 0);
c0108fe3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108fe7:	74 24                	je     c010900d <check_pgfault+0x1a5>
c0108fe9:	c7 44 24 0c 53 fc 10 	movl   $0xc010fc53,0xc(%esp)
c0108ff0:	c0 
c0108ff1:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c0108ff8:	c0 
c0108ff9:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0109000:	00 
c0109001:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c0109008:	e8 e3 7d ff ff       	call   c0100df0 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c010900d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109010:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0109013:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109016:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010901b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010901f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109022:	89 04 24             	mov    %eax,(%esp)
c0109025:	e8 e6 cf ff ff       	call   c0106010 <page_remove>
    //free_page(pde2page(pgdir[0]));
    pgdir[0] = 0;
c010902a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010902d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0109033:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109036:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c010903d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109040:	89 04 24             	mov    %eax,(%esp)
c0109043:	e8 0e f5 ff ff       	call   c0108556 <mm_destroy>
    check_mm_struct = NULL;
c0109048:	c7 05 0c d1 1c c0 00 	movl   $0x0,0xc01cd10c
c010904f:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0109052:	e8 b7 c2 ff ff       	call   c010530e <nr_free_pages>
c0109057:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c010905a:	74 24                	je     c0109080 <check_pgfault+0x218>
c010905c:	c7 44 24 0c 5c fc 10 	movl   $0xc010fc5c,0xc(%esp)
c0109063:	c0 
c0109064:	c7 44 24 08 cb f9 10 	movl   $0xc010f9cb,0x8(%esp)
c010906b:	c0 
c010906c:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0109073:	00 
c0109074:	c7 04 24 e0 f9 10 c0 	movl   $0xc010f9e0,(%esp)
c010907b:	e8 70 7d ff ff       	call   c0100df0 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0109080:	c7 04 24 83 fc 10 c0 	movl   $0xc010fc83,(%esp)
c0109087:	e8 e6 72 ff ff       	call   c0100372 <cprintf>
}
c010908c:	90                   	nop
c010908d:	89 ec                	mov    %ebp,%esp
c010908f:	5d                   	pop    %ebp
c0109090:	c3                   	ret    

c0109091 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0109091:	55                   	push   %ebp
c0109092:	89 e5                	mov    %esp,%ebp
c0109094:	83 ec 48             	sub    $0x48,%esp
    int ret = -E_INVAL;
c0109097:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c010909e:	8b 45 10             	mov    0x10(%ebp),%eax
c01090a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01090a8:	89 04 24             	mov    %eax,(%esp)
c01090ab:	e8 16 f2 ff ff       	call   c01082c6 <find_vma>
c01090b0:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c01090b3:	a1 10 d1 1c c0       	mov    0xc01cd110,%eax
c01090b8:	40                   	inc    %eax
c01090b9:	a3 10 d1 1c c0       	mov    %eax,0xc01cd110
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c01090be:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01090c2:	74 0b                	je     c01090cf <do_pgfault+0x3e>
c01090c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01090c7:	8b 40 04             	mov    0x4(%eax),%eax
c01090ca:	39 45 10             	cmp    %eax,0x10(%ebp)
c01090cd:	73 18                	jae    c01090e7 <do_pgfault+0x56>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c01090cf:	8b 45 10             	mov    0x10(%ebp),%eax
c01090d2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090d6:	c7 04 24 a0 fc 10 c0 	movl   $0xc010fca0,(%esp)
c01090dd:	e8 90 72 ff ff       	call   c0100372 <cprintf>
        goto failed;
c01090e2:	e9 81 02 00 00       	jmp    c0109368 <do_pgfault+0x2d7>
    }
    //check the error_code
    switch (error_code & 3) {
c01090e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090ea:	83 e0 03             	and    $0x3,%eax
c01090ed:	85 c0                	test   %eax,%eax
c01090ef:	74 34                	je     c0109125 <do_pgfault+0x94>
c01090f1:	83 f8 01             	cmp    $0x1,%eax
c01090f4:	74 1e                	je     c0109114 <do_pgfault+0x83>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c01090f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01090f9:	8b 40 0c             	mov    0xc(%eax),%eax
c01090fc:	83 e0 02             	and    $0x2,%eax
c01090ff:	85 c0                	test   %eax,%eax
c0109101:	75 40                	jne    c0109143 <do_pgfault+0xb2>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0109103:	c7 04 24 d0 fc 10 c0 	movl   $0xc010fcd0,(%esp)
c010910a:	e8 63 72 ff ff       	call   c0100372 <cprintf>
            goto failed;
c010910f:	e9 54 02 00 00       	jmp    c0109368 <do_pgfault+0x2d7>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0109114:	c7 04 24 30 fd 10 c0 	movl   $0xc010fd30,(%esp)
c010911b:	e8 52 72 ff ff       	call   c0100372 <cprintf>
        goto failed;
c0109120:	e9 43 02 00 00       	jmp    c0109368 <do_pgfault+0x2d7>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0109125:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109128:	8b 40 0c             	mov    0xc(%eax),%eax
c010912b:	83 e0 05             	and    $0x5,%eax
c010912e:	85 c0                	test   %eax,%eax
c0109130:	75 12                	jne    c0109144 <do_pgfault+0xb3>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0109132:	c7 04 24 68 fd 10 c0 	movl   $0xc010fd68,(%esp)
c0109139:	e8 34 72 ff ff       	call   c0100372 <cprintf>
            goto failed;
c010913e:	e9 25 02 00 00       	jmp    c0109368 <do_pgfault+0x2d7>
        break;
c0109143:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0109144:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c010914b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010914e:	8b 40 0c             	mov    0xc(%eax),%eax
c0109151:	83 e0 02             	and    $0x2,%eax
c0109154:	85 c0                	test   %eax,%eax
c0109156:	74 04                	je     c010915c <do_pgfault+0xcb>
        perm |= PTE_W;
c0109158:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c010915c:	8b 45 10             	mov    0x10(%ebp),%eax
c010915f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109162:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109165:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010916a:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c010916d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0109174:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    * VARIABLES:
    *   mm->pgdir : the PDT of these vma
    *
    */
   // 查找当前虚拟地址所对应的页表项
    if ((ptep = get_pte(mm->pgdir, addr, 1)) == NULL) {
c010917b:	8b 45 08             	mov    0x8(%ebp),%eax
c010917e:	8b 40 0c             	mov    0xc(%eax),%eax
c0109181:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0109188:	00 
c0109189:	8b 55 10             	mov    0x10(%ebp),%edx
c010918c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109190:	89 04 24             	mov    %eax,(%esp)
c0109193:	e8 8f c7 ff ff       	call   c0105927 <get_pte>
c0109198:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010919b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010919f:	75 11                	jne    c01091b2 <do_pgfault+0x121>
        cprintf("get_pte in do_pgfault failed\n");
c01091a1:	c7 04 24 cb fd 10 c0 	movl   $0xc010fdcb,(%esp)
c01091a8:	e8 c5 71 ff ff       	call   c0100372 <cprintf>
        goto failed;
c01091ad:	e9 b6 01 00 00       	jmp    c0109368 <do_pgfault+0x2d7>
    }
    // 如果这个页表项所对应的物理页不存在，则
    if (*ptep == 0) {
c01091b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01091b5:	8b 00                	mov    (%eax),%eax
c01091b7:	85 c0                	test   %eax,%eax
c01091b9:	75 35                	jne    c01091f0 <do_pgfault+0x15f>
        // 分配一块物理页，并设置页表项
        if (pgdir_alloc_page(mm->pgdir, addr, perm) == NULL) {
c01091bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01091be:	8b 40 0c             	mov    0xc(%eax),%eax
c01091c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01091c4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01091c8:	8b 55 10             	mov    0x10(%ebp),%edx
c01091cb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01091cf:	89 04 24             	mov    %eax,(%esp)
c01091d2:	e8 9a cf ff ff       	call   c0106171 <pgdir_alloc_page>
c01091d7:	85 c0                	test   %eax,%eax
c01091d9:	0f 85 82 01 00 00    	jne    c0109361 <do_pgfault+0x2d0>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c01091df:	c7 04 24 ec fd 10 c0 	movl   $0xc010fdec,(%esp)
c01091e6:	e8 87 71 ff ff       	call   c0100372 <cprintf>
            goto failed;
c01091eb:	e9 78 01 00 00       	jmp    c0109368 <do_pgfault+0x2d7>
        }
    }
    else {
        struct Page *page=NULL;
c01091f0:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
        // -------------------------------------------------------/
        if (*ptep & PTE_P) {
c01091f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01091fa:	8b 00                	mov    (%eax),%eax
c01091fc:	83 e0 01             	and    $0x1,%eax
c01091ff:	85 c0                	test   %eax,%eax
c0109201:	0f 84 bb 00 00 00    	je     c01092c2 <do_pgfault+0x231>
            //panic("error write a non-writable pte");
            cprintf("\n\nCOW: ptep 0x%x, pte 0x%x\n",ptep, *ptep);
c0109207:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010920a:	8b 00                	mov    (%eax),%eax
c010920c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109210:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109213:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109217:	c7 04 24 13 fe 10 c0 	movl   $0xc010fe13,(%esp)
c010921e:	e8 4f 71 ff ff       	call   c0100372 <cprintf>
            // 原先所使用的只读物理页
            page = pte2page(*ptep);
c0109223:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109226:	8b 00                	mov    (%eax),%eax
c0109228:	89 04 24             	mov    %eax,(%esp)
c010922b:	e8 67 ef ff ff       	call   c0108197 <pte2page>
c0109230:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            // 如果该物理页面被多个进程引用
            if(page_ref(page) > 1)
c0109233:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109236:	89 04 24             	mov    %eax,(%esp)
c0109239:	e8 99 ef ff ff       	call   c01081d7 <page_ref>
c010923e:	83 f8 01             	cmp    $0x1,%eax
c0109241:	7e 5a                	jle    c010929d <do_pgfault+0x20c>
            {
                // 释放当前PTE的引用并分配一个新物理页
                struct Page* newPage = pgdir_alloc_page(mm->pgdir, addr, perm);
c0109243:	8b 45 08             	mov    0x8(%ebp),%eax
c0109246:	8b 40 0c             	mov    0xc(%eax),%eax
c0109249:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010924c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0109250:	8b 55 10             	mov    0x10(%ebp),%edx
c0109253:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109257:	89 04 24             	mov    %eax,(%esp)
c010925a:	e8 12 cf ff ff       	call   c0106171 <pgdir_alloc_page>
c010925f:	89 45 e0             	mov    %eax,-0x20(%ebp)
                void * kva_src = page2kva(page);
c0109262:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109265:	89 04 24             	mov    %eax,(%esp)
c0109268:	e8 d4 ee ff ff       	call   c0108141 <page2kva>
c010926d:	89 45 dc             	mov    %eax,-0x24(%ebp)
                void * kva_dst = page2kva(newPage);
c0109270:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109273:	89 04 24             	mov    %eax,(%esp)
c0109276:	e8 c6 ee ff ff       	call   c0108141 <page2kva>
c010927b:	89 45 d8             	mov    %eax,-0x28(%ebp)
                // 拷贝数据
                memcpy(kva_dst, kva_src, PGSIZE);
c010927e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0109285:	00 
c0109286:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109289:	89 44 24 04          	mov    %eax,0x4(%esp)
c010928d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109290:	89 04 24             	mov    %eax,(%esp)
c0109293:	e8 82 4a 00 00       	call   c010dd1a <memcpy>
c0109298:	e9 9a 00 00 00       	jmp    c0109337 <do_pgfault+0x2a6>
            }
            // 如果该物理页面只被当前进程所引用,即page_ref等1
            else
                // 则可以直接执行page_insert。该函数会重设其PTE权限。
                page_insert(mm->pgdir, page, addr, perm);
c010929d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01092a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01092a3:	8b 40 0c             	mov    0xc(%eax),%eax
c01092a6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c01092a9:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01092ad:	8b 4d 10             	mov    0x10(%ebp),%ecx
c01092b0:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01092b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01092b8:	89 04 24             	mov    %eax,(%esp)
c01092bb:	e8 97 cd ff ff       	call   c0106057 <page_insert>
c01092c0:	eb 75                	jmp    c0109337 <do_pgfault+0x2a6>
        } 
        else
        // ------------------------------------------------------/
        {
            // 如果swap已经初始化完成
            if(swap_init_ok) {
c01092c2:	a1 44 d0 1c c0       	mov    0xc01cd044,%eax
c01092c7:	85 c0                	test   %eax,%eax
c01092c9:	74 55                	je     c0109320 <do_pgfault+0x28f>
                // 将目标数据加载到某块新的物理页中。
                // 该物理页可能是尚未分配的物理页，也可能是从别的已分配物理页中取的
                if ((ret = swap_in(mm, addr, &page)) != 0) {
c01092cb:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01092ce:	89 44 24 08          	mov    %eax,0x8(%esp)
c01092d2:	8b 45 10             	mov    0x10(%ebp),%eax
c01092d5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01092dc:	89 04 24             	mov    %eax,(%esp)
c01092df:	e8 3b df ff ff       	call   c010721f <swap_in>
c01092e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01092e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01092eb:	74 0e                	je     c01092fb <do_pgfault+0x26a>
                    cprintf("swap_in in do_pgfault failed\n");
c01092ed:	c7 04 24 2f fe 10 c0 	movl   $0xc010fe2f,(%esp)
c01092f4:	e8 79 70 ff ff       	call   c0100372 <cprintf>
                    goto failed;
c01092f9:	eb 6d                	jmp    c0109368 <do_pgfault+0x2d7>
                }    
                // 将该物理页与对应的虚拟地址关联，同时设置页表。
                page_insert(mm->pgdir, page, addr, perm);
c01092fb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01092fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109301:	8b 40 0c             	mov    0xc(%eax),%eax
c0109304:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0109307:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010930b:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010930e:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0109312:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109316:	89 04 24             	mov    %eax,(%esp)
c0109319:	e8 39 cd ff ff       	call   c0106057 <page_insert>
c010931e:	eb 17                	jmp    c0109337 <do_pgfault+0x2a6>
            }
            else {
                cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0109320:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109323:	8b 00                	mov    (%eax),%eax
c0109325:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109329:	c7 04 24 50 fe 10 c0 	movl   $0xc010fe50,(%esp)
c0109330:	e8 3d 70 ff ff       	call   c0100372 <cprintf>
                goto failed;
c0109335:	eb 31                	jmp    c0109368 <do_pgfault+0x2d7>
            }
        }
        // 当前缺失的页已经加载回内存中，所以设置当前页为可swap。
        swap_map_swappable(mm, addr, page, 1);
c0109337:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010933a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109341:	00 
c0109342:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109346:	8b 45 10             	mov    0x10(%ebp),%eax
c0109349:	89 44 24 04          	mov    %eax,0x4(%esp)
c010934d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109350:	89 04 24             	mov    %eax,(%esp)
c0109353:	e8 ff dc ff ff       	call   c0107057 <swap_map_swappable>
        page->pra_vaddr = addr;
c0109358:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010935b:	8b 55 10             	mov    0x10(%ebp),%edx
c010935e:	89 50 1c             	mov    %edx,0x1c(%eax)
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
   }
#endif
   ret = 0;
c0109361:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0109368:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010936b:	89 ec                	mov    %ebp,%esp
c010936d:	5d                   	pop    %ebp
c010936e:	c3                   	ret    

c010936f <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010936f:	55                   	push   %ebp
c0109370:	89 e5                	mov    %esp,%ebp
c0109372:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0109375:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109379:	0f 84 e0 00 00 00    	je     c010945f <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c010937f:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0109386:	76 1c                	jbe    c01093a4 <user_mem_check+0x35>
c0109388:	8b 55 0c             	mov    0xc(%ebp),%edx
c010938b:	8b 45 10             	mov    0x10(%ebp),%eax
c010938e:	01 d0                	add    %edx,%eax
c0109390:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0109393:	73 0f                	jae    c01093a4 <user_mem_check+0x35>
c0109395:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109398:	8b 45 10             	mov    0x10(%ebp),%eax
c010939b:	01 d0                	add    %edx,%eax
c010939d:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c01093a2:	76 0a                	jbe    c01093ae <user_mem_check+0x3f>
            return 0;
c01093a4:	b8 00 00 00 00       	mov    $0x0,%eax
c01093a9:	e9 e2 00 00 00       	jmp    c0109490 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01093ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01093b1:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01093b4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01093b7:	8b 45 10             	mov    0x10(%ebp),%eax
c01093ba:	01 d0                	add    %edx,%eax
c01093bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01093bf:	e9 88 00 00 00       	jmp    c010944c <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01093c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01093c7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01093cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01093ce:	89 04 24             	mov    %eax,(%esp)
c01093d1:	e8 f0 ee ff ff       	call   c01082c6 <find_vma>
c01093d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01093d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01093dd:	74 0b                	je     c01093ea <user_mem_check+0x7b>
c01093df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093e2:	8b 40 04             	mov    0x4(%eax),%eax
c01093e5:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01093e8:	73 0a                	jae    c01093f4 <user_mem_check+0x85>
                return 0;
c01093ea:	b8 00 00 00 00       	mov    $0x0,%eax
c01093ef:	e9 9c 00 00 00       	jmp    c0109490 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c01093f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093f7:	8b 40 0c             	mov    0xc(%eax),%eax
c01093fa:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01093fe:	74 07                	je     c0109407 <user_mem_check+0x98>
c0109400:	ba 02 00 00 00       	mov    $0x2,%edx
c0109405:	eb 05                	jmp    c010940c <user_mem_check+0x9d>
c0109407:	ba 01 00 00 00       	mov    $0x1,%edx
c010940c:	21 d0                	and    %edx,%eax
c010940e:	85 c0                	test   %eax,%eax
c0109410:	75 07                	jne    c0109419 <user_mem_check+0xaa>
                return 0;
c0109412:	b8 00 00 00 00       	mov    $0x0,%eax
c0109417:	eb 77                	jmp    c0109490 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0109419:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010941d:	74 24                	je     c0109443 <user_mem_check+0xd4>
c010941f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109422:	8b 40 0c             	mov    0xc(%eax),%eax
c0109425:	83 e0 08             	and    $0x8,%eax
c0109428:	85 c0                	test   %eax,%eax
c010942a:	74 17                	je     c0109443 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010942c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010942f:	8b 40 04             	mov    0x4(%eax),%eax
c0109432:	05 00 10 00 00       	add    $0x1000,%eax
c0109437:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010943a:	73 07                	jae    c0109443 <user_mem_check+0xd4>
                    return 0;
c010943c:	b8 00 00 00 00       	mov    $0x0,%eax
c0109441:	eb 4d                	jmp    c0109490 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0109443:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109446:	8b 40 08             	mov    0x8(%eax),%eax
c0109449:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < end) {
c010944c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010944f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109452:	0f 82 6c ff ff ff    	jb     c01093c4 <user_mem_check+0x55>
        }
        return 1;
c0109458:	b8 01 00 00 00       	mov    $0x1,%eax
c010945d:	eb 31                	jmp    c0109490 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c010945f:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0109466:	76 23                	jbe    c010948b <user_mem_check+0x11c>
c0109468:	8b 55 0c             	mov    0xc(%ebp),%edx
c010946b:	8b 45 10             	mov    0x10(%ebp),%eax
c010946e:	01 d0                	add    %edx,%eax
c0109470:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0109473:	73 16                	jae    c010948b <user_mem_check+0x11c>
c0109475:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109478:	8b 45 10             	mov    0x10(%ebp),%eax
c010947b:	01 d0                	add    %edx,%eax
c010947d:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0109482:	77 07                	ja     c010948b <user_mem_check+0x11c>
c0109484:	b8 01 00 00 00       	mov    $0x1,%eax
c0109489:	eb 05                	jmp    c0109490 <user_mem_check+0x121>
c010948b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109490:	89 ec                	mov    %ebp,%esp
c0109492:	5d                   	pop    %ebp
c0109493:	c3                   	ret    

c0109494 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0109494:	55                   	push   %ebp
c0109495:	89 e5                	mov    %esp,%ebp
c0109497:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c010949a:	8b 45 08             	mov    0x8(%ebp),%eax
c010949d:	8b 04 85 20 d1 1c c0 	mov    -0x3fe32ee0(,%eax,4),%eax
c01094a4:	83 f8 01             	cmp    $0x1,%eax
c01094a7:	0f 85 85 00 00 00    	jne    c0109532 <phi_test_sema+0x9e>
c01094ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01094b0:	8d 48 04             	lea    0x4(%eax),%ecx
c01094b3:	b8 67 66 66 66       	mov    $0x66666667,%eax
c01094b8:	f7 e9                	imul   %ecx
c01094ba:	89 d0                	mov    %edx,%eax
c01094bc:	d1 f8                	sar    %eax
c01094be:	89 ca                	mov    %ecx,%edx
c01094c0:	c1 fa 1f             	sar    $0x1f,%edx
c01094c3:	29 d0                	sub    %edx,%eax
c01094c5:	89 c2                	mov    %eax,%edx
c01094c7:	c1 e2 02             	shl    $0x2,%edx
c01094ca:	01 c2                	add    %eax,%edx
c01094cc:	89 c8                	mov    %ecx,%eax
c01094ce:	29 d0                	sub    %edx,%eax
c01094d0:	8b 04 85 20 d1 1c c0 	mov    -0x3fe32ee0(,%eax,4),%eax
c01094d7:	83 f8 02             	cmp    $0x2,%eax
c01094da:	74 56                	je     c0109532 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c01094dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01094df:	8d 48 01             	lea    0x1(%eax),%ecx
c01094e2:	b8 67 66 66 66       	mov    $0x66666667,%eax
c01094e7:	f7 e9                	imul   %ecx
c01094e9:	89 d0                	mov    %edx,%eax
c01094eb:	d1 f8                	sar    %eax
c01094ed:	89 ca                	mov    %ecx,%edx
c01094ef:	c1 fa 1f             	sar    $0x1f,%edx
c01094f2:	29 d0                	sub    %edx,%eax
c01094f4:	89 c2                	mov    %eax,%edx
c01094f6:	c1 e2 02             	shl    $0x2,%edx
c01094f9:	01 c2                	add    %eax,%edx
c01094fb:	89 c8                	mov    %ecx,%eax
c01094fd:	29 d0                	sub    %edx,%eax
c01094ff:	8b 04 85 20 d1 1c c0 	mov    -0x3fe32ee0(,%eax,4),%eax
c0109506:	83 f8 02             	cmp    $0x2,%eax
c0109509:	74 27                	je     c0109532 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c010950b:	8b 45 08             	mov    0x8(%ebp),%eax
c010950e:	c7 04 85 20 d1 1c c0 	movl   $0x2,-0x3fe32ee0(,%eax,4)
c0109515:	02 00 00 00 
        up(&s[i]);
c0109519:	8b 55 08             	mov    0x8(%ebp),%edx
c010951c:	89 d0                	mov    %edx,%eax
c010951e:	01 c0                	add    %eax,%eax
c0109520:	01 d0                	add    %edx,%eax
c0109522:	c1 e0 02             	shl    $0x2,%eax
c0109525:	05 40 d1 1c c0       	add    $0xc01cd140,%eax
c010952a:	89 04 24             	mov    %eax,(%esp)
c010952d:	e8 12 0a 00 00       	call   c0109f44 <up>
    }
}
c0109532:	90                   	nop
c0109533:	89 ec                	mov    %ebp,%esp
c0109535:	5d                   	pop    %ebp
c0109536:	c3                   	ret    

c0109537 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0109537:	55                   	push   %ebp
c0109538:	89 e5                	mov    %esp,%ebp
c010953a:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c010953d:	c7 04 24 34 d1 1c c0 	movl   $0xc01cd134,(%esp)
c0109544:	e8 19 0a 00 00       	call   c0109f62 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0109549:	8b 45 08             	mov    0x8(%ebp),%eax
c010954c:	c7 04 85 20 d1 1c c0 	movl   $0x1,-0x3fe32ee0(,%eax,4)
c0109553:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0109557:	8b 45 08             	mov    0x8(%ebp),%eax
c010955a:	89 04 24             	mov    %eax,(%esp)
c010955d:	e8 32 ff ff ff       	call   c0109494 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109562:	c7 04 24 34 d1 1c c0 	movl   $0xc01cd134,(%esp)
c0109569:	e8 d6 09 00 00       	call   c0109f44 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c010956e:	8b 55 08             	mov    0x8(%ebp),%edx
c0109571:	89 d0                	mov    %edx,%eax
c0109573:	01 c0                	add    %eax,%eax
c0109575:	01 d0                	add    %edx,%eax
c0109577:	c1 e0 02             	shl    $0x2,%eax
c010957a:	05 40 d1 1c c0       	add    $0xc01cd140,%eax
c010957f:	89 04 24             	mov    %eax,(%esp)
c0109582:	e8 db 09 00 00       	call   c0109f62 <down>
}
c0109587:	90                   	nop
c0109588:	89 ec                	mov    %ebp,%esp
c010958a:	5d                   	pop    %ebp
c010958b:	c3                   	ret    

c010958c <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c010958c:	55                   	push   %ebp
c010958d:	89 e5                	mov    %esp,%ebp
c010958f:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109592:	c7 04 24 34 d1 1c c0 	movl   $0xc01cd134,(%esp)
c0109599:	e8 c4 09 00 00       	call   c0109f62 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c010959e:	8b 45 08             	mov    0x8(%ebp),%eax
c01095a1:	c7 04 85 20 d1 1c c0 	movl   $0x0,-0x3fe32ee0(,%eax,4)
c01095a8:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c01095ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01095af:	8d 48 04             	lea    0x4(%eax),%ecx
c01095b2:	b8 67 66 66 66       	mov    $0x66666667,%eax
c01095b7:	f7 e9                	imul   %ecx
c01095b9:	89 d0                	mov    %edx,%eax
c01095bb:	d1 f8                	sar    %eax
c01095bd:	89 ca                	mov    %ecx,%edx
c01095bf:	c1 fa 1f             	sar    $0x1f,%edx
c01095c2:	29 d0                	sub    %edx,%eax
c01095c4:	89 c2                	mov    %eax,%edx
c01095c6:	c1 e2 02             	shl    $0x2,%edx
c01095c9:	01 c2                	add    %eax,%edx
c01095cb:	89 c8                	mov    %ecx,%eax
c01095cd:	29 d0                	sub    %edx,%eax
c01095cf:	89 04 24             	mov    %eax,(%esp)
c01095d2:	e8 bd fe ff ff       	call   c0109494 <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c01095d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01095da:	8d 48 01             	lea    0x1(%eax),%ecx
c01095dd:	b8 67 66 66 66       	mov    $0x66666667,%eax
c01095e2:	f7 e9                	imul   %ecx
c01095e4:	89 d0                	mov    %edx,%eax
c01095e6:	d1 f8                	sar    %eax
c01095e8:	89 ca                	mov    %ecx,%edx
c01095ea:	c1 fa 1f             	sar    $0x1f,%edx
c01095ed:	29 d0                	sub    %edx,%eax
c01095ef:	89 c2                	mov    %eax,%edx
c01095f1:	c1 e2 02             	shl    $0x2,%edx
c01095f4:	01 c2                	add    %eax,%edx
c01095f6:	89 c8                	mov    %ecx,%eax
c01095f8:	29 d0                	sub    %edx,%eax
c01095fa:	89 04 24             	mov    %eax,(%esp)
c01095fd:	e8 92 fe ff ff       	call   c0109494 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109602:	c7 04 24 34 d1 1c c0 	movl   $0xc01cd134,(%esp)
c0109609:	e8 36 09 00 00       	call   c0109f44 <up>
}
c010960e:	90                   	nop
c010960f:	89 ec                	mov    %ebp,%esp
c0109611:	5d                   	pop    %ebp
c0109612:	c3                   	ret    

c0109613 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c0109613:	55                   	push   %ebp
c0109614:	89 e5                	mov    %esp,%ebp
c0109616:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c0109619:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0109620:	8b 45 08             	mov    0x8(%ebp),%eax
c0109623:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0109626:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109629:	89 44 24 04          	mov    %eax,0x4(%esp)
c010962d:	c7 04 24 78 fe 10 c0 	movl   $0xc010fe78,(%esp)
c0109634:	e8 39 6d ff ff       	call   c0100372 <cprintf>
    while(iter++<TIMES)
c0109639:	eb 62                	jmp    c010969d <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c010963b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010963e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109642:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109645:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109649:	c7 04 24 98 fe 10 c0 	movl   $0xc010fe98,(%esp)
c0109650:	e8 1d 6d ff ff       	call   c0100372 <cprintf>
        do_sleep(SLEEP_TIME);
c0109655:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010965c:	e8 ae 2c 00 00       	call   c010c30f <do_sleep>
        phi_take_forks_sema(i); 
c0109661:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109664:	89 04 24             	mov    %eax,(%esp)
c0109667:	e8 cb fe ff ff       	call   c0109537 <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c010966c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010966f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109673:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109676:	89 44 24 04          	mov    %eax,0x4(%esp)
c010967a:	c7 04 24 c8 fe 10 c0 	movl   $0xc010fec8,(%esp)
c0109681:	e8 ec 6c ff ff       	call   c0100372 <cprintf>
        do_sleep(SLEEP_TIME);
c0109686:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010968d:	e8 7d 2c 00 00       	call   c010c30f <do_sleep>
        phi_put_forks_sema(i); 
c0109692:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109695:	89 04 24             	mov    %eax,(%esp)
c0109698:	e8 ef fe ff ff       	call   c010958c <phi_put_forks_sema>
    while(iter++<TIMES)
c010969d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096a0:	8d 50 01             	lea    0x1(%eax),%edx
c01096a3:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01096a6:	83 f8 03             	cmp    $0x3,%eax
c01096a9:	7e 90                	jle    c010963b <philosopher_using_semaphore+0x28>
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c01096ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096b2:	c7 04 24 f3 fe 10 c0 	movl   $0xc010fef3,(%esp)
c01096b9:	e8 b4 6c ff ff       	call   c0100372 <cprintf>
    return 0;    
c01096be:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01096c3:	89 ec                	mov    %ebp,%esp
c01096c5:	5d                   	pop    %ebp
c01096c6:	c3                   	ret    

c01096c7 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c01096c7:	55                   	push   %ebp
c01096c8:	89 e5                	mov    %esp,%ebp
c01096ca:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c01096cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01096d0:	8b 04 85 a4 d1 1c c0 	mov    -0x3fe32e5c(,%eax,4),%eax
c01096d7:	83 f8 01             	cmp    $0x1,%eax
c01096da:	0f 85 b5 00 00 00    	jne    c0109795 <phi_test_condvar+0xce>
c01096e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01096e3:	8d 48 04             	lea    0x4(%eax),%ecx
c01096e6:	b8 67 66 66 66       	mov    $0x66666667,%eax
c01096eb:	f7 e9                	imul   %ecx
c01096ed:	89 d0                	mov    %edx,%eax
c01096ef:	d1 f8                	sar    %eax
c01096f1:	89 ca                	mov    %ecx,%edx
c01096f3:	c1 fa 1f             	sar    $0x1f,%edx
c01096f6:	29 d0                	sub    %edx,%eax
c01096f8:	89 c2                	mov    %eax,%edx
c01096fa:	c1 e2 02             	shl    $0x2,%edx
c01096fd:	01 c2                	add    %eax,%edx
c01096ff:	89 c8                	mov    %ecx,%eax
c0109701:	29 d0                	sub    %edx,%eax
c0109703:	8b 04 85 a4 d1 1c c0 	mov    -0x3fe32e5c(,%eax,4),%eax
c010970a:	83 f8 02             	cmp    $0x2,%eax
c010970d:	0f 84 82 00 00 00    	je     c0109795 <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c0109713:	8b 45 08             	mov    0x8(%ebp),%eax
c0109716:	8d 48 01             	lea    0x1(%eax),%ecx
c0109719:	b8 67 66 66 66       	mov    $0x66666667,%eax
c010971e:	f7 e9                	imul   %ecx
c0109720:	89 d0                	mov    %edx,%eax
c0109722:	d1 f8                	sar    %eax
c0109724:	89 ca                	mov    %ecx,%edx
c0109726:	c1 fa 1f             	sar    $0x1f,%edx
c0109729:	29 d0                	sub    %edx,%eax
c010972b:	89 c2                	mov    %eax,%edx
c010972d:	c1 e2 02             	shl    $0x2,%edx
c0109730:	01 c2                	add    %eax,%edx
c0109732:	89 c8                	mov    %ecx,%eax
c0109734:	29 d0                	sub    %edx,%eax
c0109736:	8b 04 85 a4 d1 1c c0 	mov    -0x3fe32e5c(,%eax,4),%eax
c010973d:	83 f8 02             	cmp    $0x2,%eax
c0109740:	74 53                	je     c0109795 <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c0109742:	8b 45 08             	mov    0x8(%ebp),%eax
c0109745:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109749:	c7 04 24 10 ff 10 c0 	movl   $0xc010ff10,(%esp)
c0109750:	e8 1d 6c ff ff       	call   c0100372 <cprintf>
        state_condvar[i] = EATING ;
c0109755:	8b 45 08             	mov    0x8(%ebp),%eax
c0109758:	c7 04 85 a4 d1 1c c0 	movl   $0x2,-0x3fe32e5c(,%eax,4)
c010975f:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c0109763:	8b 45 08             	mov    0x8(%ebp),%eax
c0109766:	89 44 24 04          	mov    %eax,0x4(%esp)
c010976a:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c0109771:	e8 fc 6b ff ff       	call   c0100372 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c0109776:	a1 80 9a 13 c0       	mov    0xc0139a80,%eax
c010977b:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010977e:	8b 55 08             	mov    0x8(%ebp),%edx
c0109781:	89 d0                	mov    %edx,%eax
c0109783:	c1 e0 02             	shl    $0x2,%eax
c0109786:	01 d0                	add    %edx,%eax
c0109788:	c1 e0 02             	shl    $0x2,%eax
c010978b:	01 c8                	add    %ecx,%eax
c010978d:	89 04 24             	mov    %eax,(%esp)
c0109790:	e8 9d 04 00 00       	call   c0109c32 <cond_signal>
    }
}
c0109795:	90                   	nop
c0109796:	89 ec                	mov    %ebp,%esp
c0109798:	5d                   	pop    %ebp
c0109799:	c3                   	ret    

c010979a <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c010979a:	55                   	push   %ebp
c010979b:	89 e5                	mov    %esp,%ebp
c010979d:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01097a0:	a1 80 9a 13 c0       	mov    0xc0139a80,%eax
c01097a5:	89 04 24             	mov    %eax,(%esp)
c01097a8:	e8 b5 07 00 00       	call   c0109f62 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     state_condvar[i]=HUNGRY;
c01097ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01097b0:	c7 04 85 a4 d1 1c c0 	movl   $0x1,-0x3fe32e5c(,%eax,4)
c01097b7:	01 00 00 00 
     // try to get fork
     phi_test_condvar(i);
c01097bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01097be:	89 04 24             	mov    %eax,(%esp)
c01097c1:	e8 01 ff ff ff       	call   c01096c7 <phi_test_condvar>
     if (state_condvar[i] != EATING) {
c01097c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01097c9:	8b 04 85 a4 d1 1c c0 	mov    -0x3fe32e5c(,%eax,4),%eax
c01097d0:	83 f8 02             	cmp    $0x2,%eax
c01097d3:	74 32                	je     c0109807 <phi_take_forks_condvar+0x6d>
         cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n", i);
c01097d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01097d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097dc:	c7 04 24 6c ff 10 c0 	movl   $0xc010ff6c,(%esp)
c01097e3:	e8 8a 6b ff ff       	call   c0100372 <cprintf>
         cond_wait(&mtp->cv[i]);
c01097e8:	a1 80 9a 13 c0       	mov    0xc0139a80,%eax
c01097ed:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01097f0:	8b 55 08             	mov    0x8(%ebp),%edx
c01097f3:	89 d0                	mov    %edx,%eax
c01097f5:	c1 e0 02             	shl    $0x2,%eax
c01097f8:	01 d0                	add    %edx,%eax
c01097fa:	c1 e0 02             	shl    $0x2,%eax
c01097fd:	01 c8                	add    %ecx,%eax
c01097ff:	89 04 24             	mov    %eax,(%esp)
c0109802:	e8 ca 04 00 00       	call   c0109cd1 <cond_wait>
     }
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c0109807:	a1 80 9a 13 c0       	mov    0xc0139a80,%eax
c010980c:	8b 40 18             	mov    0x18(%eax),%eax
c010980f:	85 c0                	test   %eax,%eax
c0109811:	7e 12                	jle    c0109825 <phi_take_forks_condvar+0x8b>
         up(&(mtp->next));
c0109813:	a1 80 9a 13 c0       	mov    0xc0139a80,%eax
c0109818:	83 c0 0c             	add    $0xc,%eax
c010981b:	89 04 24             	mov    %eax,(%esp)
c010981e:	e8 21 07 00 00       	call   c0109f44 <up>
     else
         up(&(mtp->mutex));
}
c0109823:	eb 0d                	jmp    c0109832 <phi_take_forks_condvar+0x98>
         up(&(mtp->mutex));
c0109825:	a1 80 9a 13 c0       	mov    0xc0139a80,%eax
c010982a:	89 04 24             	mov    %eax,(%esp)
c010982d:	e8 12 07 00 00       	call   c0109f44 <up>
}
c0109832:	90                   	nop
c0109833:	89 ec                	mov    %ebp,%esp
c0109835:	5d                   	pop    %ebp
c0109836:	c3                   	ret    

c0109837 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c0109837:	55                   	push   %ebp
c0109838:	89 e5                	mov    %esp,%ebp
c010983a:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c010983d:	a1 80 9a 13 c0       	mov    0xc0139a80,%eax
c0109842:	89 04 24             	mov    %eax,(%esp)
c0109845:	e8 18 07 00 00       	call   c0109f62 <down>

//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
     state_condvar[i] = THINKING;
c010984a:	8b 45 08             	mov    0x8(%ebp),%eax
c010984d:	c7 04 85 a4 d1 1c c0 	movl   $0x0,-0x3fe32e5c(,%eax,4)
c0109854:	00 00 00 00 
     // test left and right neighbors
     phi_test_condvar(LEFT);
c0109858:	8b 45 08             	mov    0x8(%ebp),%eax
c010985b:	8d 48 04             	lea    0x4(%eax),%ecx
c010985e:	b8 67 66 66 66       	mov    $0x66666667,%eax
c0109863:	f7 e9                	imul   %ecx
c0109865:	89 d0                	mov    %edx,%eax
c0109867:	d1 f8                	sar    %eax
c0109869:	89 ca                	mov    %ecx,%edx
c010986b:	c1 fa 1f             	sar    $0x1f,%edx
c010986e:	29 d0                	sub    %edx,%eax
c0109870:	89 c2                	mov    %eax,%edx
c0109872:	c1 e2 02             	shl    $0x2,%edx
c0109875:	01 c2                	add    %eax,%edx
c0109877:	89 c8                	mov    %ecx,%eax
c0109879:	29 d0                	sub    %edx,%eax
c010987b:	89 04 24             	mov    %eax,(%esp)
c010987e:	e8 44 fe ff ff       	call   c01096c7 <phi_test_condvar>
     phi_test_condvar(RIGHT);
c0109883:	8b 45 08             	mov    0x8(%ebp),%eax
c0109886:	8d 48 01             	lea    0x1(%eax),%ecx
c0109889:	b8 67 66 66 66       	mov    $0x66666667,%eax
c010988e:	f7 e9                	imul   %ecx
c0109890:	89 d0                	mov    %edx,%eax
c0109892:	d1 f8                	sar    %eax
c0109894:	89 ca                	mov    %ecx,%edx
c0109896:	c1 fa 1f             	sar    $0x1f,%edx
c0109899:	29 d0                	sub    %edx,%eax
c010989b:	89 c2                	mov    %eax,%edx
c010989d:	c1 e2 02             	shl    $0x2,%edx
c01098a0:	01 c2                	add    %eax,%edx
c01098a2:	89 c8                	mov    %ecx,%eax
c01098a4:	29 d0                	sub    %edx,%eax
c01098a6:	89 04 24             	mov    %eax,(%esp)
c01098a9:	e8 19 fe ff ff       	call   c01096c7 <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c01098ae:	a1 80 9a 13 c0       	mov    0xc0139a80,%eax
c01098b3:	8b 40 18             	mov    0x18(%eax),%eax
c01098b6:	85 c0                	test   %eax,%eax
c01098b8:	7e 12                	jle    c01098cc <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c01098ba:	a1 80 9a 13 c0       	mov    0xc0139a80,%eax
c01098bf:	83 c0 0c             	add    $0xc,%eax
c01098c2:	89 04 24             	mov    %eax,(%esp)
c01098c5:	e8 7a 06 00 00       	call   c0109f44 <up>
     else
        up(&(mtp->mutex));
}
c01098ca:	eb 0d                	jmp    c01098d9 <phi_put_forks_condvar+0xa2>
        up(&(mtp->mutex));
c01098cc:	a1 80 9a 13 c0       	mov    0xc0139a80,%eax
c01098d1:	89 04 24             	mov    %eax,(%esp)
c01098d4:	e8 6b 06 00 00       	call   c0109f44 <up>
}
c01098d9:	90                   	nop
c01098da:	89 ec                	mov    %ebp,%esp
c01098dc:	5d                   	pop    %ebp
c01098dd:	c3                   	ret    

c01098de <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c01098de:	55                   	push   %ebp
c01098df:	89 e5                	mov    %esp,%ebp
c01098e1:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c01098e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01098eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c01098f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098f4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01098f8:	c7 04 24 a8 ff 10 c0 	movl   $0xc010ffa8,(%esp)
c01098ff:	e8 6e 6a ff ff       	call   c0100372 <cprintf>
    while(iter++<TIMES)
c0109904:	eb 62                	jmp    c0109968 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c0109906:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109909:	89 44 24 08          	mov    %eax,0x8(%esp)
c010990d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109910:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109914:	c7 04 24 c8 ff 10 c0 	movl   $0xc010ffc8,(%esp)
c010991b:	e8 52 6a ff ff       	call   c0100372 <cprintf>
        do_sleep(SLEEP_TIME);
c0109920:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109927:	e8 e3 29 00 00       	call   c010c30f <do_sleep>
        phi_take_forks_condvar(i); 
c010992c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010992f:	89 04 24             	mov    %eax,(%esp)
c0109932:	e8 63 fe ff ff       	call   c010979a <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c0109937:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010993a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010993e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109941:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109945:	c7 04 24 f8 ff 10 c0 	movl   $0xc010fff8,(%esp)
c010994c:	e8 21 6a ff ff       	call   c0100372 <cprintf>
        do_sleep(SLEEP_TIME);
c0109951:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109958:	e8 b2 29 00 00       	call   c010c30f <do_sleep>
        phi_put_forks_condvar(i); 
c010995d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109960:	89 04 24             	mov    %eax,(%esp)
c0109963:	e8 cf fe ff ff       	call   c0109837 <phi_put_forks_condvar>
    while(iter++<TIMES)
c0109968:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010996b:	8d 50 01             	lea    0x1(%eax),%edx
c010996e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109971:	83 f8 03             	cmp    $0x3,%eax
c0109974:	7e 90                	jle    c0109906 <philosopher_using_condvar+0x28>
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0109976:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109979:	89 44 24 04          	mov    %eax,0x4(%esp)
c010997d:	c7 04 24 28 00 11 c0 	movl   $0xc0110028,(%esp)
c0109984:	e8 e9 69 ff ff       	call   c0100372 <cprintf>
    return 0;    
c0109989:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010998e:	89 ec                	mov    %ebp,%esp
c0109990:	5d                   	pop    %ebp
c0109991:	c3                   	ret    

c0109992 <check_sync>:

void check_sync(void){
c0109992:	55                   	push   %ebp
c0109993:	89 e5                	mov    %esp,%ebp
c0109995:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c0109998:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010999f:	00 
c01099a0:	c7 04 24 34 d1 1c c0 	movl   $0xc01cd134,(%esp)
c01099a7:	e8 1d 04 00 00       	call   c0109dc9 <sem_init>
    for(i=0;i<N;i++){
c01099ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01099b3:	e9 93 00 00 00       	jmp    c0109a4b <check_sync+0xb9>
        sem_init(&s[i], 0);
c01099b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01099bb:	89 d0                	mov    %edx,%eax
c01099bd:	01 c0                	add    %eax,%eax
c01099bf:	01 d0                	add    %edx,%eax
c01099c1:	c1 e0 02             	shl    $0x2,%eax
c01099c4:	05 40 d1 1c c0       	add    $0xc01cd140,%eax
c01099c9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01099d0:	00 
c01099d1:	89 04 24             	mov    %eax,(%esp)
c01099d4:	e8 f0 03 00 00       	call   c0109dc9 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c01099d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099dc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01099e3:	00 
c01099e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01099e8:	c7 04 24 13 96 10 c0 	movl   $0xc0109613,(%esp)
c01099ef:	e8 23 14 00 00       	call   c010ae17 <kernel_thread>
c01099f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c01099f7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01099fb:	7f 1c                	jg     c0109a19 <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c01099fd:	c7 44 24 08 48 00 11 	movl   $0xc0110048,0x8(%esp)
c0109a04:	c0 
c0109a05:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c0109a0c:	00 
c0109a0d:	c7 04 24 7a 00 11 c0 	movl   $0xc011007a,(%esp)
c0109a14:	e8 d7 73 ff ff       	call   c0100df0 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c0109a19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a1c:	89 04 24             	mov    %eax,(%esp)
c0109a1f:	e8 7d 13 00 00       	call   c010ada1 <find_proc>
c0109a24:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109a27:	89 04 95 7c d1 1c c0 	mov    %eax,-0x3fe32e84(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c0109a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a31:	8b 04 85 7c d1 1c c0 	mov    -0x3fe32e84(,%eax,4),%eax
c0109a38:	c7 44 24 04 91 00 11 	movl   $0xc0110091,0x4(%esp)
c0109a3f:	c0 
c0109a40:	89 04 24             	mov    %eax,(%esp)
c0109a43:	e8 23 0f 00 00       	call   c010a96b <set_proc_name>
    for(i=0;i<N;i++){
c0109a48:	ff 45 f4             	incl   -0xc(%ebp)
c0109a4b:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109a4f:	0f 8e 63 ff ff ff    	jle    c01099b8 <check_sync+0x26>
    }

    //check condition variable
    monitor_init(&mt, N);
c0109a55:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0109a5c:	00 
c0109a5d:	c7 04 24 c0 d1 1c c0 	movl   $0xc01cd1c0,(%esp)
c0109a64:	e8 9c 00 00 00       	call   c0109b05 <monitor_init>
    for(i=0;i<N;i++){
c0109a69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109a70:	e9 80 00 00 00       	jmp    c0109af5 <check_sync+0x163>
        state_condvar[i]=THINKING;
c0109a75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a78:	c7 04 85 a4 d1 1c c0 	movl   $0x0,-0x3fe32e5c(,%eax,4)
c0109a7f:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109a83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a86:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109a8d:	00 
c0109a8e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a92:	c7 04 24 de 98 10 c0 	movl   $0xc01098de,(%esp)
c0109a99:	e8 79 13 00 00       	call   c010ae17 <kernel_thread>
c0109a9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0109aa1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109aa5:	7f 1c                	jg     c0109ac3 <check_sync+0x131>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0109aa7:	c7 44 24 08 a8 00 11 	movl   $0xc01100a8,0x8(%esp)
c0109aae:	c0 
c0109aaf:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c0109ab6:	00 
c0109ab7:	c7 04 24 7a 00 11 c0 	movl   $0xc011007a,(%esp)
c0109abe:	e8 2d 73 ff ff       	call   c0100df0 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0109ac3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ac6:	89 04 24             	mov    %eax,(%esp)
c0109ac9:	e8 d3 12 00 00       	call   c010ada1 <find_proc>
c0109ace:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109ad1:	89 04 95 90 d1 1c c0 	mov    %eax,-0x3fe32e70(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c0109ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109adb:	8b 04 85 90 d1 1c c0 	mov    -0x3fe32e70(,%eax,4),%eax
c0109ae2:	c7 44 24 04 d8 00 11 	movl   $0xc01100d8,0x4(%esp)
c0109ae9:	c0 
c0109aea:	89 04 24             	mov    %eax,(%esp)
c0109aed:	e8 79 0e 00 00       	call   c010a96b <set_proc_name>
    for(i=0;i<N;i++){
c0109af2:	ff 45 f4             	incl   -0xc(%ebp)
c0109af5:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109af9:	0f 8e 76 ff ff ff    	jle    c0109a75 <check_sync+0xe3>
    }
}
c0109aff:	90                   	nop
c0109b00:	90                   	nop
c0109b01:	89 ec                	mov    %ebp,%esp
c0109b03:	5d                   	pop    %ebp
c0109b04:	c3                   	ret    

c0109b05 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c0109b05:	55                   	push   %ebp
c0109b06:	89 e5                	mov    %esp,%ebp
c0109b08:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c0109b0b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109b0f:	75 24                	jne    c0109b35 <monitor_init+0x30>
c0109b11:	c7 44 24 0c f4 00 11 	movl   $0xc01100f4,0xc(%esp)
c0109b18:	c0 
c0109b19:	c7 44 24 08 fd 00 11 	movl   $0xc01100fd,0x8(%esp)
c0109b20:	c0 
c0109b21:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c0109b28:	00 
c0109b29:	c7 04 24 12 01 11 c0 	movl   $0xc0110112,(%esp)
c0109b30:	e8 bb 72 ff ff       	call   c0100df0 <__panic>
    mtp->next_count = 0;
c0109b35:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b38:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c0109b3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b42:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109b49:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b4c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109b53:	00 
c0109b54:	89 04 24             	mov    %eax,(%esp)
c0109b57:	e8 6d 02 00 00       	call   c0109dc9 <sem_init>
    sem_init(&(mtp->next), 0);
c0109b5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b5f:	83 c0 0c             	add    $0xc,%eax
c0109b62:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109b69:	00 
c0109b6a:	89 04 24             	mov    %eax,(%esp)
c0109b6d:	e8 57 02 00 00       	call   c0109dc9 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c0109b72:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109b75:	89 d0                	mov    %edx,%eax
c0109b77:	c1 e0 02             	shl    $0x2,%eax
c0109b7a:	01 d0                	add    %edx,%eax
c0109b7c:	c1 e0 02             	shl    $0x2,%eax
c0109b7f:	89 04 24             	mov    %eax,(%esp)
c0109b82:	e8 54 b2 ff ff       	call   c0104ddb <kmalloc>
c0109b87:	8b 55 08             	mov    0x8(%ebp),%edx
c0109b8a:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c0109b8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b90:	8b 40 1c             	mov    0x1c(%eax),%eax
c0109b93:	85 c0                	test   %eax,%eax
c0109b95:	75 24                	jne    c0109bbb <monitor_init+0xb6>
c0109b97:	c7 44 24 0c 26 01 11 	movl   $0xc0110126,0xc(%esp)
c0109b9e:	c0 
c0109b9f:	c7 44 24 08 fd 00 11 	movl   $0xc01100fd,0x8(%esp)
c0109ba6:	c0 
c0109ba7:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0109bae:	00 
c0109baf:	c7 04 24 12 01 11 c0 	movl   $0xc0110112,(%esp)
c0109bb6:	e8 35 72 ff ff       	call   c0100df0 <__panic>
    for(i=0; i<num_cv; i++){
c0109bbb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109bc2:	eb 60                	jmp    c0109c24 <monitor_init+0x11f>
        mtp->cv[i].count=0;
c0109bc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bc7:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109bca:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109bcd:	89 d0                	mov    %edx,%eax
c0109bcf:	c1 e0 02             	shl    $0x2,%eax
c0109bd2:	01 d0                	add    %edx,%eax
c0109bd4:	c1 e0 02             	shl    $0x2,%eax
c0109bd7:	01 c8                	add    %ecx,%eax
c0109bd9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c0109be0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109be3:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109be6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109be9:	89 d0                	mov    %edx,%eax
c0109beb:	c1 e0 02             	shl    $0x2,%eax
c0109bee:	01 d0                	add    %edx,%eax
c0109bf0:	c1 e0 02             	shl    $0x2,%eax
c0109bf3:	01 c8                	add    %ecx,%eax
c0109bf5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109bfc:	00 
c0109bfd:	89 04 24             	mov    %eax,(%esp)
c0109c00:	e8 c4 01 00 00       	call   c0109dc9 <sem_init>
        mtp->cv[i].owner=mtp;
c0109c05:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c08:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109c0b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109c0e:	89 d0                	mov    %edx,%eax
c0109c10:	c1 e0 02             	shl    $0x2,%eax
c0109c13:	01 d0                	add    %edx,%eax
c0109c15:	c1 e0 02             	shl    $0x2,%eax
c0109c18:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0109c1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c1e:	89 42 10             	mov    %eax,0x10(%edx)
    for(i=0; i<num_cv; i++){
c0109c21:	ff 45 f4             	incl   -0xc(%ebp)
c0109c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c27:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0109c2a:	77 98                	ja     c0109bc4 <monitor_init+0xbf>
    }
}
c0109c2c:	90                   	nop
c0109c2d:	90                   	nop
c0109c2e:	89 ec                	mov    %ebp,%esp
c0109c30:	5d                   	pop    %ebp
c0109c31:	c3                   	ret    

c0109c32 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c0109c32:	55                   	push   %ebp
c0109c33:	89 e5                	mov    %esp,%ebp
c0109c35:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109c38:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c3b:	8b 40 10             	mov    0x10(%eax),%eax
c0109c3e:	8b 50 18             	mov    0x18(%eax),%edx
c0109c41:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c44:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c47:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109c4b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c52:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c56:	c7 04 24 34 01 11 c0 	movl   $0xc0110134,(%esp)
c0109c5d:	e8 10 67 ff ff       	call   c0100372 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
   if(cvp->count>0) {
c0109c62:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c65:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c68:	85 c0                	test   %eax,%eax
c0109c6a:	7e 36                	jle    c0109ca2 <cond_signal+0x70>
       cvp->owner->next_count++;
c0109c6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c6f:	8b 40 10             	mov    0x10(%eax),%eax
c0109c72:	8b 50 18             	mov    0x18(%eax),%edx
c0109c75:	42                   	inc    %edx
c0109c76:	89 50 18             	mov    %edx,0x18(%eax)
       up(&(cvp->sem));
c0109c79:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c7c:	89 04 24             	mov    %eax,(%esp)
c0109c7f:	e8 c0 02 00 00       	call   c0109f44 <up>
       down(&(cvp->owner->next));
c0109c84:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c87:	8b 40 10             	mov    0x10(%eax),%eax
c0109c8a:	83 c0 0c             	add    $0xc,%eax
c0109c8d:	89 04 24             	mov    %eax,(%esp)
c0109c90:	e8 cd 02 00 00       	call   c0109f62 <down>
       cvp->owner->next_count--;
c0109c95:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c98:	8b 40 10             	mov    0x10(%eax),%eax
c0109c9b:	8b 50 18             	mov    0x18(%eax),%edx
c0109c9e:	4a                   	dec    %edx
c0109c9f:	89 50 18             	mov    %edx,0x18(%eax)
   }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109ca2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ca5:	8b 40 10             	mov    0x10(%eax),%eax
c0109ca8:	8b 50 18             	mov    0x18(%eax),%edx
c0109cab:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cae:	8b 40 0c             	mov    0xc(%eax),%eax
c0109cb1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109cb5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109cb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cbc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109cc0:	c7 04 24 7c 01 11 c0 	movl   $0xc011017c,(%esp)
c0109cc7:	e8 a6 66 ff ff       	call   c0100372 <cprintf>
}
c0109ccc:	90                   	nop
c0109ccd:	89 ec                	mov    %ebp,%esp
c0109ccf:	5d                   	pop    %ebp
c0109cd0:	c3                   	ret    

c0109cd1 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109cd1:	55                   	push   %ebp
c0109cd2:	89 e5                	mov    %esp,%ebp
c0109cd4:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109cd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cda:	8b 40 10             	mov    0x10(%eax),%eax
c0109cdd:	8b 50 18             	mov    0x18(%eax),%edx
c0109ce0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ce3:	8b 40 0c             	mov    0xc(%eax),%eax
c0109ce6:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109cea:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109cee:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cf1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109cf5:	c7 04 24 c0 01 11 c0 	movl   $0xc01101c0,(%esp)
c0109cfc:	e8 71 66 ff ff       	call   c0100372 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
    cvp->count++;
c0109d01:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d04:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d07:	8d 50 01             	lea    0x1(%eax),%edx
c0109d0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d0d:	89 50 0c             	mov    %edx,0xc(%eax)
    if (cvp->owner->next_count > 0)
c0109d10:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d13:	8b 40 10             	mov    0x10(%eax),%eax
c0109d16:	8b 40 18             	mov    0x18(%eax),%eax
c0109d19:	85 c0                	test   %eax,%eax
c0109d1b:	7e 13                	jle    c0109d30 <cond_wait+0x5f>
        up(&(cvp->owner->next));
c0109d1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d20:	8b 40 10             	mov    0x10(%eax),%eax
c0109d23:	83 c0 0c             	add    $0xc,%eax
c0109d26:	89 04 24             	mov    %eax,(%esp)
c0109d29:	e8 16 02 00 00       	call   c0109f44 <up>
c0109d2e:	eb 0e                	jmp    c0109d3e <cond_wait+0x6d>
    else
        up(&(cvp->owner->mutex));
c0109d30:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d33:	8b 40 10             	mov    0x10(%eax),%eax
c0109d36:	89 04 24             	mov    %eax,(%esp)
c0109d39:	e8 06 02 00 00       	call   c0109f44 <up>
    down(&(cvp->sem));
c0109d3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d41:	89 04 24             	mov    %eax,(%esp)
c0109d44:	e8 19 02 00 00       	call   c0109f62 <down>
    cvp->count--;
c0109d49:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d4c:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d4f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109d52:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d55:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109d58:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d5b:	8b 40 10             	mov    0x10(%eax),%eax
c0109d5e:	8b 50 18             	mov    0x18(%eax),%edx
c0109d61:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d64:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d67:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109d6b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109d6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d72:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d76:	c7 04 24 04 02 11 c0 	movl   $0xc0110204,(%esp)
c0109d7d:	e8 f0 65 ff ff       	call   c0100372 <cprintf>
}
c0109d82:	90                   	nop
c0109d83:	89 ec                	mov    %ebp,%esp
c0109d85:	5d                   	pop    %ebp
c0109d86:	c3                   	ret    

c0109d87 <__intr_save>:
__intr_save(void) {
c0109d87:	55                   	push   %ebp
c0109d88:	89 e5                	mov    %esp,%ebp
c0109d8a:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109d8d:	9c                   	pushf  
c0109d8e:	58                   	pop    %eax
c0109d8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109d92:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109d95:	25 00 02 00 00       	and    $0x200,%eax
c0109d9a:	85 c0                	test   %eax,%eax
c0109d9c:	74 0c                	je     c0109daa <__intr_save+0x23>
        intr_disable();
c0109d9e:	e8 03 83 ff ff       	call   c01020a6 <intr_disable>
        return 1;
c0109da3:	b8 01 00 00 00       	mov    $0x1,%eax
c0109da8:	eb 05                	jmp    c0109daf <__intr_save+0x28>
    return 0;
c0109daa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109daf:	89 ec                	mov    %ebp,%esp
c0109db1:	5d                   	pop    %ebp
c0109db2:	c3                   	ret    

c0109db3 <__intr_restore>:
__intr_restore(bool flag) {
c0109db3:	55                   	push   %ebp
c0109db4:	89 e5                	mov    %esp,%ebp
c0109db6:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109db9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109dbd:	74 05                	je     c0109dc4 <__intr_restore+0x11>
        intr_enable();
c0109dbf:	e8 da 82 ff ff       	call   c010209e <intr_enable>
}
c0109dc4:	90                   	nop
c0109dc5:	89 ec                	mov    %ebp,%esp
c0109dc7:	5d                   	pop    %ebp
c0109dc8:	c3                   	ret    

c0109dc9 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109dc9:	55                   	push   %ebp
c0109dca:	89 e5                	mov    %esp,%ebp
c0109dcc:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109dcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dd2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109dd5:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109dd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dda:	83 c0 04             	add    $0x4,%eax
c0109ddd:	89 04 24             	mov    %eax,(%esp)
c0109de0:	e8 47 02 00 00       	call   c010a02c <wait_queue_init>
}
c0109de5:	90                   	nop
c0109de6:	89 ec                	mov    %ebp,%esp
c0109de8:	5d                   	pop    %ebp
c0109de9:	c3                   	ret    

c0109dea <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109dea:	55                   	push   %ebp
c0109deb:	89 e5                	mov    %esp,%ebp
c0109ded:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109df0:	e8 92 ff ff ff       	call   c0109d87 <__intr_save>
c0109df5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109df8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dfb:	83 c0 04             	add    $0x4,%eax
c0109dfe:	89 04 24             	mov    %eax,(%esp)
c0109e01:	e8 8e 04 00 00       	call   c010a294 <wait_queue_first>
c0109e06:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109e09:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109e0d:	75 0f                	jne    c0109e1e <__up+0x34>
            sem->value ++;
c0109e0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e12:	8b 00                	mov    (%eax),%eax
c0109e14:	8d 50 01             	lea    0x1(%eax),%edx
c0109e17:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e1a:	89 10                	mov    %edx,(%eax)
c0109e1c:	eb 58                	jmp    c0109e76 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109e1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e21:	8b 00                	mov    (%eax),%eax
c0109e23:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109e29:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0109e2c:	74 24                	je     c0109e52 <__up+0x68>
c0109e2e:	c7 44 24 0c 48 02 11 	movl   $0xc0110248,0xc(%esp)
c0109e35:	c0 
c0109e36:	c7 44 24 08 6d 02 11 	movl   $0xc011026d,0x8(%esp)
c0109e3d:	c0 
c0109e3e:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109e45:	00 
c0109e46:	c7 04 24 82 02 11 c0 	movl   $0xc0110282,(%esp)
c0109e4d:	e8 9e 6f ff ff       	call   c0100df0 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109e52:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e55:	8d 50 04             	lea    0x4(%eax),%edx
c0109e58:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109e5f:	00 
c0109e60:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e63:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109e67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e6a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e6e:	89 14 24             	mov    %edx,(%esp)
c0109e71:	e8 c2 04 00 00       	call   c010a338 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109e76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e79:	89 04 24             	mov    %eax,(%esp)
c0109e7c:	e8 32 ff ff ff       	call   c0109db3 <__intr_restore>
}
c0109e81:	90                   	nop
c0109e82:	89 ec                	mov    %ebp,%esp
c0109e84:	5d                   	pop    %ebp
c0109e85:	c3                   	ret    

c0109e86 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109e86:	55                   	push   %ebp
c0109e87:	89 e5                	mov    %esp,%ebp
c0109e89:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109e8c:	e8 f6 fe ff ff       	call   c0109d87 <__intr_save>
c0109e91:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109e94:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e97:	8b 00                	mov    (%eax),%eax
c0109e99:	85 c0                	test   %eax,%eax
c0109e9b:	7e 22                	jle    c0109ebf <__down+0x39>
        sem->value --;
c0109e9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ea0:	8b 00                	mov    (%eax),%eax
c0109ea2:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109ea5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ea8:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109eaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ead:	89 04 24             	mov    %eax,(%esp)
c0109eb0:	e8 fe fe ff ff       	call   c0109db3 <__intr_restore>
        return 0;
c0109eb5:	b8 00 00 00 00       	mov    $0x0,%eax
c0109eba:	e9 81 00 00 00       	jmp    c0109f40 <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109ebf:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109ec2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109ec5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ec8:	8d 50 04             	lea    0x4(%eax),%edx
c0109ecb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ece:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109ed2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ed5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ed9:	89 14 24             	mov    %edx,(%esp)
c0109edc:	e8 67 05 00 00       	call   c010a448 <wait_current_set>
    local_intr_restore(intr_flag);
c0109ee1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ee4:	89 04 24             	mov    %eax,(%esp)
c0109ee7:	e8 c7 fe ff ff       	call   c0109db3 <__intr_restore>

    schedule();
c0109eec:	e8 6e 2c 00 00       	call   c010cb5f <schedule>

    local_intr_save(intr_flag);
c0109ef1:	e8 91 fe ff ff       	call   c0109d87 <__intr_save>
c0109ef6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109ef9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109efc:	89 04 24             	mov    %eax,(%esp)
c0109eff:	e8 0a 04 00 00       	call   c010a30e <wait_in_queue>
c0109f04:	85 c0                	test   %eax,%eax
c0109f06:	74 15                	je     c0109f1d <__down+0x97>
c0109f08:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f0b:	8d 50 04             	lea    0x4(%eax),%edx
c0109f0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f11:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109f15:	89 14 24             	mov    %edx,(%esp)
c0109f18:	e8 db 01 00 00       	call   c010a0f8 <wait_queue_del>
    local_intr_restore(intr_flag);
c0109f1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f20:	89 04 24             	mov    %eax,(%esp)
c0109f23:	e8 8b fe ff ff       	call   c0109db3 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109f28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f2b:	8b 40 04             	mov    0x4(%eax),%eax
c0109f2e:	39 45 0c             	cmp    %eax,0xc(%ebp)
c0109f31:	74 08                	je     c0109f3b <__down+0xb5>
        return wait->wakeup_flags;
c0109f33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f36:	8b 40 04             	mov    0x4(%eax),%eax
c0109f39:	eb 05                	jmp    c0109f40 <__down+0xba>
    }
    return 0;
c0109f3b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f40:	89 ec                	mov    %ebp,%esp
c0109f42:	5d                   	pop    %ebp
c0109f43:	c3                   	ret    

c0109f44 <up>:

void
up(semaphore_t *sem) {
c0109f44:	55                   	push   %ebp
c0109f45:	89 e5                	mov    %esp,%ebp
c0109f47:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109f4a:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109f51:	00 
c0109f52:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f55:	89 04 24             	mov    %eax,(%esp)
c0109f58:	e8 8d fe ff ff       	call   c0109dea <__up>
}
c0109f5d:	90                   	nop
c0109f5e:	89 ec                	mov    %ebp,%esp
c0109f60:	5d                   	pop    %ebp
c0109f61:	c3                   	ret    

c0109f62 <down>:

void
down(semaphore_t *sem) {
c0109f62:	55                   	push   %ebp
c0109f63:	89 e5                	mov    %esp,%ebp
c0109f65:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109f68:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109f6f:	00 
c0109f70:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f73:	89 04 24             	mov    %eax,(%esp)
c0109f76:	e8 0b ff ff ff       	call   c0109e86 <__down>
c0109f7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109f7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f82:	74 24                	je     c0109fa8 <down+0x46>
c0109f84:	c7 44 24 0c 92 02 11 	movl   $0xc0110292,0xc(%esp)
c0109f8b:	c0 
c0109f8c:	c7 44 24 08 6d 02 11 	movl   $0xc011026d,0x8(%esp)
c0109f93:	c0 
c0109f94:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109f9b:	00 
c0109f9c:	c7 04 24 82 02 11 c0 	movl   $0xc0110282,(%esp)
c0109fa3:	e8 48 6e ff ff       	call   c0100df0 <__panic>
}
c0109fa8:	90                   	nop
c0109fa9:	89 ec                	mov    %ebp,%esp
c0109fab:	5d                   	pop    %ebp
c0109fac:	c3                   	ret    

c0109fad <try_down>:

bool
try_down(semaphore_t *sem) {
c0109fad:	55                   	push   %ebp
c0109fae:	89 e5                	mov    %esp,%ebp
c0109fb0:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109fb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109fba:	e8 c8 fd ff ff       	call   c0109d87 <__intr_save>
c0109fbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109fc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fc5:	8b 00                	mov    (%eax),%eax
c0109fc7:	85 c0                	test   %eax,%eax
c0109fc9:	7e 14                	jle    c0109fdf <try_down+0x32>
        sem->value --, ret = 1;
c0109fcb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fce:	8b 00                	mov    (%eax),%eax
c0109fd0:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109fd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fd6:	89 10                	mov    %edx,(%eax)
c0109fd8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109fdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fe2:	89 04 24             	mov    %eax,(%esp)
c0109fe5:	e8 c9 fd ff ff       	call   c0109db3 <__intr_restore>
    return ret;
c0109fea:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109fed:	89 ec                	mov    %ebp,%esp
c0109fef:	5d                   	pop    %ebp
c0109ff0:	c3                   	ret    

c0109ff1 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109ff1:	55                   	push   %ebp
c0109ff2:	89 e5                	mov    %esp,%ebp
c0109ff4:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109ff7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ffa:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109ffd:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109fff:	8b 45 08             	mov    0x8(%ebp),%eax
c010a002:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c010a009:	8b 45 08             	mov    0x8(%ebp),%eax
c010a00c:	83 c0 0c             	add    $0xc,%eax
c010a00f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c010a012:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a015:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a018:	89 50 04             	mov    %edx,0x4(%eax)
c010a01b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a01e:	8b 50 04             	mov    0x4(%eax),%edx
c010a021:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a024:	89 10                	mov    %edx,(%eax)
}
c010a026:	90                   	nop
}
c010a027:	90                   	nop
c010a028:	89 ec                	mov    %ebp,%esp
c010a02a:	5d                   	pop    %ebp
c010a02b:	c3                   	ret    

c010a02c <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c010a02c:	55                   	push   %ebp
c010a02d:	89 e5                	mov    %esp,%ebp
c010a02f:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c010a032:	8b 45 08             	mov    0x8(%ebp),%eax
c010a035:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c010a038:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a03b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a03e:	89 50 04             	mov    %edx,0x4(%eax)
c010a041:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a044:	8b 50 04             	mov    0x4(%eax),%edx
c010a047:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a04a:	89 10                	mov    %edx,(%eax)
}
c010a04c:	90                   	nop
}
c010a04d:	90                   	nop
c010a04e:	89 ec                	mov    %ebp,%esp
c010a050:	5d                   	pop    %ebp
c010a051:	c3                   	ret    

c010a052 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c010a052:	55                   	push   %ebp
c010a053:	89 e5                	mov    %esp,%ebp
c010a055:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c010a058:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a05b:	83 c0 0c             	add    $0xc,%eax
c010a05e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list->next == list;
c010a061:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a064:	8b 40 04             	mov    0x4(%eax),%eax
c010a067:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a06a:	0f 94 c0             	sete   %al
c010a06d:	0f b6 c0             	movzbl %al,%eax
c010a070:	85 c0                	test   %eax,%eax
c010a072:	74 09                	je     c010a07d <wait_queue_add+0x2b>
c010a074:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a077:	8b 00                	mov    (%eax),%eax
c010a079:	85 c0                	test   %eax,%eax
c010a07b:	75 24                	jne    c010a0a1 <wait_queue_add+0x4f>
c010a07d:	c7 44 24 0c a0 02 11 	movl   $0xc01102a0,0xc(%esp)
c010a084:	c0 
c010a085:	c7 44 24 08 d5 02 11 	movl   $0xc01102d5,0x8(%esp)
c010a08c:	c0 
c010a08d:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c010a094:	00 
c010a095:	c7 04 24 ea 02 11 c0 	movl   $0xc01102ea,(%esp)
c010a09c:	e8 4f 6d ff ff       	call   c0100df0 <__panic>
    wait->wait_queue = queue;
c010a0a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0a4:	8b 55 08             	mov    0x8(%ebp),%edx
c010a0a7:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c010a0aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0ad:	8d 50 0c             	lea    0xc(%eax),%edx
c010a0b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a0b6:	89 55 ec             	mov    %edx,-0x14(%ebp)
    __list_add(elm, listelm->prev, listelm);
c010a0b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0bc:	8b 00                	mov    (%eax),%eax
c010a0be:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a0c1:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a0c4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a0c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0ca:	89 45 e0             	mov    %eax,-0x20(%ebp)
    prev->next = next->prev = elm;
c010a0cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a0d0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a0d3:	89 10                	mov    %edx,(%eax)
c010a0d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a0d8:	8b 10                	mov    (%eax),%edx
c010a0da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a0dd:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a0e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a0e3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a0e6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a0e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a0ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a0ef:	89 10                	mov    %edx,(%eax)
}
c010a0f1:	90                   	nop
}
c010a0f2:	90                   	nop
}
c010a0f3:	90                   	nop
c010a0f4:	89 ec                	mov    %ebp,%esp
c010a0f6:	5d                   	pop    %ebp
c010a0f7:	c3                   	ret    

c010a0f8 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c010a0f8:	55                   	push   %ebp
c010a0f9:	89 e5                	mov    %esp,%ebp
c010a0fb:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a0fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a101:	83 c0 0c             	add    $0xc,%eax
c010a104:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list->next == list;
c010a107:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a10a:	8b 40 04             	mov    0x4(%eax),%eax
c010a10d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a110:	0f 94 c0             	sete   %al
c010a113:	0f b6 c0             	movzbl %al,%eax
c010a116:	85 c0                	test   %eax,%eax
c010a118:	75 0b                	jne    c010a125 <wait_queue_del+0x2d>
c010a11a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a11d:	8b 40 08             	mov    0x8(%eax),%eax
c010a120:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a123:	74 24                	je     c010a149 <wait_queue_del+0x51>
c010a125:	c7 44 24 0c fc 02 11 	movl   $0xc01102fc,0xc(%esp)
c010a12c:	c0 
c010a12d:	c7 44 24 08 d5 02 11 	movl   $0xc01102d5,0x8(%esp)
c010a134:	c0 
c010a135:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c010a13c:	00 
c010a13d:	c7 04 24 ea 02 11 c0 	movl   $0xc01102ea,(%esp)
c010a144:	e8 a7 6c ff ff       	call   c0100df0 <__panic>
    list_del_init(&(wait->wait_link));
c010a149:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a14c:	83 c0 0c             	add    $0xc,%eax
c010a14f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a152:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a155:	89 45 ec             	mov    %eax,-0x14(%ebp)
    __list_del(listelm->prev, listelm->next);
c010a158:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a15b:	8b 40 04             	mov    0x4(%eax),%eax
c010a15e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a161:	8b 12                	mov    (%edx),%edx
c010a163:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a166:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    prev->next = next;
c010a169:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a16c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a16f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a172:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a175:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a178:	89 10                	mov    %edx,(%eax)
}
c010a17a:	90                   	nop
}
c010a17b:	90                   	nop
c010a17c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a17f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    elm->prev = elm->next = elm;
c010a182:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a185:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a188:	89 50 04             	mov    %edx,0x4(%eax)
c010a18b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a18e:	8b 50 04             	mov    0x4(%eax),%edx
c010a191:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a194:	89 10                	mov    %edx,(%eax)
}
c010a196:	90                   	nop
}
c010a197:	90                   	nop
}
c010a198:	90                   	nop
c010a199:	89 ec                	mov    %ebp,%esp
c010a19b:	5d                   	pop    %ebp
c010a19c:	c3                   	ret    

c010a19d <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c010a19d:	55                   	push   %ebp
c010a19e:	89 e5                	mov    %esp,%ebp
c010a1a0:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a1a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1a6:	83 c0 0c             	add    $0xc,%eax
c010a1a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return list->next == list;
c010a1ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a1af:	8b 40 04             	mov    0x4(%eax),%eax
c010a1b2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a1b5:	0f 94 c0             	sete   %al
c010a1b8:	0f b6 c0             	movzbl %al,%eax
c010a1bb:	85 c0                	test   %eax,%eax
c010a1bd:	75 0b                	jne    c010a1ca <wait_queue_next+0x2d>
c010a1bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1c2:	8b 40 08             	mov    0x8(%eax),%eax
c010a1c5:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a1c8:	74 24                	je     c010a1ee <wait_queue_next+0x51>
c010a1ca:	c7 44 24 0c fc 02 11 	movl   $0xc01102fc,0xc(%esp)
c010a1d1:	c0 
c010a1d2:	c7 44 24 08 d5 02 11 	movl   $0xc01102d5,0x8(%esp)
c010a1d9:	c0 
c010a1da:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c010a1e1:	00 
c010a1e2:	c7 04 24 ea 02 11 c0 	movl   $0xc01102ea,(%esp)
c010a1e9:	e8 02 6c ff ff       	call   c0100df0 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c010a1ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1f1:	83 c0 0c             	add    $0xc,%eax
c010a1f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return listelm->next;
c010a1f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1fa:	8b 40 04             	mov    0x4(%eax),%eax
c010a1fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010a200:	8b 45 08             	mov    0x8(%ebp),%eax
c010a203:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a206:	74 08                	je     c010a210 <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c010a208:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a20b:	83 e8 0c             	sub    $0xc,%eax
c010a20e:	eb 05                	jmp    c010a215 <wait_queue_next+0x78>
    }
    return NULL;
c010a210:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a215:	89 ec                	mov    %ebp,%esp
c010a217:	5d                   	pop    %ebp
c010a218:	c3                   	ret    

c010a219 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c010a219:	55                   	push   %ebp
c010a21a:	89 e5                	mov    %esp,%ebp
c010a21c:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a21f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a222:	83 c0 0c             	add    $0xc,%eax
c010a225:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return list->next == list;
c010a228:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a22b:	8b 40 04             	mov    0x4(%eax),%eax
c010a22e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a231:	0f 94 c0             	sete   %al
c010a234:	0f b6 c0             	movzbl %al,%eax
c010a237:	85 c0                	test   %eax,%eax
c010a239:	75 0b                	jne    c010a246 <wait_queue_prev+0x2d>
c010a23b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a23e:	8b 40 08             	mov    0x8(%eax),%eax
c010a241:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a244:	74 24                	je     c010a26a <wait_queue_prev+0x51>
c010a246:	c7 44 24 0c fc 02 11 	movl   $0xc01102fc,0xc(%esp)
c010a24d:	c0 
c010a24e:	c7 44 24 08 d5 02 11 	movl   $0xc01102d5,0x8(%esp)
c010a255:	c0 
c010a256:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010a25d:	00 
c010a25e:	c7 04 24 ea 02 11 c0 	movl   $0xc01102ea,(%esp)
c010a265:	e8 86 6b ff ff       	call   c0100df0 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c010a26a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a26d:	83 c0 0c             	add    $0xc,%eax
c010a270:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return listelm->prev;
c010a273:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a276:	8b 00                	mov    (%eax),%eax
c010a278:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010a27b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a27e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a281:	74 08                	je     c010a28b <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c010a283:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a286:	83 e8 0c             	sub    $0xc,%eax
c010a289:	eb 05                	jmp    c010a290 <wait_queue_prev+0x77>
    }
    return NULL;
c010a28b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a290:	89 ec                	mov    %ebp,%esp
c010a292:	5d                   	pop    %ebp
c010a293:	c3                   	ret    

c010a294 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c010a294:	55                   	push   %ebp
c010a295:	89 e5                	mov    %esp,%ebp
c010a297:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c010a29a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a29d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return listelm->next;
c010a2a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a2a3:	8b 40 04             	mov    0x4(%eax),%eax
c010a2a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a2a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2ac:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a2af:	74 08                	je     c010a2b9 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c010a2b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a2b4:	83 e8 0c             	sub    $0xc,%eax
c010a2b7:	eb 05                	jmp    c010a2be <wait_queue_first+0x2a>
    }
    return NULL;
c010a2b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a2be:	89 ec                	mov    %ebp,%esp
c010a2c0:	5d                   	pop    %ebp
c010a2c1:	c3                   	ret    

c010a2c2 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c010a2c2:	55                   	push   %ebp
c010a2c3:	89 e5                	mov    %esp,%ebp
c010a2c5:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c010a2c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2cb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return listelm->prev;
c010a2ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a2d1:	8b 00                	mov    (%eax),%eax
c010a2d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a2d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2d9:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a2dc:	74 08                	je     c010a2e6 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c010a2de:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a2e1:	83 e8 0c             	sub    $0xc,%eax
c010a2e4:	eb 05                	jmp    c010a2eb <wait_queue_last+0x29>
    }
    return NULL;
c010a2e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a2eb:	89 ec                	mov    %ebp,%esp
c010a2ed:	5d                   	pop    %ebp
c010a2ee:	c3                   	ret    

c010a2ef <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c010a2ef:	55                   	push   %ebp
c010a2f0:	89 e5                	mov    %esp,%ebp
c010a2f2:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c010a2f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list->next == list;
c010a2fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a2fe:	8b 40 04             	mov    0x4(%eax),%eax
c010a301:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a304:	0f 94 c0             	sete   %al
c010a307:	0f b6 c0             	movzbl %al,%eax
}
c010a30a:	89 ec                	mov    %ebp,%esp
c010a30c:	5d                   	pop    %ebp
c010a30d:	c3                   	ret    

c010a30e <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c010a30e:	55                   	push   %ebp
c010a30f:	89 e5                	mov    %esp,%ebp
c010a311:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c010a314:	8b 45 08             	mov    0x8(%ebp),%eax
c010a317:	83 c0 0c             	add    $0xc,%eax
c010a31a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a31d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a320:	8b 40 04             	mov    0x4(%eax),%eax
c010a323:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a326:	0f 94 c0             	sete   %al
c010a329:	0f b6 c0             	movzbl %al,%eax
c010a32c:	85 c0                	test   %eax,%eax
c010a32e:	0f 94 c0             	sete   %al
c010a331:	0f b6 c0             	movzbl %al,%eax
}
c010a334:	89 ec                	mov    %ebp,%esp
c010a336:	5d                   	pop    %ebp
c010a337:	c3                   	ret    

c010a338 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c010a338:	55                   	push   %ebp
c010a339:	89 e5                	mov    %esp,%ebp
c010a33b:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c010a33e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a342:	74 12                	je     c010a356 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c010a344:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a347:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a34b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a34e:	89 04 24             	mov    %eax,(%esp)
c010a351:	e8 a2 fd ff ff       	call   c010a0f8 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c010a356:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a359:	8b 55 10             	mov    0x10(%ebp),%edx
c010a35c:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c010a35f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a362:	8b 00                	mov    (%eax),%eax
c010a364:	89 04 24             	mov    %eax,(%esp)
c010a367:	e8 54 27 00 00       	call   c010cac0 <wakeup_proc>
}
c010a36c:	90                   	nop
c010a36d:	89 ec                	mov    %ebp,%esp
c010a36f:	5d                   	pop    %ebp
c010a370:	c3                   	ret    

c010a371 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a371:	55                   	push   %ebp
c010a372:	89 e5                	mov    %esp,%ebp
c010a374:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a377:	8b 45 08             	mov    0x8(%ebp),%eax
c010a37a:	89 04 24             	mov    %eax,(%esp)
c010a37d:	e8 12 ff ff ff       	call   c010a294 <wait_queue_first>
c010a382:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a385:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a389:	74 20                	je     c010a3ab <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010a38b:	8b 45 10             	mov    0x10(%ebp),%eax
c010a38e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a392:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a395:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a399:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a39c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a3a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3a3:	89 04 24             	mov    %eax,(%esp)
c010a3a6:	e8 8d ff ff ff       	call   c010a338 <wakeup_wait>
    }
}
c010a3ab:	90                   	nop
c010a3ac:	89 ec                	mov    %ebp,%esp
c010a3ae:	5d                   	pop    %ebp
c010a3af:	c3                   	ret    

c010a3b0 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a3b0:	55                   	push   %ebp
c010a3b1:	89 e5                	mov    %esp,%ebp
c010a3b3:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a3b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3b9:	89 04 24             	mov    %eax,(%esp)
c010a3bc:	e8 d3 fe ff ff       	call   c010a294 <wait_queue_first>
c010a3c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a3c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a3c8:	74 79                	je     c010a443 <wakeup_queue+0x93>
        if (del) {
c010a3ca:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a3ce:	74 37                	je     c010a407 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a3d0:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a3d7:	00 
c010a3d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a3db:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a3df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a3e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3e9:	89 04 24             	mov    %eax,(%esp)
c010a3ec:	e8 47 ff ff ff       	call   c010a338 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a3f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3f4:	89 04 24             	mov    %eax,(%esp)
c010a3f7:	e8 98 fe ff ff       	call   c010a294 <wait_queue_first>
c010a3fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a3ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a403:	75 cb                	jne    c010a3d0 <wakeup_queue+0x20>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
        }
    }
}
c010a405:	eb 3c                	jmp    c010a443 <wakeup_queue+0x93>
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a407:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a40e:	00 
c010a40f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a412:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a416:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a419:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a41d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a420:	89 04 24             	mov    %eax,(%esp)
c010a423:	e8 10 ff ff ff       	call   c010a338 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a428:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a42b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a42f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a432:	89 04 24             	mov    %eax,(%esp)
c010a435:	e8 63 fd ff ff       	call   c010a19d <wait_queue_next>
c010a43a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a43d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a441:	75 c4                	jne    c010a407 <wakeup_queue+0x57>
}
c010a443:	90                   	nop
c010a444:	89 ec                	mov    %ebp,%esp
c010a446:	5d                   	pop    %ebp
c010a447:	c3                   	ret    

c010a448 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a448:	55                   	push   %ebp
c010a449:	89 e5                	mov    %esp,%ebp
c010a44b:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a44e:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010a453:	85 c0                	test   %eax,%eax
c010a455:	75 24                	jne    c010a47b <wait_current_set+0x33>
c010a457:	c7 44 24 0c 39 03 11 	movl   $0xc0110339,0xc(%esp)
c010a45e:	c0 
c010a45f:	c7 44 24 08 d5 02 11 	movl   $0xc01102d5,0x8(%esp)
c010a466:	c0 
c010a467:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a46e:	00 
c010a46f:	c7 04 24 ea 02 11 c0 	movl   $0xc01102ea,(%esp)
c010a476:	e8 75 69 ff ff       	call   c0100df0 <__panic>
    wait_init(wait, current);
c010a47b:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010a480:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a484:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a487:	89 04 24             	mov    %eax,(%esp)
c010a48a:	e8 62 fb ff ff       	call   c0109ff1 <wait_init>
    current->state = PROC_SLEEPING;
c010a48f:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010a494:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a49a:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010a49f:	8b 55 10             	mov    0x10(%ebp),%edx
c010a4a2:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a4a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a4ab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a4af:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4b2:	89 04 24             	mov    %eax,(%esp)
c010a4b5:	e8 98 fb ff ff       	call   c010a052 <wait_queue_add>
}
c010a4ba:	90                   	nop
c010a4bb:	89 ec                	mov    %ebp,%esp
c010a4bd:	5d                   	pop    %ebp
c010a4be:	c3                   	ret    

c010a4bf <page2ppn>:
page2ppn(struct Page *page) {
c010a4bf:	55                   	push   %ebp
c010a4c0:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a4c2:	8b 15 a0 cf 1c c0    	mov    0xc01ccfa0,%edx
c010a4c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4cb:	29 d0                	sub    %edx,%eax
c010a4cd:	c1 f8 05             	sar    $0x5,%eax
}
c010a4d0:	5d                   	pop    %ebp
c010a4d1:	c3                   	ret    

c010a4d2 <page2pa>:
page2pa(struct Page *page) {
c010a4d2:	55                   	push   %ebp
c010a4d3:	89 e5                	mov    %esp,%ebp
c010a4d5:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a4d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4db:	89 04 24             	mov    %eax,(%esp)
c010a4de:	e8 dc ff ff ff       	call   c010a4bf <page2ppn>
c010a4e3:	c1 e0 0c             	shl    $0xc,%eax
}
c010a4e6:	89 ec                	mov    %ebp,%esp
c010a4e8:	5d                   	pop    %ebp
c010a4e9:	c3                   	ret    

c010a4ea <page2kva>:
page2kva(struct Page *page) {
c010a4ea:	55                   	push   %ebp
c010a4eb:	89 e5                	mov    %esp,%ebp
c010a4ed:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a4f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4f3:	89 04 24             	mov    %eax,(%esp)
c010a4f6:	e8 d7 ff ff ff       	call   c010a4d2 <page2pa>
c010a4fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a4fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a501:	c1 e8 0c             	shr    $0xc,%eax
c010a504:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a507:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c010a50c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a50f:	72 23                	jb     c010a534 <page2kva+0x4a>
c010a511:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a514:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a518:	c7 44 24 08 4c 03 11 	movl   $0xc011034c,0x8(%esp)
c010a51f:	c0 
c010a520:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a527:	00 
c010a528:	c7 04 24 6f 03 11 c0 	movl   $0xc011036f,(%esp)
c010a52f:	e8 bc 68 ff ff       	call   c0100df0 <__panic>
c010a534:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a537:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a53c:	89 ec                	mov    %ebp,%esp
c010a53e:	5d                   	pop    %ebp
c010a53f:	c3                   	ret    

c010a540 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010a540:	55                   	push   %ebp
c010a541:	89 e5                	mov    %esp,%ebp
c010a543:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010a546:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a54d:	e8 4d 76 ff ff       	call   c0101b9f <ide_device_valid>
c010a552:	85 c0                	test   %eax,%eax
c010a554:	75 1c                	jne    c010a572 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010a556:	c7 44 24 08 7d 03 11 	movl   $0xc011037d,0x8(%esp)
c010a55d:	c0 
c010a55e:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010a565:	00 
c010a566:	c7 04 24 97 03 11 c0 	movl   $0xc0110397,(%esp)
c010a56d:	e8 7e 68 ff ff       	call   c0100df0 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010a572:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a579:	e8 61 76 ff ff       	call   c0101bdf <ide_device_size>
c010a57e:	c1 e8 03             	shr    $0x3,%eax
c010a581:	a3 40 d0 1c c0       	mov    %eax,0xc01cd040
}
c010a586:	90                   	nop
c010a587:	89 ec                	mov    %ebp,%esp
c010a589:	5d                   	pop    %ebp
c010a58a:	c3                   	ret    

c010a58b <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010a58b:	55                   	push   %ebp
c010a58c:	89 e5                	mov    %esp,%ebp
c010a58e:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a591:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a594:	89 04 24             	mov    %eax,(%esp)
c010a597:	e8 4e ff ff ff       	call   c010a4ea <page2kva>
c010a59c:	8b 55 08             	mov    0x8(%ebp),%edx
c010a59f:	c1 ea 08             	shr    $0x8,%edx
c010a5a2:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a5a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a5a9:	74 0b                	je     c010a5b6 <swapfs_read+0x2b>
c010a5ab:	8b 15 40 d0 1c c0    	mov    0xc01cd040,%edx
c010a5b1:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a5b4:	72 23                	jb     c010a5d9 <swapfs_read+0x4e>
c010a5b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a5bd:	c7 44 24 08 a8 03 11 	movl   $0xc01103a8,0x8(%esp)
c010a5c4:	c0 
c010a5c5:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a5cc:	00 
c010a5cd:	c7 04 24 97 03 11 c0 	movl   $0xc0110397,(%esp)
c010a5d4:	e8 17 68 ff ff       	call   c0100df0 <__panic>
c010a5d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a5dc:	c1 e2 03             	shl    $0x3,%edx
c010a5df:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a5e6:	00 
c010a5e7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a5eb:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a5ef:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a5f6:	e8 21 76 ff ff       	call   c0101c1c <ide_read_secs>
}
c010a5fb:	89 ec                	mov    %ebp,%esp
c010a5fd:	5d                   	pop    %ebp
c010a5fe:	c3                   	ret    

c010a5ff <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010a5ff:	55                   	push   %ebp
c010a600:	89 e5                	mov    %esp,%ebp
c010a602:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a605:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a608:	89 04 24             	mov    %eax,(%esp)
c010a60b:	e8 da fe ff ff       	call   c010a4ea <page2kva>
c010a610:	8b 55 08             	mov    0x8(%ebp),%edx
c010a613:	c1 ea 08             	shr    $0x8,%edx
c010a616:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a619:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a61d:	74 0b                	je     c010a62a <swapfs_write+0x2b>
c010a61f:	8b 15 40 d0 1c c0    	mov    0xc01cd040,%edx
c010a625:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a628:	72 23                	jb     c010a64d <swapfs_write+0x4e>
c010a62a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a62d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a631:	c7 44 24 08 a8 03 11 	movl   $0xc01103a8,0x8(%esp)
c010a638:	c0 
c010a639:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010a640:	00 
c010a641:	c7 04 24 97 03 11 c0 	movl   $0xc0110397,(%esp)
c010a648:	e8 a3 67 ff ff       	call   c0100df0 <__panic>
c010a64d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a650:	c1 e2 03             	shl    $0x3,%edx
c010a653:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a65a:	00 
c010a65b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a65f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a663:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a66a:	e8 ee 77 ff ff       	call   c0101e5d <ide_write_secs>
}
c010a66f:	89 ec                	mov    %ebp,%esp
c010a671:	5d                   	pop    %ebp
c010a672:	c3                   	ret    

c010a673 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010a673:	52                   	push   %edx
    call *%ebx              # call fn
c010a674:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010a676:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010a677:	e8 a2 0c 00 00       	call   c010b31e <do_exit>

c010a67c <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010a67c:	55                   	push   %ebp
c010a67d:	89 e5                	mov    %esp,%ebp
c010a67f:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010a682:	8b 55 10             	mov    0x10(%ebp),%edx
c010a685:	8b 45 08             	mov    0x8(%ebp),%eax
c010a688:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010a68a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a68d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a690:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010a693:	8b 45 08             	mov    0x8(%ebp),%eax
c010a696:	83 c0 08             	add    $0x8,%eax
c010a699:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c010a69c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a69f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a6a2:	89 50 04             	mov    %edx,0x4(%eax)
c010a6a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a6a8:	8b 50 04             	mov    0x4(%eax),%edx
c010a6ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a6ae:	89 10                	mov    %edx,(%eax)
}
c010a6b0:	90                   	nop
    return timer;
c010a6b1:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010a6b4:	89 ec                	mov    %ebp,%esp
c010a6b6:	5d                   	pop    %ebp
c010a6b7:	c3                   	ret    

c010a6b8 <__intr_save>:
__intr_save(void) {
c010a6b8:	55                   	push   %ebp
c010a6b9:	89 e5                	mov    %esp,%ebp
c010a6bb:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a6be:	9c                   	pushf  
c010a6bf:	58                   	pop    %eax
c010a6c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a6c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a6c6:	25 00 02 00 00       	and    $0x200,%eax
c010a6cb:	85 c0                	test   %eax,%eax
c010a6cd:	74 0c                	je     c010a6db <__intr_save+0x23>
        intr_disable();
c010a6cf:	e8 d2 79 ff ff       	call   c01020a6 <intr_disable>
        return 1;
c010a6d4:	b8 01 00 00 00       	mov    $0x1,%eax
c010a6d9:	eb 05                	jmp    c010a6e0 <__intr_save+0x28>
    return 0;
c010a6db:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a6e0:	89 ec                	mov    %ebp,%esp
c010a6e2:	5d                   	pop    %ebp
c010a6e3:	c3                   	ret    

c010a6e4 <__intr_restore>:
__intr_restore(bool flag) {
c010a6e4:	55                   	push   %ebp
c010a6e5:	89 e5                	mov    %esp,%ebp
c010a6e7:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a6ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a6ee:	74 05                	je     c010a6f5 <__intr_restore+0x11>
        intr_enable();
c010a6f0:	e8 a9 79 ff ff       	call   c010209e <intr_enable>
}
c010a6f5:	90                   	nop
c010a6f6:	89 ec                	mov    %ebp,%esp
c010a6f8:	5d                   	pop    %ebp
c010a6f9:	c3                   	ret    

c010a6fa <page2ppn>:
page2ppn(struct Page *page) {
c010a6fa:	55                   	push   %ebp
c010a6fb:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a6fd:	8b 15 a0 cf 1c c0    	mov    0xc01ccfa0,%edx
c010a703:	8b 45 08             	mov    0x8(%ebp),%eax
c010a706:	29 d0                	sub    %edx,%eax
c010a708:	c1 f8 05             	sar    $0x5,%eax
}
c010a70b:	5d                   	pop    %ebp
c010a70c:	c3                   	ret    

c010a70d <page2pa>:
page2pa(struct Page *page) {
c010a70d:	55                   	push   %ebp
c010a70e:	89 e5                	mov    %esp,%ebp
c010a710:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a713:	8b 45 08             	mov    0x8(%ebp),%eax
c010a716:	89 04 24             	mov    %eax,(%esp)
c010a719:	e8 dc ff ff ff       	call   c010a6fa <page2ppn>
c010a71e:	c1 e0 0c             	shl    $0xc,%eax
}
c010a721:	89 ec                	mov    %ebp,%esp
c010a723:	5d                   	pop    %ebp
c010a724:	c3                   	ret    

c010a725 <pa2page>:
pa2page(uintptr_t pa) {
c010a725:	55                   	push   %ebp
c010a726:	89 e5                	mov    %esp,%ebp
c010a728:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010a72b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a72e:	c1 e8 0c             	shr    $0xc,%eax
c010a731:	89 c2                	mov    %eax,%edx
c010a733:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c010a738:	39 c2                	cmp    %eax,%edx
c010a73a:	72 1c                	jb     c010a758 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010a73c:	c7 44 24 08 c8 03 11 	movl   $0xc01103c8,0x8(%esp)
c010a743:	c0 
c010a744:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010a74b:	00 
c010a74c:	c7 04 24 e7 03 11 c0 	movl   $0xc01103e7,(%esp)
c010a753:	e8 98 66 ff ff       	call   c0100df0 <__panic>
    return &pages[PPN(pa)];
c010a758:	8b 15 a0 cf 1c c0    	mov    0xc01ccfa0,%edx
c010a75e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a761:	c1 e8 0c             	shr    $0xc,%eax
c010a764:	c1 e0 05             	shl    $0x5,%eax
c010a767:	01 d0                	add    %edx,%eax
}
c010a769:	89 ec                	mov    %ebp,%esp
c010a76b:	5d                   	pop    %ebp
c010a76c:	c3                   	ret    

c010a76d <page2kva>:
page2kva(struct Page *page) {
c010a76d:	55                   	push   %ebp
c010a76e:	89 e5                	mov    %esp,%ebp
c010a770:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a773:	8b 45 08             	mov    0x8(%ebp),%eax
c010a776:	89 04 24             	mov    %eax,(%esp)
c010a779:	e8 8f ff ff ff       	call   c010a70d <page2pa>
c010a77e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a781:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a784:	c1 e8 0c             	shr    $0xc,%eax
c010a787:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a78a:	a1 a4 cf 1c c0       	mov    0xc01ccfa4,%eax
c010a78f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a792:	72 23                	jb     c010a7b7 <page2kva+0x4a>
c010a794:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a797:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a79b:	c7 44 24 08 f8 03 11 	movl   $0xc01103f8,0x8(%esp)
c010a7a2:	c0 
c010a7a3:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a7aa:	00 
c010a7ab:	c7 04 24 e7 03 11 c0 	movl   $0xc01103e7,(%esp)
c010a7b2:	e8 39 66 ff ff       	call   c0100df0 <__panic>
c010a7b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7ba:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a7bf:	89 ec                	mov    %ebp,%esp
c010a7c1:	5d                   	pop    %ebp
c010a7c2:	c3                   	ret    

c010a7c3 <kva2page>:
kva2page(void *kva) {
c010a7c3:	55                   	push   %ebp
c010a7c4:	89 e5                	mov    %esp,%ebp
c010a7c6:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010a7c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a7cf:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a7d6:	77 23                	ja     c010a7fb <kva2page+0x38>
c010a7d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7db:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a7df:	c7 44 24 08 1c 04 11 	movl   $0xc011041c,0x8(%esp)
c010a7e6:	c0 
c010a7e7:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010a7ee:	00 
c010a7ef:	c7 04 24 e7 03 11 c0 	movl   $0xc01103e7,(%esp)
c010a7f6:	e8 f5 65 ff ff       	call   c0100df0 <__panic>
c010a7fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7fe:	05 00 00 00 40       	add    $0x40000000,%eax
c010a803:	89 04 24             	mov    %eax,(%esp)
c010a806:	e8 1a ff ff ff       	call   c010a725 <pa2page>
}
c010a80b:	89 ec                	mov    %ebp,%esp
c010a80d:	5d                   	pop    %ebp
c010a80e:	c3                   	ret    

c010a80f <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010a80f:	55                   	push   %ebp
c010a810:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010a812:	8b 45 08             	mov    0x8(%ebp),%eax
c010a815:	8b 40 18             	mov    0x18(%eax),%eax
c010a818:	8d 50 01             	lea    0x1(%eax),%edx
c010a81b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a81e:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a821:	8b 45 08             	mov    0x8(%ebp),%eax
c010a824:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a827:	5d                   	pop    %ebp
c010a828:	c3                   	ret    

c010a829 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010a829:	55                   	push   %ebp
c010a82a:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010a82c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a82f:	8b 40 18             	mov    0x18(%eax),%eax
c010a832:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a835:	8b 45 08             	mov    0x8(%ebp),%eax
c010a838:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a83b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a83e:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a841:	5d                   	pop    %ebp
c010a842:	c3                   	ret    

c010a843 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010a843:	55                   	push   %ebp
c010a844:	89 e5                	mov    %esp,%ebp
c010a846:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a849:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a84d:	74 25                	je     c010a874 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010a84f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a852:	83 c0 1c             	add    $0x1c,%eax
c010a855:	89 04 24             	mov    %eax,(%esp)
c010a858:	e8 05 f7 ff ff       	call   c0109f62 <down>
        if (current != NULL) {
c010a85d:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010a862:	85 c0                	test   %eax,%eax
c010a864:	74 0e                	je     c010a874 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010a866:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010a86b:	8b 50 04             	mov    0x4(%eax),%edx
c010a86e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a871:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010a874:	90                   	nop
c010a875:	89 ec                	mov    %ebp,%esp
c010a877:	5d                   	pop    %ebp
c010a878:	c3                   	ret    

c010a879 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a879:	55                   	push   %ebp
c010a87a:	89 e5                	mov    %esp,%ebp
c010a87c:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a87f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a883:	74 18                	je     c010a89d <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010a885:	8b 45 08             	mov    0x8(%ebp),%eax
c010a888:	83 c0 1c             	add    $0x1c,%eax
c010a88b:	89 04 24             	mov    %eax,(%esp)
c010a88e:	e8 b1 f6 ff ff       	call   c0109f44 <up>
        mm->locked_by = 0;
c010a893:	8b 45 08             	mov    0x8(%ebp),%eax
c010a896:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010a89d:	90                   	nop
c010a89e:	89 ec                	mov    %ebp,%esp
c010a8a0:	5d                   	pop    %ebp
c010a8a1:	c3                   	ret    

c010a8a2 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010a8a2:	55                   	push   %ebp
c010a8a3:	89 e5                	mov    %esp,%ebp
c010a8a5:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010a8a8:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
c010a8af:	e8 27 a5 ff ff       	call   c0104ddb <kmalloc>
c010a8b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010a8b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a8bb:	0f 84 a3 00 00 00    	je     c010a964 <alloc_proc+0xc2>
        memset(proc, 0, sizeof(struct proc_struct));
c010a8c1:	c7 44 24 08 c4 00 00 	movl   $0xc4,0x8(%esp)
c010a8c8:	00 
c010a8c9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a8d0:	00 
c010a8d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8d4:	89 04 24             	mov    %eax,(%esp)
c010a8d7:	e8 59 33 00 00       	call   c010dc35 <memset>
        proc->state = PROC_UNINIT;
c010a8dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010a8e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8e8:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->cr3 = boot_cr3;
c010a8ef:	8b 15 a8 cf 1c c0    	mov    0xc01ccfa8,%edx
c010a8f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8f8:	89 50 40             	mov    %edx,0x40(%eax)
        proc->lab6_priority = 1;
c010a8fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8fe:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010a905:	00 00 00 
        memset(&(proc->context), 0, sizeof(struct context));
c010a908:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a90b:	83 c0 1c             	add    $0x1c,%eax
c010a90e:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010a915:	00 
c010a916:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a91d:	00 
c010a91e:	89 04 24             	mov    %eax,(%esp)
c010a921:	e8 0f 33 00 00       	call   c010dc35 <memset>
        memset(proc->name, 0, PROC_NAME_LEN);
c010a926:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a929:	83 c0 48             	add    $0x48,%eax
c010a92c:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a933:	00 
c010a934:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a93b:	00 
c010a93c:	89 04 24             	mov    %eax,(%esp)
c010a93f:	e8 f1 32 00 00       	call   c010dc35 <memset>
        list_init(&(proc->run_link));
c010a944:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a947:	05 a4 00 00 00       	add    $0xa4,%eax
c010a94c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    elm->prev = elm->next = elm;
c010a94f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a952:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a955:	89 50 04             	mov    %edx,0x4(%eax)
c010a958:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a95b:	8b 50 04             	mov    0x4(%eax),%edx
c010a95e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a961:	89 10                	mov    %edx,(%eax)
}
c010a963:	90                   	nop
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
    }
    return proc;
c010a964:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a967:	89 ec                	mov    %ebp,%esp
c010a969:	5d                   	pop    %ebp
c010a96a:	c3                   	ret    

c010a96b <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010a96b:	55                   	push   %ebp
c010a96c:	89 e5                	mov    %esp,%ebp
c010a96e:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010a971:	8b 45 08             	mov    0x8(%ebp),%eax
c010a974:	83 c0 48             	add    $0x48,%eax
c010a977:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a97e:	00 
c010a97f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a986:	00 
c010a987:	89 04 24             	mov    %eax,(%esp)
c010a98a:	e8 a6 32 00 00       	call   c010dc35 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010a98f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a992:	8d 50 48             	lea    0x48(%eax),%edx
c010a995:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a99c:	00 
c010a99d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9a4:	89 14 24             	mov    %edx,(%esp)
c010a9a7:	e8 6e 33 00 00       	call   c010dd1a <memcpy>
}
c010a9ac:	89 ec                	mov    %ebp,%esp
c010a9ae:	5d                   	pop    %ebp
c010a9af:	c3                   	ret    

c010a9b0 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010a9b0:	55                   	push   %ebp
c010a9b1:	89 e5                	mov    %esp,%ebp
c010a9b3:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010a9b6:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a9bd:	00 
c010a9be:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a9c5:	00 
c010a9c6:	c7 04 24 20 f2 1c c0 	movl   $0xc01cf220,(%esp)
c010a9cd:	e8 63 32 00 00       	call   c010dc35 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010a9d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9d5:	83 c0 48             	add    $0x48,%eax
c010a9d8:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a9df:	00 
c010a9e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9e4:	c7 04 24 20 f2 1c c0 	movl   $0xc01cf220,(%esp)
c010a9eb:	e8 2a 33 00 00       	call   c010dd1a <memcpy>
}
c010a9f0:	89 ec                	mov    %ebp,%esp
c010a9f2:	5d                   	pop    %ebp
c010a9f3:	c3                   	ret    

c010a9f4 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010a9f4:	55                   	push   %ebp
c010a9f5:	89 e5                	mov    %esp,%ebp
c010a9f7:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010a9fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9fd:	83 c0 7c             	add    $0x7c,%eax
c010aa00:	c7 45 fc e0 d1 1c c0 	movl   $0xc01cd1e0,-0x4(%ebp)
c010aa07:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010aa0a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010aa0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa10:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010aa13:	89 45 f0             	mov    %eax,-0x10(%ebp)
    __list_add(elm, listelm, listelm->next);
c010aa16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa19:	8b 40 04             	mov    0x4(%eax),%eax
c010aa1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010aa1f:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010aa22:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aa25:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010aa28:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    prev->next = next->prev = elm;
c010aa2b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa2e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010aa31:	89 10                	mov    %edx,(%eax)
c010aa33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa36:	8b 10                	mov    (%eax),%edx
c010aa38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa3b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010aa3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa41:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa44:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010aa47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa4a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aa4d:	89 10                	mov    %edx,(%eax)
}
c010aa4f:	90                   	nop
}
c010aa50:	90                   	nop
}
c010aa51:	90                   	nop
    proc->yptr = NULL;
c010aa52:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa55:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010aa5c:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010aa5f:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa62:	8b 40 14             	mov    0x14(%eax),%eax
c010aa65:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010aa6b:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa6e:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010aa74:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa77:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010aa7d:	85 c0                	test   %eax,%eax
c010aa7f:	74 12                	je     c010aa93 <set_links+0x9f>
        proc->optr->yptr = proc;
c010aa81:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa84:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010aa8a:	8b 55 08             	mov    0x8(%ebp),%edx
c010aa8d:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010aa93:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa96:	8b 40 14             	mov    0x14(%eax),%eax
c010aa99:	8b 55 08             	mov    0x8(%ebp),%edx
c010aa9c:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010aaa2:	a1 00 f2 1c c0       	mov    0xc01cf200,%eax
c010aaa7:	40                   	inc    %eax
c010aaa8:	a3 00 f2 1c c0       	mov    %eax,0xc01cf200
}
c010aaad:	90                   	nop
c010aaae:	89 ec                	mov    %ebp,%esp
c010aab0:	5d                   	pop    %ebp
c010aab1:	c3                   	ret    

c010aab2 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010aab2:	55                   	push   %ebp
c010aab3:	89 e5                	mov    %esp,%ebp
c010aab5:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010aab8:	8b 45 08             	mov    0x8(%ebp),%eax
c010aabb:	83 c0 7c             	add    $0x7c,%eax
c010aabe:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __list_del(listelm->prev, listelm->next);
c010aac1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010aac4:	8b 40 04             	mov    0x4(%eax),%eax
c010aac7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010aaca:	8b 12                	mov    (%edx),%edx
c010aacc:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010aacf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    prev->next = next;
c010aad2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010aad5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aad8:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010aadb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aade:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010aae1:	89 10                	mov    %edx,(%eax)
}
c010aae3:	90                   	nop
}
c010aae4:	90                   	nop
    if (proc->optr != NULL) {
c010aae5:	8b 45 08             	mov    0x8(%ebp),%eax
c010aae8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010aaee:	85 c0                	test   %eax,%eax
c010aaf0:	74 18                	je     c010ab0a <remove_links+0x58>
        proc->optr->yptr = proc->yptr;
c010aaf2:	8b 45 08             	mov    0x8(%ebp),%eax
c010aaf5:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010aafb:	8b 55 08             	mov    0x8(%ebp),%edx
c010aafe:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010ab04:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010ab0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab0d:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010ab13:	85 c0                	test   %eax,%eax
c010ab15:	74 1a                	je     c010ab31 <remove_links+0x7f>
        proc->yptr->optr = proc->optr;
c010ab17:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab1a:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010ab20:	8b 55 08             	mov    0x8(%ebp),%edx
c010ab23:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010ab29:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010ab2f:	eb 15                	jmp    c010ab46 <remove_links+0x94>
    }
    else {
       proc->parent->cptr = proc->optr;
c010ab31:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab34:	8b 40 14             	mov    0x14(%eax),%eax
c010ab37:	8b 55 08             	mov    0x8(%ebp),%edx
c010ab3a:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010ab40:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010ab46:	a1 00 f2 1c c0       	mov    0xc01cf200,%eax
c010ab4b:	48                   	dec    %eax
c010ab4c:	a3 00 f2 1c c0       	mov    %eax,0xc01cf200
}
c010ab51:	90                   	nop
c010ab52:	89 ec                	mov    %ebp,%esp
c010ab54:	5d                   	pop    %ebp
c010ab55:	c3                   	ret    

c010ab56 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010ab56:	55                   	push   %ebp
c010ab57:	89 e5                	mov    %esp,%ebp
c010ab59:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010ab5c:	c7 45 f8 e0 d1 1c c0 	movl   $0xc01cd1e0,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010ab63:	a1 84 9a 13 c0       	mov    0xc0139a84,%eax
c010ab68:	40                   	inc    %eax
c010ab69:	a3 84 9a 13 c0       	mov    %eax,0xc0139a84
c010ab6e:	a1 84 9a 13 c0       	mov    0xc0139a84,%eax
c010ab73:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010ab78:	7e 0c                	jle    c010ab86 <get_pid+0x30>
        last_pid = 1;
c010ab7a:	c7 05 84 9a 13 c0 01 	movl   $0x1,0xc0139a84
c010ab81:	00 00 00 
        goto inside;
c010ab84:	eb 14                	jmp    c010ab9a <get_pid+0x44>
    }
    if (last_pid >= next_safe) {
c010ab86:	8b 15 84 9a 13 c0    	mov    0xc0139a84,%edx
c010ab8c:	a1 88 9a 13 c0       	mov    0xc0139a88,%eax
c010ab91:	39 c2                	cmp    %eax,%edx
c010ab93:	0f 8c ab 00 00 00    	jl     c010ac44 <get_pid+0xee>
    inside:
c010ab99:	90                   	nop
        next_safe = MAX_PID;
c010ab9a:	c7 05 88 9a 13 c0 00 	movl   $0x2000,0xc0139a88
c010aba1:	20 00 00 
    repeat:
        le = list;
c010aba4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010aba7:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010abaa:	eb 7d                	jmp    c010ac29 <get_pid+0xd3>
            proc = le2proc(le, list_link);
c010abac:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010abaf:	83 e8 7c             	sub    $0x7c,%eax
c010abb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010abb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abb8:	8b 50 04             	mov    0x4(%eax),%edx
c010abbb:	a1 84 9a 13 c0       	mov    0xc0139a84,%eax
c010abc0:	39 c2                	cmp    %eax,%edx
c010abc2:	75 3c                	jne    c010ac00 <get_pid+0xaa>
                if (++ last_pid >= next_safe) {
c010abc4:	a1 84 9a 13 c0       	mov    0xc0139a84,%eax
c010abc9:	40                   	inc    %eax
c010abca:	a3 84 9a 13 c0       	mov    %eax,0xc0139a84
c010abcf:	8b 15 84 9a 13 c0    	mov    0xc0139a84,%edx
c010abd5:	a1 88 9a 13 c0       	mov    0xc0139a88,%eax
c010abda:	39 c2                	cmp    %eax,%edx
c010abdc:	7c 4b                	jl     c010ac29 <get_pid+0xd3>
                    if (last_pid >= MAX_PID) {
c010abde:	a1 84 9a 13 c0       	mov    0xc0139a84,%eax
c010abe3:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010abe8:	7e 0a                	jle    c010abf4 <get_pid+0x9e>
                        last_pid = 1;
c010abea:	c7 05 84 9a 13 c0 01 	movl   $0x1,0xc0139a84
c010abf1:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010abf4:	c7 05 88 9a 13 c0 00 	movl   $0x2000,0xc0139a88
c010abfb:	20 00 00 
                    goto repeat;
c010abfe:	eb a4                	jmp    c010aba4 <get_pid+0x4e>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010ac00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac03:	8b 50 04             	mov    0x4(%eax),%edx
c010ac06:	a1 84 9a 13 c0       	mov    0xc0139a84,%eax
c010ac0b:	39 c2                	cmp    %eax,%edx
c010ac0d:	7e 1a                	jle    c010ac29 <get_pid+0xd3>
c010ac0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac12:	8b 50 04             	mov    0x4(%eax),%edx
c010ac15:	a1 88 9a 13 c0       	mov    0xc0139a88,%eax
c010ac1a:	39 c2                	cmp    %eax,%edx
c010ac1c:	7d 0b                	jge    c010ac29 <get_pid+0xd3>
                next_safe = proc->pid;
c010ac1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac21:	8b 40 04             	mov    0x4(%eax),%eax
c010ac24:	a3 88 9a 13 c0       	mov    %eax,0xc0139a88
c010ac29:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ac2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return listelm->next;
c010ac2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac32:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c010ac35:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010ac38:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ac3b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010ac3e:	0f 85 68 ff ff ff    	jne    c010abac <get_pid+0x56>
            }
        }
    }
    return last_pid;
c010ac44:	a1 84 9a 13 c0       	mov    0xc0139a84,%eax
}
c010ac49:	89 ec                	mov    %ebp,%esp
c010ac4b:	5d                   	pop    %ebp
c010ac4c:	c3                   	ret    

c010ac4d <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010ac4d:	55                   	push   %ebp
c010ac4e:	89 e5                	mov    %esp,%ebp
c010ac50:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010ac53:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010ac58:	39 45 08             	cmp    %eax,0x8(%ebp)
c010ac5b:	74 64                	je     c010acc1 <proc_run+0x74>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010ac5d:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010ac62:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac65:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac68:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010ac6b:	e8 48 fa ff ff       	call   c010a6b8 <__intr_save>
c010ac70:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010ac73:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac76:	a3 f0 d1 1c c0       	mov    %eax,0xc01cd1f0
            load_esp0(next->kstack + KSTACKSIZE);
c010ac7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac7e:	8b 40 0c             	mov    0xc(%eax),%eax
c010ac81:	05 00 20 00 00       	add    $0x2000,%eax
c010ac86:	89 04 24             	mov    %eax,(%esp)
c010ac89:	e8 8c a4 ff ff       	call   c010511a <load_esp0>
            lcr3(next->cr3);
c010ac8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac91:	8b 40 40             	mov    0x40(%eax),%eax
c010ac94:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010ac97:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac9a:	0f 22 d8             	mov    %eax,%cr3
}
c010ac9d:	90                   	nop
            switch_to(&(prev->context), &(next->context));
c010ac9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aca1:	8d 50 1c             	lea    0x1c(%eax),%edx
c010aca4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aca7:	83 c0 1c             	add    $0x1c,%eax
c010acaa:	89 54 24 04          	mov    %edx,0x4(%esp)
c010acae:	89 04 24             	mov    %eax,(%esp)
c010acb1:	e8 db 16 00 00       	call   c010c391 <switch_to>
        }
        local_intr_restore(intr_flag);
c010acb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acb9:	89 04 24             	mov    %eax,(%esp)
c010acbc:	e8 23 fa ff ff       	call   c010a6e4 <__intr_restore>
    }
}
c010acc1:	90                   	nop
c010acc2:	89 ec                	mov    %ebp,%esp
c010acc4:	5d                   	pop    %ebp
c010acc5:	c3                   	ret    

c010acc6 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010acc6:	55                   	push   %ebp
c010acc7:	89 e5                	mov    %esp,%ebp
c010acc9:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010accc:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010acd1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acd4:	89 04 24             	mov    %eax,(%esp)
c010acd7:	e8 82 7e ff ff       	call   c0102b5e <forkrets>
}
c010acdc:	90                   	nop
c010acdd:	89 ec                	mov    %ebp,%esp
c010acdf:	5d                   	pop    %ebp
c010ace0:	c3                   	ret    

c010ace1 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010ace1:	55                   	push   %ebp
c010ace2:	89 e5                	mov    %esp,%ebp
c010ace4:	83 ec 38             	sub    $0x38,%esp
c010ace7:	89 5d fc             	mov    %ebx,-0x4(%ebp)
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010acea:	8b 45 08             	mov    0x8(%ebp),%eax
c010aced:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010acf3:	8b 45 08             	mov    0x8(%ebp),%eax
c010acf6:	8b 40 04             	mov    0x4(%eax),%eax
c010acf9:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010ad00:	00 
c010ad01:	89 04 24             	mov    %eax,(%esp)
c010ad04:	e8 8f 24 00 00       	call   c010d198 <hash32>
c010ad09:	c1 e0 03             	shl    $0x3,%eax
c010ad0c:	05 00 d2 1c c0       	add    $0xc01cd200,%eax
c010ad11:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad14:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010ad17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ad1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad20:	89 45 e8             	mov    %eax,-0x18(%ebp)
    __list_add(elm, listelm, listelm->next);
c010ad23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad26:	8b 40 04             	mov    0x4(%eax),%eax
c010ad29:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ad2c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010ad2f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ad32:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010ad35:	89 45 dc             	mov    %eax,-0x24(%ebp)
    prev->next = next->prev = elm;
c010ad38:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ad3b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ad3e:	89 10                	mov    %edx,(%eax)
c010ad40:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ad43:	8b 10                	mov    (%eax),%edx
c010ad45:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ad48:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010ad4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ad4e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010ad51:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010ad54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ad57:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010ad5a:	89 10                	mov    %edx,(%eax)
}
c010ad5c:	90                   	nop
}
c010ad5d:	90                   	nop
}
c010ad5e:	90                   	nop
}
c010ad5f:	90                   	nop
c010ad60:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010ad63:	89 ec                	mov    %ebp,%esp
c010ad65:	5d                   	pop    %ebp
c010ad66:	c3                   	ret    

c010ad67 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010ad67:	55                   	push   %ebp
c010ad68:	89 e5                	mov    %esp,%ebp
c010ad6a:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010ad6d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad70:	05 84 00 00 00       	add    $0x84,%eax
c010ad75:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __list_del(listelm->prev, listelm->next);
c010ad78:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ad7b:	8b 40 04             	mov    0x4(%eax),%eax
c010ad7e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ad81:	8b 12                	mov    (%edx),%edx
c010ad83:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010ad86:	89 45 f4             	mov    %eax,-0xc(%ebp)
    prev->next = next;
c010ad89:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ad8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ad8f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ad92:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad95:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010ad98:	89 10                	mov    %edx,(%eax)
}
c010ad9a:	90                   	nop
}
c010ad9b:	90                   	nop
}
c010ad9c:	90                   	nop
c010ad9d:	89 ec                	mov    %ebp,%esp
c010ad9f:	5d                   	pop    %ebp
c010ada0:	c3                   	ret    

c010ada1 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010ada1:	55                   	push   %ebp
c010ada2:	89 e5                	mov    %esp,%ebp
c010ada4:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010ada7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010adab:	7e 61                	jle    c010ae0e <find_proc+0x6d>
c010adad:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010adb4:	7f 58                	jg     c010ae0e <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010adb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010adb9:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010adc0:	00 
c010adc1:	89 04 24             	mov    %eax,(%esp)
c010adc4:	e8 cf 23 00 00       	call   c010d198 <hash32>
c010adc9:	c1 e0 03             	shl    $0x3,%eax
c010adcc:	05 00 d2 1c c0       	add    $0xc01cd200,%eax
c010add1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010add4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010add7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010adda:	eb 1b                	jmp    c010adf7 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010addc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010addf:	2d 84 00 00 00       	sub    $0x84,%eax
c010ade4:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010ade7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adea:	8b 40 04             	mov    0x4(%eax),%eax
c010aded:	39 45 08             	cmp    %eax,0x8(%ebp)
c010adf0:	75 05                	jne    c010adf7 <find_proc+0x56>
                return proc;
c010adf2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adf5:	eb 1c                	jmp    c010ae13 <find_proc+0x72>
c010adf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010adfa:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return listelm->next;
c010adfd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae00:	8b 40 04             	mov    0x4(%eax),%eax
        while ((le = list_next(le)) != list) {
c010ae03:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae09:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010ae0c:	75 ce                	jne    c010addc <find_proc+0x3b>
            }
        }
    }
    return NULL;
c010ae0e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ae13:	89 ec                	mov    %ebp,%esp
c010ae15:	5d                   	pop    %ebp
c010ae16:	c3                   	ret    

c010ae17 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010ae17:	55                   	push   %ebp
c010ae18:	89 e5                	mov    %esp,%ebp
c010ae1a:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010ae1d:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010ae24:	00 
c010ae25:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ae2c:	00 
c010ae2d:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010ae30:	89 04 24             	mov    %eax,(%esp)
c010ae33:	e8 fd 2d 00 00       	call   c010dc35 <memset>
    tf.tf_cs = KERNEL_CS;
c010ae38:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010ae3e:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010ae44:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010ae48:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010ae4c:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010ae50:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010ae54:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae57:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010ae5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae5d:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010ae60:	b8 73 a6 10 c0       	mov    $0xc010a673,%eax
c010ae65:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010ae68:	8b 45 10             	mov    0x10(%ebp),%eax
c010ae6b:	0d 00 01 00 00       	or     $0x100,%eax
c010ae70:	89 c2                	mov    %eax,%edx
c010ae72:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010ae75:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ae79:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ae80:	00 
c010ae81:	89 14 24             	mov    %edx,(%esp)
c010ae84:	e8 44 03 00 00       	call   c010b1cd <do_fork>
}
c010ae89:	89 ec                	mov    %ebp,%esp
c010ae8b:	5d                   	pop    %ebp
c010ae8c:	c3                   	ret    

c010ae8d <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010ae8d:	55                   	push   %ebp
c010ae8e:	89 e5                	mov    %esp,%ebp
c010ae90:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010ae93:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010ae9a:	e8 cd a3 ff ff       	call   c010526c <alloc_pages>
c010ae9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010aea2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aea6:	74 1a                	je     c010aec2 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010aea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aeab:	89 04 24             	mov    %eax,(%esp)
c010aeae:	e8 ba f8 ff ff       	call   c010a76d <page2kva>
c010aeb3:	89 c2                	mov    %eax,%edx
c010aeb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010aeb8:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010aebb:	b8 00 00 00 00       	mov    $0x0,%eax
c010aec0:	eb 05                	jmp    c010aec7 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010aec2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010aec7:	89 ec                	mov    %ebp,%esp
c010aec9:	5d                   	pop    %ebp
c010aeca:	c3                   	ret    

c010aecb <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010aecb:	55                   	push   %ebp
c010aecc:	89 e5                	mov    %esp,%ebp
c010aece:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010aed1:	8b 45 08             	mov    0x8(%ebp),%eax
c010aed4:	8b 40 0c             	mov    0xc(%eax),%eax
c010aed7:	89 04 24             	mov    %eax,(%esp)
c010aeda:	e8 e4 f8 ff ff       	call   c010a7c3 <kva2page>
c010aedf:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010aee6:	00 
c010aee7:	89 04 24             	mov    %eax,(%esp)
c010aeea:	e8 ea a3 ff ff       	call   c01052d9 <free_pages>
}
c010aeef:	90                   	nop
c010aef0:	89 ec                	mov    %ebp,%esp
c010aef2:	5d                   	pop    %ebp
c010aef3:	c3                   	ret    

c010aef4 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010aef4:	55                   	push   %ebp
c010aef5:	89 e5                	mov    %esp,%ebp
c010aef7:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010aefa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010af01:	e8 66 a3 ff ff       	call   c010526c <alloc_pages>
c010af06:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af09:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af0d:	75 0a                	jne    c010af19 <setup_pgdir+0x25>
        return -E_NO_MEM;
c010af0f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010af14:	e9 80 00 00 00       	jmp    c010af99 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010af19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af1c:	89 04 24             	mov    %eax,(%esp)
c010af1f:	e8 49 f8 ff ff       	call   c010a76d <page2kva>
c010af24:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010af27:	a1 00 9a 13 c0       	mov    0xc0139a00,%eax
c010af2c:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010af33:	00 
c010af34:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af3b:	89 04 24             	mov    %eax,(%esp)
c010af3e:	e8 d7 2d 00 00       	call   c010dd1a <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010af43:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af46:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010af49:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010af50:	77 23                	ja     c010af75 <setup_pgdir+0x81>
c010af52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af55:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010af59:	c7 44 24 08 1c 04 11 	movl   $0xc011041c,0x8(%esp)
c010af60:	c0 
c010af61:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c010af68:	00 
c010af69:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010af70:	e8 7b 5e ff ff       	call   c0100df0 <__panic>
c010af75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af78:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010af7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af81:	05 ac 0f 00 00       	add    $0xfac,%eax
c010af86:	83 ca 03             	or     $0x3,%edx
c010af89:	89 10                	mov    %edx,(%eax)
    mm->pgdir = pgdir;
c010af8b:	8b 45 08             	mov    0x8(%ebp),%eax
c010af8e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010af91:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010af94:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010af99:	89 ec                	mov    %ebp,%esp
c010af9b:	5d                   	pop    %ebp
c010af9c:	c3                   	ret    

c010af9d <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010af9d:	55                   	push   %ebp
c010af9e:	89 e5                	mov    %esp,%ebp
c010afa0:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010afa3:	8b 45 08             	mov    0x8(%ebp),%eax
c010afa6:	8b 40 0c             	mov    0xc(%eax),%eax
c010afa9:	89 04 24             	mov    %eax,(%esp)
c010afac:	e8 12 f8 ff ff       	call   c010a7c3 <kva2page>
c010afb1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010afb8:	00 
c010afb9:	89 04 24             	mov    %eax,(%esp)
c010afbc:	e8 18 a3 ff ff       	call   c01052d9 <free_pages>
}
c010afc1:	90                   	nop
c010afc2:	89 ec                	mov    %ebp,%esp
c010afc4:	5d                   	pop    %ebp
c010afc5:	c3                   	ret    

c010afc6 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010afc6:	55                   	push   %ebp
c010afc7:	89 e5                	mov    %esp,%ebp
c010afc9:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010afcc:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010afd1:	8b 40 18             	mov    0x18(%eax),%eax
c010afd4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010afd7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010afdb:	75 0a                	jne    c010afe7 <copy_mm+0x21>
        return 0;
c010afdd:	b8 00 00 00 00       	mov    $0x0,%eax
c010afe2:	e9 fc 00 00 00       	jmp    c010b0e3 <copy_mm+0x11d>
    }
    if (clone_flags & CLONE_VM) {
c010afe7:	8b 45 08             	mov    0x8(%ebp),%eax
c010afea:	25 00 01 00 00       	and    $0x100,%eax
c010afef:	85 c0                	test   %eax,%eax
c010aff1:	74 08                	je     c010affb <copy_mm+0x35>
        mm = oldmm;
c010aff3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aff6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010aff9:	eb 5e                	jmp    c010b059 <copy_mm+0x93>
    }

    int ret = -E_NO_MEM;
c010affb:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010b002:	e8 da d1 ff ff       	call   c01081e1 <mm_create>
c010b007:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b00a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b00e:	0f 84 cb 00 00 00    	je     c010b0df <copy_mm+0x119>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010b014:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b017:	89 04 24             	mov    %eax,(%esp)
c010b01a:	e8 d5 fe ff ff       	call   c010aef4 <setup_pgdir>
c010b01f:	85 c0                	test   %eax,%eax
c010b021:	0f 85 aa 00 00 00    	jne    c010b0d1 <copy_mm+0x10b>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c010b027:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b02a:	89 04 24             	mov    %eax,(%esp)
c010b02d:	e8 11 f8 ff ff       	call   c010a843 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010b032:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b035:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b039:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b03c:	89 04 24             	mov    %eax,(%esp)
c010b03f:	e8 d3 d6 ff ff       	call   c0108717 <dup_mmap>
c010b044:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010b047:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b04a:	89 04 24             	mov    %eax,(%esp)
c010b04d:	e8 27 f8 ff ff       	call   c010a879 <unlock_mm>

    if (ret != 0) {
c010b052:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b056:	75 60                	jne    c010b0b8 <copy_mm+0xf2>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
c010b058:	90                   	nop
    mm_count_inc(mm);
c010b059:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b05c:	89 04 24             	mov    %eax,(%esp)
c010b05f:	e8 ab f7 ff ff       	call   c010a80f <mm_count_inc>
    proc->mm = mm;
c010b064:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b067:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b06a:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010b06d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b070:	8b 40 0c             	mov    0xc(%eax),%eax
c010b073:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b076:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010b07d:	77 23                	ja     c010b0a2 <copy_mm+0xdc>
c010b07f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b082:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b086:	c7 44 24 08 1c 04 11 	movl   $0xc011041c,0x8(%esp)
c010b08d:	c0 
c010b08e:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c010b095:	00 
c010b096:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010b09d:	e8 4e 5d ff ff       	call   c0100df0 <__panic>
c010b0a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b0a5:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010b0ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0ae:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010b0b1:	b8 00 00 00 00       	mov    $0x0,%eax
c010b0b6:	eb 2b                	jmp    c010b0e3 <copy_mm+0x11d>
        goto bad_dup_cleanup_mmap;
c010b0b8:	90                   	nop
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010b0b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0bc:	89 04 24             	mov    %eax,(%esp)
c010b0bf:	e8 54 d7 ff ff       	call   c0108818 <exit_mmap>
    put_pgdir(mm);
c010b0c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0c7:	89 04 24             	mov    %eax,(%esp)
c010b0ca:	e8 ce fe ff ff       	call   c010af9d <put_pgdir>
c010b0cf:	eb 01                	jmp    c010b0d2 <copy_mm+0x10c>
        goto bad_pgdir_cleanup_mm;
c010b0d1:	90                   	nop
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b0d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0d5:	89 04 24             	mov    %eax,(%esp)
c010b0d8:	e8 79 d4 ff ff       	call   c0108556 <mm_destroy>
c010b0dd:	eb 01                	jmp    c010b0e0 <copy_mm+0x11a>
        goto bad_mm;
c010b0df:	90                   	nop
bad_mm:
    return ret;
c010b0e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010b0e3:	89 ec                	mov    %ebp,%esp
c010b0e5:	5d                   	pop    %ebp
c010b0e6:	c3                   	ret    

c010b0e7 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010b0e7:	55                   	push   %ebp
c010b0e8:	89 e5                	mov    %esp,%ebp
c010b0ea:	57                   	push   %edi
c010b0eb:	56                   	push   %esi
c010b0ec:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010b0ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0f0:	8b 40 0c             	mov    0xc(%eax),%eax
c010b0f3:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010b0f8:	89 c2                	mov    %eax,%edx
c010b0fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0fd:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010b100:	8b 45 08             	mov    0x8(%ebp),%eax
c010b103:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b106:	8b 55 10             	mov    0x10(%ebp),%edx
c010b109:	b9 4c 00 00 00       	mov    $0x4c,%ecx
c010b10e:	89 c3                	mov    %eax,%ebx
c010b110:	83 e3 01             	and    $0x1,%ebx
c010b113:	85 db                	test   %ebx,%ebx
c010b115:	74 0c                	je     c010b123 <copy_thread+0x3c>
c010b117:	0f b6 1a             	movzbl (%edx),%ebx
c010b11a:	88 18                	mov    %bl,(%eax)
c010b11c:	8d 40 01             	lea    0x1(%eax),%eax
c010b11f:	8d 52 01             	lea    0x1(%edx),%edx
c010b122:	49                   	dec    %ecx
c010b123:	89 c3                	mov    %eax,%ebx
c010b125:	83 e3 02             	and    $0x2,%ebx
c010b128:	85 db                	test   %ebx,%ebx
c010b12a:	74 0f                	je     c010b13b <copy_thread+0x54>
c010b12c:	0f b7 1a             	movzwl (%edx),%ebx
c010b12f:	66 89 18             	mov    %bx,(%eax)
c010b132:	8d 40 02             	lea    0x2(%eax),%eax
c010b135:	8d 52 02             	lea    0x2(%edx),%edx
c010b138:	83 e9 02             	sub    $0x2,%ecx
c010b13b:	89 cf                	mov    %ecx,%edi
c010b13d:	83 e7 fc             	and    $0xfffffffc,%edi
c010b140:	bb 00 00 00 00       	mov    $0x0,%ebx
c010b145:	8b 34 1a             	mov    (%edx,%ebx,1),%esi
c010b148:	89 34 18             	mov    %esi,(%eax,%ebx,1)
c010b14b:	83 c3 04             	add    $0x4,%ebx
c010b14e:	39 fb                	cmp    %edi,%ebx
c010b150:	72 f3                	jb     c010b145 <copy_thread+0x5e>
c010b152:	01 d8                	add    %ebx,%eax
c010b154:	01 da                	add    %ebx,%edx
c010b156:	bb 00 00 00 00       	mov    $0x0,%ebx
c010b15b:	89 ce                	mov    %ecx,%esi
c010b15d:	83 e6 02             	and    $0x2,%esi
c010b160:	85 f6                	test   %esi,%esi
c010b162:	74 0b                	je     c010b16f <copy_thread+0x88>
c010b164:	0f b7 34 1a          	movzwl (%edx,%ebx,1),%esi
c010b168:	66 89 34 18          	mov    %si,(%eax,%ebx,1)
c010b16c:	83 c3 02             	add    $0x2,%ebx
c010b16f:	83 e1 01             	and    $0x1,%ecx
c010b172:	85 c9                	test   %ecx,%ecx
c010b174:	74 07                	je     c010b17d <copy_thread+0x96>
c010b176:	0f b6 14 1a          	movzbl (%edx,%ebx,1),%edx
c010b17a:	88 14 18             	mov    %dl,(%eax,%ebx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010b17d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b180:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b183:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010b18a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b18d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b190:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b193:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010b196:	8b 45 08             	mov    0x8(%ebp),%eax
c010b199:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b19c:	8b 50 40             	mov    0x40(%eax),%edx
c010b19f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1a2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b1a5:	81 ca 00 02 00 00    	or     $0x200,%edx
c010b1ab:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010b1ae:	ba c6 ac 10 c0       	mov    $0xc010acc6,%edx
c010b1b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1b6:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010b1b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1bc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b1bf:	89 c2                	mov    %eax,%edx
c010b1c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1c4:	89 50 20             	mov    %edx,0x20(%eax)
}
c010b1c7:	90                   	nop
c010b1c8:	5b                   	pop    %ebx
c010b1c9:	5e                   	pop    %esi
c010b1ca:	5f                   	pop    %edi
c010b1cb:	5d                   	pop    %ebp
c010b1cc:	c3                   	ret    

c010b1cd <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010b1cd:	55                   	push   %ebp
c010b1ce:	89 e5                	mov    %esp,%ebp
c010b1d0:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010b1d3:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010b1da:	a1 00 f2 1c c0       	mov    0xc01cf200,%eax
c010b1df:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010b1e4:	0f 8f 1d 01 00 00    	jg     c010b307 <do_fork+0x13a>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010b1ea:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    if ((proc = alloc_proc()) == NULL) {
c010b1f1:	e8 ac f6 ff ff       	call   c010a8a2 <alloc_proc>
c010b1f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b1f9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b1fd:	75 11                	jne    c010b210 <do_fork+0x43>
        cprintf("alloc_proc() failed!");
c010b1ff:	c7 04 24 54 04 11 c0 	movl   $0xc0110454,(%esp)
c010b206:	e8 67 51 ff ff       	call   c0100372 <cprintf>
        goto fork_out;
c010b20b:	e9 f8 00 00 00       	jmp    c010b308 <do_fork+0x13b>
    }

    proc->parent = current;
c010b210:	8b 15 f0 d1 1c c0    	mov    0xc01cd1f0,%edx
c010b216:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b219:	89 50 14             	mov    %edx,0x14(%eax)
    assert(current->wait_state == 0);
c010b21c:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010b221:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b227:	85 c0                	test   %eax,%eax
c010b229:	74 24                	je     c010b24f <do_fork+0x82>
c010b22b:	c7 44 24 0c 69 04 11 	movl   $0xc0110469,0xc(%esp)
c010b232:	c0 
c010b233:	c7 44 24 08 82 04 11 	movl   $0xc0110482,0x8(%esp)
c010b23a:	c0 
c010b23b:	c7 44 24 04 ae 01 00 	movl   $0x1ae,0x4(%esp)
c010b242:	00 
c010b243:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010b24a:	e8 a1 5b ff ff       	call   c0100df0 <__panic>

    if ((ret = setup_kstack(proc)) != 0) {  //call the alloc_pages to alloc kstack space
c010b24f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b252:	89 04 24             	mov    %eax,(%esp)
c010b255:	e8 33 fc ff ff       	call   c010ae8d <setup_kstack>
c010b25a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b25d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b261:	74 11                	je     c010b274 <do_fork+0xa7>
        cprintf("set_kstack() failed!");
c010b263:	c7 04 24 97 04 11 c0 	movl   $0xc0110497,(%esp)
c010b26a:	e8 03 51 ff ff       	call   c0100372 <cprintf>
        goto bad_fork_cleanup_proc;
c010b26f:	e9 99 00 00 00       	jmp    c010b30d <do_fork+0x140>
    }

    if (copy_mm(clone_flags, proc) != 0) {
c010b274:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b277:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b27b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b27e:	89 04 24             	mov    %eax,(%esp)
c010b281:	e8 40 fd ff ff       	call   c010afc6 <copy_mm>
c010b286:	85 c0                	test   %eax,%eax
c010b288:	74 1a                	je     c010b2a4 <do_fork+0xd7>
        cprintf("copy_mm() failed!");
c010b28a:	c7 04 24 ac 04 11 c0 	movl   $0xc01104ac,(%esp)
c010b291:	e8 dc 50 ff ff       	call   c0100372 <cprintf>
        goto bad_fork_cleanup_kstack;
c010b296:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010b297:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b29a:	89 04 24             	mov    %eax,(%esp)
c010b29d:	e8 29 fc ff ff       	call   c010aecb <put_kstack>
c010b2a2:	eb 69                	jmp    c010b30d <do_fork+0x140>
    copy_thread(proc, stack, tf);
c010b2a4:	8b 45 10             	mov    0x10(%ebp),%eax
c010b2a7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b2ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b2ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b2b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2b5:	89 04 24             	mov    %eax,(%esp)
c010b2b8:	e8 2a fe ff ff       	call   c010b0e7 <copy_thread>
    local_intr_save(intr_flag);
c010b2bd:	e8 f6 f3 ff ff       	call   c010a6b8 <__intr_save>
c010b2c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        proc->pid = get_pid();
c010b2c5:	e8 8c f8 ff ff       	call   c010ab56 <get_pid>
c010b2ca:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b2cd:	89 42 04             	mov    %eax,0x4(%edx)
        hash_proc(proc);
c010b2d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2d3:	89 04 24             	mov    %eax,(%esp)
c010b2d6:	e8 06 fa ff ff       	call   c010ace1 <hash_proc>
        set_links(proc);
c010b2db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2de:	89 04 24             	mov    %eax,(%esp)
c010b2e1:	e8 0e f7 ff ff       	call   c010a9f4 <set_links>
    local_intr_restore(intr_flag);
c010b2e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2e9:	89 04 24             	mov    %eax,(%esp)
c010b2ec:	e8 f3 f3 ff ff       	call   c010a6e4 <__intr_restore>
    wakeup_proc(proc);
c010b2f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2f4:	89 04 24             	mov    %eax,(%esp)
c010b2f7:	e8 c4 17 00 00       	call   c010cac0 <wakeup_proc>
    ret = proc->pid;
c010b2fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2ff:	8b 40 04             	mov    0x4(%eax),%eax
c010b302:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b305:	eb 01                	jmp    c010b308 <do_fork+0x13b>
        goto fork_out;
c010b307:	90                   	nop
    return ret;
c010b308:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b30b:	eb 0d                	jmp    c010b31a <do_fork+0x14d>
bad_fork_cleanup_proc:
    kfree(proc);
c010b30d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b310:	89 04 24             	mov    %eax,(%esp)
c010b313:	e8 e0 9a ff ff       	call   c0104df8 <kfree>
    goto fork_out;
c010b318:	eb ee                	jmp    c010b308 <do_fork+0x13b>
}
c010b31a:	89 ec                	mov    %ebp,%esp
c010b31c:	5d                   	pop    %ebp
c010b31d:	c3                   	ret    

c010b31e <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010b31e:	55                   	push   %ebp
c010b31f:	89 e5                	mov    %esp,%ebp
c010b321:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010b324:	8b 15 f0 d1 1c c0    	mov    0xc01cd1f0,%edx
c010b32a:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010b32f:	39 c2                	cmp    %eax,%edx
c010b331:	75 1c                	jne    c010b34f <do_exit+0x31>
        panic("idleproc exit.\n");
c010b333:	c7 44 24 08 be 04 11 	movl   $0xc01104be,0x8(%esp)
c010b33a:	c0 
c010b33b:	c7 44 24 04 d9 01 00 	movl   $0x1d9,0x4(%esp)
c010b342:	00 
c010b343:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010b34a:	e8 a1 5a ff ff       	call   c0100df0 <__panic>
    }
    if (current == initproc) {
c010b34f:	8b 15 f0 d1 1c c0    	mov    0xc01cd1f0,%edx
c010b355:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010b35a:	39 c2                	cmp    %eax,%edx
c010b35c:	75 1c                	jne    c010b37a <do_exit+0x5c>
        panic("initproc exit.\n");
c010b35e:	c7 44 24 08 ce 04 11 	movl   $0xc01104ce,0x8(%esp)
c010b365:	c0 
c010b366:	c7 44 24 04 dc 01 00 	movl   $0x1dc,0x4(%esp)
c010b36d:	00 
c010b36e:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010b375:	e8 76 5a ff ff       	call   c0100df0 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010b37a:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010b37f:	8b 40 18             	mov    0x18(%eax),%eax
c010b382:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010b385:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b389:	74 4b                	je     c010b3d6 <do_exit+0xb8>
        lcr3(boot_cr3);
c010b38b:	a1 a8 cf 1c c0       	mov    0xc01ccfa8,%eax
c010b390:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010b393:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b396:	0f 22 d8             	mov    %eax,%cr3
}
c010b399:	90                   	nop
        if (mm_count_dec(mm) == 0) {
c010b39a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b39d:	89 04 24             	mov    %eax,(%esp)
c010b3a0:	e8 84 f4 ff ff       	call   c010a829 <mm_count_dec>
c010b3a5:	85 c0                	test   %eax,%eax
c010b3a7:	75 21                	jne    c010b3ca <do_exit+0xac>
            exit_mmap(mm);
c010b3a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3ac:	89 04 24             	mov    %eax,(%esp)
c010b3af:	e8 64 d4 ff ff       	call   c0108818 <exit_mmap>
            put_pgdir(mm);
c010b3b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3b7:	89 04 24             	mov    %eax,(%esp)
c010b3ba:	e8 de fb ff ff       	call   c010af9d <put_pgdir>
            mm_destroy(mm);
c010b3bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3c2:	89 04 24             	mov    %eax,(%esp)
c010b3c5:	e8 8c d1 ff ff       	call   c0108556 <mm_destroy>
        }
        current->mm = NULL;
c010b3ca:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010b3cf:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010b3d6:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010b3db:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010b3e1:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010b3e6:	8b 55 08             	mov    0x8(%ebp),%edx
c010b3e9:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010b3ef:	e8 c4 f2 ff ff       	call   c010a6b8 <__intr_save>
c010b3f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010b3f7:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010b3fc:	8b 40 14             	mov    0x14(%eax),%eax
c010b3ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010b402:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b405:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b40b:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b410:	0f 85 b7 00 00 00    	jne    c010b4cd <do_exit+0x1af>
            wakeup_proc(proc);
c010b416:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b419:	89 04 24             	mov    %eax,(%esp)
c010b41c:	e8 9f 16 00 00       	call   c010cac0 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010b421:	e9 a7 00 00 00       	jmp    c010b4cd <do_exit+0x1af>
            proc = current->cptr;
c010b426:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010b42b:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b431:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010b434:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010b439:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b43c:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010b442:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010b448:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b44b:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010b452:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010b455:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010b45a:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010b460:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b463:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b469:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b46c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b472:	85 c0                	test   %eax,%eax
c010b474:	74 14                	je     c010b48a <do_exit+0x16c>
                initproc->cptr->yptr = proc;
c010b476:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010b47b:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b481:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b484:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010b48a:	8b 15 ec d1 1c c0    	mov    0xc01cd1ec,%edx
c010b490:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b493:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010b496:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010b49b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b49e:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010b4a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4a7:	8b 00                	mov    (%eax),%eax
c010b4a9:	83 f8 03             	cmp    $0x3,%eax
c010b4ac:	75 1f                	jne    c010b4cd <do_exit+0x1af>
                if (initproc->wait_state == WT_CHILD) {
c010b4ae:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010b4b3:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b4b9:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b4be:	75 0d                	jne    c010b4cd <do_exit+0x1af>
                    wakeup_proc(initproc);
c010b4c0:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010b4c5:	89 04 24             	mov    %eax,(%esp)
c010b4c8:	e8 f3 15 00 00       	call   c010cac0 <wakeup_proc>
        while (current->cptr != NULL) {
c010b4cd:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010b4d2:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b4d8:	85 c0                	test   %eax,%eax
c010b4da:	0f 85 46 ff ff ff    	jne    c010b426 <do_exit+0x108>
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010b4e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b4e3:	89 04 24             	mov    %eax,(%esp)
c010b4e6:	e8 f9 f1 ff ff       	call   c010a6e4 <__intr_restore>
    
    schedule();
c010b4eb:	e8 6f 16 00 00       	call   c010cb5f <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010b4f0:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010b4f5:	8b 40 04             	mov    0x4(%eax),%eax
c010b4f8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b4fc:	c7 44 24 08 e0 04 11 	movl   $0xc01104e0,0x8(%esp)
c010b503:	c0 
c010b504:	c7 44 24 04 08 02 00 	movl   $0x208,0x4(%esp)
c010b50b:	00 
c010b50c:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010b513:	e8 d8 58 ff ff       	call   c0100df0 <__panic>

c010b518 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010b518:	55                   	push   %ebp
c010b519:	89 e5                	mov    %esp,%ebp
c010b51b:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010b51e:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010b523:	8b 40 18             	mov    0x18(%eax),%eax
c010b526:	85 c0                	test   %eax,%eax
c010b528:	74 1c                	je     c010b546 <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010b52a:	c7 44 24 08 00 05 11 	movl   $0xc0110500,0x8(%esp)
c010b531:	c0 
c010b532:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c010b539:	00 
c010b53a:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010b541:	e8 aa 58 ff ff       	call   c0100df0 <__panic>
    }

    int ret = -E_NO_MEM;
c010b546:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010b54d:	e8 8f cc ff ff       	call   c01081e1 <mm_create>
c010b552:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b555:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010b559:	0f 84 1c 06 00 00    	je     c010bb7b <load_icode+0x663>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010b55f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b562:	89 04 24             	mov    %eax,(%esp)
c010b565:	e8 8a f9 ff ff       	call   c010aef4 <setup_pgdir>
c010b56a:	85 c0                	test   %eax,%eax
c010b56c:	0f 85 fb 05 00 00    	jne    c010bb6d <load_icode+0x655>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010b572:	8b 45 08             	mov    0x8(%ebp),%eax
c010b575:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010b578:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b57b:	8b 50 1c             	mov    0x1c(%eax),%edx
c010b57e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b581:	01 d0                	add    %edx,%eax
c010b583:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010b586:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b589:	8b 00                	mov    (%eax),%eax
c010b58b:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010b590:	74 0c                	je     c010b59e <load_icode+0x86>
        ret = -E_INVAL_ELF;
c010b592:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010b599:	e9 c2 05 00 00       	jmp    c010bb60 <load_icode+0x648>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010b59e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b5a1:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010b5a5:	c1 e0 05             	shl    $0x5,%eax
c010b5a8:	89 c2                	mov    %eax,%edx
c010b5aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5ad:	01 d0                	add    %edx,%eax
c010b5af:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010b5b2:	e9 01 03 00 00       	jmp    c010b8b8 <load_icode+0x3a0>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010b5b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5ba:	8b 00                	mov    (%eax),%eax
c010b5bc:	83 f8 01             	cmp    $0x1,%eax
c010b5bf:	0f 85 e8 02 00 00    	jne    c010b8ad <load_icode+0x395>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c010b5c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5c8:	8b 50 10             	mov    0x10(%eax),%edx
c010b5cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5ce:	8b 40 14             	mov    0x14(%eax),%eax
c010b5d1:	39 c2                	cmp    %eax,%edx
c010b5d3:	76 0c                	jbe    c010b5e1 <load_icode+0xc9>
            ret = -E_INVAL_ELF;
c010b5d5:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010b5dc:	e9 74 05 00 00       	jmp    c010bb55 <load_icode+0x63d>
        }
        if (ph->p_filesz == 0) {
c010b5e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5e4:	8b 40 10             	mov    0x10(%eax),%eax
c010b5e7:	85 c0                	test   %eax,%eax
c010b5e9:	0f 84 c1 02 00 00    	je     c010b8b0 <load_icode+0x398>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010b5ef:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010b5f6:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010b5fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b600:	8b 40 18             	mov    0x18(%eax),%eax
c010b603:	83 e0 01             	and    $0x1,%eax
c010b606:	85 c0                	test   %eax,%eax
c010b608:	74 04                	je     c010b60e <load_icode+0xf6>
c010b60a:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010b60e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b611:	8b 40 18             	mov    0x18(%eax),%eax
c010b614:	83 e0 02             	and    $0x2,%eax
c010b617:	85 c0                	test   %eax,%eax
c010b619:	74 04                	je     c010b61f <load_icode+0x107>
c010b61b:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010b61f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b622:	8b 40 18             	mov    0x18(%eax),%eax
c010b625:	83 e0 04             	and    $0x4,%eax
c010b628:	85 c0                	test   %eax,%eax
c010b62a:	74 04                	je     c010b630 <load_icode+0x118>
c010b62c:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010b630:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b633:	83 e0 02             	and    $0x2,%eax
c010b636:	85 c0                	test   %eax,%eax
c010b638:	74 04                	je     c010b63e <load_icode+0x126>
c010b63a:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010b63e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b641:	8b 50 14             	mov    0x14(%eax),%edx
c010b644:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b647:	8b 40 08             	mov    0x8(%eax),%eax
c010b64a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b651:	00 
c010b652:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010b655:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010b659:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b65d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b661:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b664:	89 04 24             	mov    %eax,(%esp)
c010b667:	e8 91 cf ff ff       	call   c01085fd <mm_map>
c010b66c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b66f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b673:	0f 85 d2 04 00 00    	jne    c010bb4b <load_icode+0x633>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c010b679:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b67c:	8b 50 04             	mov    0x4(%eax),%edx
c010b67f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b682:	01 d0                	add    %edx,%eax
c010b684:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010b687:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b68a:	8b 40 08             	mov    0x8(%eax),%eax
c010b68d:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b690:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b693:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010b696:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010b699:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010b69e:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010b6a1:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010b6a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6ab:	8b 50 08             	mov    0x8(%eax),%edx
c010b6ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6b1:	8b 40 10             	mov    0x10(%eax),%eax
c010b6b4:	01 d0                	add    %edx,%eax
c010b6b6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b6b9:	e9 87 00 00 00       	jmp    c010b745 <load_icode+0x22d>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b6be:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b6c1:	8b 40 0c             	mov    0xc(%eax),%eax
c010b6c4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b6c7:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b6cb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b6ce:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b6d2:	89 04 24             	mov    %eax,(%esp)
c010b6d5:	e8 97 aa ff ff       	call   c0106171 <pgdir_alloc_page>
c010b6da:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b6dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b6e1:	0f 84 67 04 00 00    	je     c010bb4e <load_icode+0x636>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b6e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b6ea:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010b6ed:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010b6f0:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b6f5:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010b6f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b6fb:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b702:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b705:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b708:	73 09                	jae    c010b713 <load_icode+0x1fb>
                size -= la - end;
c010b70a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b70d:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010b710:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010b713:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b716:	89 04 24             	mov    %eax,(%esp)
c010b719:	e8 4f f0 ff ff       	call   c010a76d <page2kva>
c010b71e:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010b721:	01 c2                	add    %eax,%edx
c010b723:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b726:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b72a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b72d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b731:	89 14 24             	mov    %edx,(%esp)
c010b734:	e8 e1 25 00 00       	call   c010dd1a <memcpy>
            start += size, from += size;
c010b739:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b73c:	01 45 d8             	add    %eax,-0x28(%ebp)
c010b73f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b742:	01 45 e0             	add    %eax,-0x20(%ebp)
        while (start < end) {
c010b745:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b748:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010b74b:	0f 82 6d ff ff ff    	jb     c010b6be <load_icode+0x1a6>
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010b751:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b754:	8b 50 08             	mov    0x8(%eax),%edx
c010b757:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b75a:	8b 40 14             	mov    0x14(%eax),%eax
c010b75d:	01 d0                	add    %edx,%eax
c010b75f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        if (start < la) {
c010b762:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b765:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b768:	0f 83 31 01 00 00    	jae    c010b89f <load_icode+0x387>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010b76e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b771:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010b774:	0f 84 39 01 00 00    	je     c010b8b3 <load_icode+0x39b>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010b77a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b77d:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010b780:	05 00 10 00 00       	add    $0x1000,%eax
c010b785:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010b788:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b78d:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010b790:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010b793:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b796:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b799:	73 09                	jae    c010b7a4 <load_icode+0x28c>
                size -= la - end;
c010b79b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b79e:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010b7a1:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b7a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7a7:	89 04 24             	mov    %eax,(%esp)
c010b7aa:	e8 be ef ff ff       	call   c010a76d <page2kva>
c010b7af:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010b7b2:	01 c2                	add    %eax,%edx
c010b7b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b7b7:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b7bb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b7c2:	00 
c010b7c3:	89 14 24             	mov    %edx,(%esp)
c010b7c6:	e8 6a 24 00 00       	call   c010dc35 <memset>
            start += size;
c010b7cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b7ce:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010b7d1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b7d4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b7d7:	73 0c                	jae    c010b7e5 <load_icode+0x2cd>
c010b7d9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b7dc:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010b7df:	0f 84 ba 00 00 00    	je     c010b89f <load_icode+0x387>
c010b7e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b7e8:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b7eb:	72 0c                	jb     c010b7f9 <load_icode+0x2e1>
c010b7ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b7f0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b7f3:	0f 84 a6 00 00 00    	je     c010b89f <load_icode+0x387>
c010b7f9:	c7 44 24 0c 28 05 11 	movl   $0xc0110528,0xc(%esp)
c010b800:	c0 
c010b801:	c7 44 24 08 82 04 11 	movl   $0xc0110482,0x8(%esp)
c010b808:	c0 
c010b809:	c7 44 24 04 64 02 00 	movl   $0x264,0x4(%esp)
c010b810:	00 
c010b811:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010b818:	e8 d3 55 ff ff       	call   c0100df0 <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b81d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b820:	8b 40 0c             	mov    0xc(%eax),%eax
c010b823:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b826:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b82a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b82d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b831:	89 04 24             	mov    %eax,(%esp)
c010b834:	e8 38 a9 ff ff       	call   c0106171 <pgdir_alloc_page>
c010b839:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b83c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b840:	0f 84 0b 03 00 00    	je     c010bb51 <load_icode+0x639>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b846:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b849:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010b84c:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010b84f:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b854:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010b857:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b85a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b861:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b864:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b867:	73 09                	jae    c010b872 <load_icode+0x35a>
                size -= la - end;
c010b869:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b86c:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010b86f:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b872:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b875:	89 04 24             	mov    %eax,(%esp)
c010b878:	e8 f0 ee ff ff       	call   c010a76d <page2kva>
c010b87d:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010b880:	01 c2                	add    %eax,%edx
c010b882:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b885:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b889:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b890:	00 
c010b891:	89 14 24             	mov    %edx,(%esp)
c010b894:	e8 9c 23 00 00       	call   c010dc35 <memset>
            start += size;
c010b899:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b89c:	01 45 d8             	add    %eax,-0x28(%ebp)
        while (start < end) {
c010b89f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b8a2:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010b8a5:	0f 82 72 ff ff ff    	jb     c010b81d <load_icode+0x305>
c010b8ab:	eb 07                	jmp    c010b8b4 <load_icode+0x39c>
            continue ;
c010b8ad:	90                   	nop
c010b8ae:	eb 04                	jmp    c010b8b4 <load_icode+0x39c>
            continue ;
c010b8b0:	90                   	nop
c010b8b1:	eb 01                	jmp    c010b8b4 <load_icode+0x39c>
                continue ;
c010b8b3:	90                   	nop
    for (; ph < ph_end; ph ++) {
c010b8b4:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010b8b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8bb:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010b8be:	0f 82 f3 fc ff ff    	jb     c010b5b7 <load_icode+0x9f>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010b8c4:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010b8cb:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b8d2:	00 
c010b8d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b8d6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b8da:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010b8e1:	00 
c010b8e2:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010b8e9:	af 
c010b8ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b8ed:	89 04 24             	mov    %eax,(%esp)
c010b8f0:	e8 08 cd ff ff       	call   c01085fd <mm_map>
c010b8f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b8f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b8fc:	0f 85 52 02 00 00    	jne    c010bb54 <load_icode+0x63c>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010b902:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b905:	8b 40 0c             	mov    0xc(%eax),%eax
c010b908:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b90f:	00 
c010b910:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010b917:	af 
c010b918:	89 04 24             	mov    %eax,(%esp)
c010b91b:	e8 51 a8 ff ff       	call   c0106171 <pgdir_alloc_page>
c010b920:	85 c0                	test   %eax,%eax
c010b922:	75 24                	jne    c010b948 <load_icode+0x430>
c010b924:	c7 44 24 0c 64 05 11 	movl   $0xc0110564,0xc(%esp)
c010b92b:	c0 
c010b92c:	c7 44 24 08 82 04 11 	movl   $0xc0110482,0x8(%esp)
c010b933:	c0 
c010b934:	c7 44 24 04 77 02 00 	movl   $0x277,0x4(%esp)
c010b93b:	00 
c010b93c:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010b943:	e8 a8 54 ff ff       	call   c0100df0 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010b948:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b94b:	8b 40 0c             	mov    0xc(%eax),%eax
c010b94e:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b955:	00 
c010b956:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010b95d:	af 
c010b95e:	89 04 24             	mov    %eax,(%esp)
c010b961:	e8 0b a8 ff ff       	call   c0106171 <pgdir_alloc_page>
c010b966:	85 c0                	test   %eax,%eax
c010b968:	75 24                	jne    c010b98e <load_icode+0x476>
c010b96a:	c7 44 24 0c a8 05 11 	movl   $0xc01105a8,0xc(%esp)
c010b971:	c0 
c010b972:	c7 44 24 08 82 04 11 	movl   $0xc0110482,0x8(%esp)
c010b979:	c0 
c010b97a:	c7 44 24 04 78 02 00 	movl   $0x278,0x4(%esp)
c010b981:	00 
c010b982:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010b989:	e8 62 54 ff ff       	call   c0100df0 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010b98e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b991:	8b 40 0c             	mov    0xc(%eax),%eax
c010b994:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b99b:	00 
c010b99c:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010b9a3:	af 
c010b9a4:	89 04 24             	mov    %eax,(%esp)
c010b9a7:	e8 c5 a7 ff ff       	call   c0106171 <pgdir_alloc_page>
c010b9ac:	85 c0                	test   %eax,%eax
c010b9ae:	75 24                	jne    c010b9d4 <load_icode+0x4bc>
c010b9b0:	c7 44 24 0c ec 05 11 	movl   $0xc01105ec,0xc(%esp)
c010b9b7:	c0 
c010b9b8:	c7 44 24 08 82 04 11 	movl   $0xc0110482,0x8(%esp)
c010b9bf:	c0 
c010b9c0:	c7 44 24 04 79 02 00 	movl   $0x279,0x4(%esp)
c010b9c7:	00 
c010b9c8:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010b9cf:	e8 1c 54 ff ff       	call   c0100df0 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010b9d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b9d7:	8b 40 0c             	mov    0xc(%eax),%eax
c010b9da:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b9e1:	00 
c010b9e2:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010b9e9:	af 
c010b9ea:	89 04 24             	mov    %eax,(%esp)
c010b9ed:	e8 7f a7 ff ff       	call   c0106171 <pgdir_alloc_page>
c010b9f2:	85 c0                	test   %eax,%eax
c010b9f4:	75 24                	jne    c010ba1a <load_icode+0x502>
c010b9f6:	c7 44 24 0c 30 06 11 	movl   $0xc0110630,0xc(%esp)
c010b9fd:	c0 
c010b9fe:	c7 44 24 08 82 04 11 	movl   $0xc0110482,0x8(%esp)
c010ba05:	c0 
c010ba06:	c7 44 24 04 7a 02 00 	movl   $0x27a,0x4(%esp)
c010ba0d:	00 
c010ba0e:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010ba15:	e8 d6 53 ff ff       	call   c0100df0 <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010ba1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ba1d:	89 04 24             	mov    %eax,(%esp)
c010ba20:	e8 ea ed ff ff       	call   c010a80f <mm_count_inc>
    current->mm = mm;
c010ba25:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010ba2a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010ba2d:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010ba30:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ba33:	8b 40 0c             	mov    0xc(%eax),%eax
c010ba36:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010ba39:	81 7d c4 ff ff ff bf 	cmpl   $0xbfffffff,-0x3c(%ebp)
c010ba40:	77 23                	ja     c010ba65 <load_icode+0x54d>
c010ba42:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ba45:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ba49:	c7 44 24 08 1c 04 11 	movl   $0xc011041c,0x8(%esp)
c010ba50:	c0 
c010ba51:	c7 44 24 04 7f 02 00 	movl   $0x27f,0x4(%esp)
c010ba58:	00 
c010ba59:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010ba60:	e8 8b 53 ff ff       	call   c0100df0 <__panic>
c010ba65:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010ba68:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010ba6e:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010ba73:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010ba76:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ba79:	8b 40 0c             	mov    0xc(%eax),%eax
c010ba7c:	89 45 c0             	mov    %eax,-0x40(%ebp)
c010ba7f:	81 7d c0 ff ff ff bf 	cmpl   $0xbfffffff,-0x40(%ebp)
c010ba86:	77 23                	ja     c010baab <load_icode+0x593>
c010ba88:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ba8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ba8f:	c7 44 24 08 1c 04 11 	movl   $0xc011041c,0x8(%esp)
c010ba96:	c0 
c010ba97:	c7 44 24 04 80 02 00 	movl   $0x280,0x4(%esp)
c010ba9e:	00 
c010ba9f:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010baa6:	e8 45 53 ff ff       	call   c0100df0 <__panic>
c010baab:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010baae:	05 00 00 00 40       	add    $0x40000000,%eax
c010bab3:	89 45 ac             	mov    %eax,-0x54(%ebp)
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010bab6:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010bab9:	0f 22 d8             	mov    %eax,%cr3
}
c010babc:	90                   	nop

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010babd:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010bac2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bac5:	89 45 bc             	mov    %eax,-0x44(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010bac8:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010bacf:	00 
c010bad0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bad7:	00 
c010bad8:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010badb:	89 04 24             	mov    %eax,(%esp)
c010bade:	e8 52 21 00 00       	call   c010dc35 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010bae3:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010bae6:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = tf->tf_fs = USER_DS;
c010baec:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010baef:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
c010baf5:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010baf8:	0f b7 50 24          	movzwl 0x24(%eax),%edx
c010bafc:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010baff:	66 89 50 48          	mov    %dx,0x48(%eax)
c010bb03:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010bb06:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010bb0a:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010bb0d:	66 89 50 28          	mov    %dx,0x28(%eax)
c010bb11:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010bb14:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010bb18:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010bb1b:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010bb1f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010bb22:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010bb29:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010bb2c:	8b 50 18             	mov    0x18(%eax),%edx
c010bb2f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010bb32:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010bb35:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010bb38:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010bb3f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010bb46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb49:	eb 33                	jmp    c010bb7e <load_icode+0x666>
            goto bad_cleanup_mmap;
c010bb4b:	90                   	nop
c010bb4c:	eb 07                	jmp    c010bb55 <load_icode+0x63d>
                goto bad_cleanup_mmap;
c010bb4e:	90                   	nop
c010bb4f:	eb 04                	jmp    c010bb55 <load_icode+0x63d>
                goto bad_cleanup_mmap;
c010bb51:	90                   	nop
c010bb52:	eb 01                	jmp    c010bb55 <load_icode+0x63d>
        goto bad_cleanup_mmap;
c010bb54:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
c010bb55:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bb58:	89 04 24             	mov    %eax,(%esp)
c010bb5b:	e8 b8 cc ff ff       	call   c0108818 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010bb60:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bb63:	89 04 24             	mov    %eax,(%esp)
c010bb66:	e8 32 f4 ff ff       	call   c010af9d <put_pgdir>
c010bb6b:	eb 01                	jmp    c010bb6e <load_icode+0x656>
        goto bad_pgdir_cleanup_mm;
c010bb6d:	90                   	nop
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010bb6e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bb71:	89 04 24             	mov    %eax,(%esp)
c010bb74:	e8 dd c9 ff ff       	call   c0108556 <mm_destroy>
bad_mm:
    goto out;
c010bb79:	eb cb                	jmp    c010bb46 <load_icode+0x62e>
        goto bad_mm;
c010bb7b:	90                   	nop
    goto out;
c010bb7c:	eb c8                	jmp    c010bb46 <load_icode+0x62e>
}
c010bb7e:	89 ec                	mov    %ebp,%esp
c010bb80:	5d                   	pop    %ebp
c010bb81:	c3                   	ret    

c010bb82 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010bb82:	55                   	push   %ebp
c010bb83:	89 e5                	mov    %esp,%ebp
c010bb85:	83 ec 58             	sub    $0x58,%esp
    struct mm_struct *mm = current->mm;
c010bb88:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010bb8d:	8b 40 18             	mov    0x18(%eax),%eax
c010bb90:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010bb93:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb96:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010bb9d:	00 
c010bb9e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bba1:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bba5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bba9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbac:	89 04 24             	mov    %eax,(%esp)
c010bbaf:	e8 bb d7 ff ff       	call   c010936f <user_mem_check>
c010bbb4:	85 c0                	test   %eax,%eax
c010bbb6:	75 0a                	jne    c010bbc2 <do_execve+0x40>
        return -E_INVAL;
c010bbb8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bbbd:	e9 f7 00 00 00       	jmp    c010bcb9 <do_execve+0x137>
    }
    if (len > PROC_NAME_LEN) {
c010bbc2:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
c010bbc6:	76 07                	jbe    c010bbcf <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010bbc8:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010bbcf:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010bbd6:	00 
c010bbd7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bbde:	00 
c010bbdf:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010bbe2:	89 04 24             	mov    %eax,(%esp)
c010bbe5:	e8 4b 20 00 00       	call   c010dc35 <memset>
    memcpy(local_name, name, len);
c010bbea:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bbed:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bbf1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbf4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbf8:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010bbfb:	89 04 24             	mov    %eax,(%esp)
c010bbfe:	e8 17 21 00 00       	call   c010dd1a <memcpy>

    if (mm != NULL) {
c010bc03:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc07:	74 4b                	je     c010bc54 <do_execve+0xd2>
        lcr3(boot_cr3);
c010bc09:	a1 a8 cf 1c c0       	mov    0xc01ccfa8,%eax
c010bc0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010bc11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc14:	0f 22 d8             	mov    %eax,%cr3
}
c010bc17:	90                   	nop
        if (mm_count_dec(mm) == 0) {
c010bc18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc1b:	89 04 24             	mov    %eax,(%esp)
c010bc1e:	e8 06 ec ff ff       	call   c010a829 <mm_count_dec>
c010bc23:	85 c0                	test   %eax,%eax
c010bc25:	75 21                	jne    c010bc48 <do_execve+0xc6>
            exit_mmap(mm);
c010bc27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc2a:	89 04 24             	mov    %eax,(%esp)
c010bc2d:	e8 e6 cb ff ff       	call   c0108818 <exit_mmap>
            put_pgdir(mm);
c010bc32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc35:	89 04 24             	mov    %eax,(%esp)
c010bc38:	e8 60 f3 ff ff       	call   c010af9d <put_pgdir>
            mm_destroy(mm);
c010bc3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc40:	89 04 24             	mov    %eax,(%esp)
c010bc43:	e8 0e c9 ff ff       	call   c0108556 <mm_destroy>
        }
        current->mm = NULL;
c010bc48:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010bc4d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010bc54:	8b 45 14             	mov    0x14(%ebp),%eax
c010bc57:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc5b:	8b 45 10             	mov    0x10(%ebp),%eax
c010bc5e:	89 04 24             	mov    %eax,(%esp)
c010bc61:	e8 b2 f8 ff ff       	call   c010b518 <load_icode>
c010bc66:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bc69:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bc6d:	75 1b                	jne    c010bc8a <do_execve+0x108>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010bc6f:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010bc74:	8d 55 b9             	lea    -0x47(%ebp),%edx
c010bc77:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bc7b:	89 04 24             	mov    %eax,(%esp)
c010bc7e:	e8 e8 ec ff ff       	call   c010a96b <set_proc_name>
    return 0;
c010bc83:	b8 00 00 00 00       	mov    $0x0,%eax
c010bc88:	eb 2f                	jmp    c010bcb9 <do_execve+0x137>
        goto execve_exit;
c010bc8a:	90                   	nop

execve_exit:
    do_exit(ret);
c010bc8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc8e:	89 04 24             	mov    %eax,(%esp)
c010bc91:	e8 88 f6 ff ff       	call   c010b31e <do_exit>
    panic("already exit: %e.\n", ret);
c010bc96:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc99:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bc9d:	c7 44 24 08 73 06 11 	movl   $0xc0110673,0x8(%esp)
c010bca4:	c0 
c010bca5:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c010bcac:	00 
c010bcad:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010bcb4:	e8 37 51 ff ff       	call   c0100df0 <__panic>
}
c010bcb9:	89 ec                	mov    %ebp,%esp
c010bcbb:	5d                   	pop    %ebp
c010bcbc:	c3                   	ret    

c010bcbd <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010bcbd:	55                   	push   %ebp
c010bcbe:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010bcc0:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010bcc5:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010bccc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bcd1:	5d                   	pop    %ebp
c010bcd2:	c3                   	ret    

c010bcd3 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010bcd3:	55                   	push   %ebp
c010bcd4:	89 e5                	mov    %esp,%ebp
c010bcd6:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010bcd9:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010bcde:	8b 40 18             	mov    0x18(%eax),%eax
c010bce1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010bce4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bce8:	74 30                	je     c010bd1a <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010bcea:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bced:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010bcf4:	00 
c010bcf5:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010bcfc:	00 
c010bcfd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd01:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bd04:	89 04 24             	mov    %eax,(%esp)
c010bd07:	e8 63 d6 ff ff       	call   c010936f <user_mem_check>
c010bd0c:	85 c0                	test   %eax,%eax
c010bd0e:	75 0a                	jne    c010bd1a <do_wait+0x47>
            return -E_INVAL;
c010bd10:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bd15:	e9 56 01 00 00       	jmp    c010be70 <do_wait+0x19d>
        }
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
c010bd1a:	90                   	nop
    haskid = 0;
c010bd1b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010bd22:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bd26:	74 39                	je     c010bd61 <do_wait+0x8e>
        proc = find_proc(pid);
c010bd28:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd2b:	89 04 24             	mov    %eax,(%esp)
c010bd2e:	e8 6e f0 ff ff       	call   c010ada1 <find_proc>
c010bd33:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010bd36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd3a:	74 58                	je     c010bd94 <do_wait+0xc1>
c010bd3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd3f:	8b 50 14             	mov    0x14(%eax),%edx
c010bd42:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010bd47:	39 c2                	cmp    %eax,%edx
c010bd49:	75 49                	jne    c010bd94 <do_wait+0xc1>
            haskid = 1;
c010bd4b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010bd52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd55:	8b 00                	mov    (%eax),%eax
c010bd57:	83 f8 03             	cmp    $0x3,%eax
c010bd5a:	75 38                	jne    c010bd94 <do_wait+0xc1>
                goto found;
c010bd5c:	e9 87 00 00 00       	jmp    c010bde8 <do_wait+0x115>
            }
        }
    }
    else {
        proc = current->cptr;
c010bd61:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010bd66:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bd6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010bd6f:	eb 1d                	jmp    c010bd8e <do_wait+0xbb>
            haskid = 1;
c010bd71:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010bd78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd7b:	8b 00                	mov    (%eax),%eax
c010bd7d:	83 f8 03             	cmp    $0x3,%eax
c010bd80:	74 65                	je     c010bde7 <do_wait+0x114>
        for (; proc != NULL; proc = proc->optr) {
c010bd82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd85:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bd8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd92:	75 dd                	jne    c010bd71 <do_wait+0x9e>
                goto found;
            }
        }
    }
    if (haskid) {
c010bd94:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bd98:	74 43                	je     c010bddd <do_wait+0x10a>
        current->state = PROC_SLEEPING;
c010bd9a:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010bd9f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010bda5:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010bdaa:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010bdb1:	00 00 80 
        schedule();
c010bdb4:	e8 a6 0d 00 00       	call   c010cb5f <schedule>
        if (current->flags & PF_EXITING) {
c010bdb9:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010bdbe:	8b 40 44             	mov    0x44(%eax),%eax
c010bdc1:	83 e0 01             	and    $0x1,%eax
c010bdc4:	85 c0                	test   %eax,%eax
c010bdc6:	0f 84 4f ff ff ff    	je     c010bd1b <do_wait+0x48>
            do_exit(-E_KILLED);
c010bdcc:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010bdd3:	e8 46 f5 ff ff       	call   c010b31e <do_exit>
        }
        goto repeat;
c010bdd8:	e9 3e ff ff ff       	jmp    c010bd1b <do_wait+0x48>
    }
    return -E_BAD_PROC;
c010bddd:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010bde2:	e9 89 00 00 00       	jmp    c010be70 <do_wait+0x19d>
                goto found;
c010bde7:	90                   	nop

found:
    if (proc == idleproc || proc == initproc) {
c010bde8:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010bded:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bdf0:	74 0a                	je     c010bdfc <do_wait+0x129>
c010bdf2:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010bdf7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bdfa:	75 1c                	jne    c010be18 <do_wait+0x145>
        panic("wait idleproc or initproc.\n");
c010bdfc:	c7 44 24 08 86 06 11 	movl   $0xc0110686,0x8(%esp)
c010be03:	c0 
c010be04:	c7 44 24 04 fb 02 00 	movl   $0x2fb,0x4(%esp)
c010be0b:	00 
c010be0c:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010be13:	e8 d8 4f ff ff       	call   c0100df0 <__panic>
    }
    if (code_store != NULL) {
c010be18:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010be1c:	74 0e                	je     c010be2c <do_wait+0x159>
        *code_store = proc->exit_code;
c010be1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be21:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010be27:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be2a:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010be2c:	e8 87 e8 ff ff       	call   c010a6b8 <__intr_save>
c010be31:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010be34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be37:	89 04 24             	mov    %eax,(%esp)
c010be3a:	e8 28 ef ff ff       	call   c010ad67 <unhash_proc>
        remove_links(proc);
c010be3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be42:	89 04 24             	mov    %eax,(%esp)
c010be45:	e8 68 ec ff ff       	call   c010aab2 <remove_links>
    }
    local_intr_restore(intr_flag);
c010be4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010be4d:	89 04 24             	mov    %eax,(%esp)
c010be50:	e8 8f e8 ff ff       	call   c010a6e4 <__intr_restore>
    put_kstack(proc);
c010be55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be58:	89 04 24             	mov    %eax,(%esp)
c010be5b:	e8 6b f0 ff ff       	call   c010aecb <put_kstack>
    kfree(proc);
c010be60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be63:	89 04 24             	mov    %eax,(%esp)
c010be66:	e8 8d 8f ff ff       	call   c0104df8 <kfree>
    return 0;
c010be6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010be70:	89 ec                	mov    %ebp,%esp
c010be72:	5d                   	pop    %ebp
c010be73:	c3                   	ret    

c010be74 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010be74:	55                   	push   %ebp
c010be75:	89 e5                	mov    %esp,%ebp
c010be77:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010be7a:	8b 45 08             	mov    0x8(%ebp),%eax
c010be7d:	89 04 24             	mov    %eax,(%esp)
c010be80:	e8 1c ef ff ff       	call   c010ada1 <find_proc>
c010be85:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010be88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010be8c:	74 44                	je     c010bed2 <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010be8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be91:	8b 40 44             	mov    0x44(%eax),%eax
c010be94:	83 e0 01             	and    $0x1,%eax
c010be97:	85 c0                	test   %eax,%eax
c010be99:	75 30                	jne    c010becb <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010be9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be9e:	8b 40 44             	mov    0x44(%eax),%eax
c010bea1:	83 c8 01             	or     $0x1,%eax
c010bea4:	89 c2                	mov    %eax,%edx
c010bea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bea9:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010beac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010beaf:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010beb5:	85 c0                	test   %eax,%eax
c010beb7:	79 0b                	jns    c010bec4 <do_kill+0x50>
                wakeup_proc(proc);
c010beb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bebc:	89 04 24             	mov    %eax,(%esp)
c010bebf:	e8 fc 0b 00 00       	call   c010cac0 <wakeup_proc>
            }
            return 0;
c010bec4:	b8 00 00 00 00       	mov    $0x0,%eax
c010bec9:	eb 0c                	jmp    c010bed7 <do_kill+0x63>
        }
        return -E_KILLED;
c010becb:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010bed0:	eb 05                	jmp    c010bed7 <do_kill+0x63>
    }
    return -E_INVAL;
c010bed2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010bed7:	89 ec                	mov    %ebp,%esp
c010bed9:	5d                   	pop    %ebp
c010beda:	c3                   	ret    

c010bedb <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010bedb:	55                   	push   %ebp
c010bedc:	89 e5                	mov    %esp,%ebp
c010bede:	57                   	push   %edi
c010bedf:	56                   	push   %esi
c010bee0:	53                   	push   %ebx
c010bee1:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010bee4:	8b 45 08             	mov    0x8(%ebp),%eax
c010bee7:	89 04 24             	mov    %eax,(%esp)
c010beea:	e8 1c 1a 00 00       	call   c010d90b <strlen>
c010beef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010bef2:	b8 04 00 00 00       	mov    $0x4,%eax
c010bef7:	8b 55 08             	mov    0x8(%ebp),%edx
c010befa:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010befd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010bf00:	8b 75 10             	mov    0x10(%ebp),%esi
c010bf03:	89 f7                	mov    %esi,%edi
c010bf05:	cd 80                	int    $0x80
c010bf07:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010bf0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010bf0d:	83 c4 2c             	add    $0x2c,%esp
c010bf10:	5b                   	pop    %ebx
c010bf11:	5e                   	pop    %esi
c010bf12:	5f                   	pop    %edi
c010bf13:	5d                   	pop    %ebp
c010bf14:	c3                   	ret    

c010bf15 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010bf15:	55                   	push   %ebp
c010bf16:	89 e5                	mov    %esp,%ebp
c010bf18:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
#else
    KERNEL_EXECVE(exit);
c010bf1b:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010bf20:	8b 40 04             	mov    0x4(%eax),%eax
c010bf23:	c7 44 24 08 a2 06 11 	movl   $0xc01106a2,0x8(%esp)
c010bf2a:	c0 
c010bf2b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf2f:	c7 04 24 a8 06 11 c0 	movl   $0xc01106a8,(%esp)
c010bf36:	e8 37 44 ff ff       	call   c0100372 <cprintf>
c010bf3b:	b8 08 79 00 00       	mov    $0x7908,%eax
c010bf40:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf44:	c7 44 24 04 f0 09 15 	movl   $0xc01509f0,0x4(%esp)
c010bf4b:	c0 
c010bf4c:	c7 04 24 a2 06 11 c0 	movl   $0xc01106a2,(%esp)
c010bf53:	e8 83 ff ff ff       	call   c010bedb <kernel_execve>
#endif
    panic("user_main execve failed.\n");
c010bf58:	c7 44 24 08 cf 06 11 	movl   $0xc01106cf,0x8(%esp)
c010bf5f:	c0 
c010bf60:	c7 44 24 04 44 03 00 	movl   $0x344,0x4(%esp)
c010bf67:	00 
c010bf68:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010bf6f:	e8 7c 4e ff ff       	call   c0100df0 <__panic>

c010bf74 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010bf74:	55                   	push   %ebp
c010bf75:	89 e5                	mov    %esp,%ebp
c010bf77:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010bf7a:	e8 8f 93 ff ff       	call   c010530e <nr_free_pages>
c010bf7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010bf82:	e8 31 8d ff ff       	call   c0104cb8 <kallocated>
c010bf87:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010bf8a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010bf91:	00 
c010bf92:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bf99:	00 
c010bf9a:	c7 04 24 15 bf 10 c0 	movl   $0xc010bf15,(%esp)
c010bfa1:	e8 71 ee ff ff       	call   c010ae17 <kernel_thread>
c010bfa6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010bfa9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bfad:	7f 1c                	jg     c010bfcb <init_main+0x57>
        panic("create user_main failed.\n");
c010bfaf:	c7 44 24 08 e9 06 11 	movl   $0xc01106e9,0x8(%esp)
c010bfb6:	c0 
c010bfb7:	c7 44 24 04 4f 03 00 	movl   $0x34f,0x4(%esp)
c010bfbe:	00 
c010bfbf:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010bfc6:	e8 25 4e ff ff       	call   c0100df0 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010bfcb:	e8 c2 d9 ff ff       	call   c0109992 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010bfd0:	eb 05                	jmp    c010bfd7 <init_main+0x63>
        schedule();
c010bfd2:	e8 88 0b 00 00       	call   c010cb5f <schedule>
    while (do_wait(0, NULL) == 0) {
c010bfd7:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bfde:	00 
c010bfdf:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bfe6:	e8 e8 fc ff ff       	call   c010bcd3 <do_wait>
c010bfeb:	85 c0                	test   %eax,%eax
c010bfed:	74 e3                	je     c010bfd2 <init_main+0x5e>
    }

    cprintf("all user-mode processes have quit.\n");
c010bfef:	c7 04 24 04 07 11 c0 	movl   $0xc0110704,(%esp)
c010bff6:	e8 77 43 ff ff       	call   c0100372 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010bffb:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010c000:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c006:	85 c0                	test   %eax,%eax
c010c008:	75 1e                	jne    c010c028 <init_main+0xb4>
c010c00a:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010c00f:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010c015:	85 c0                	test   %eax,%eax
c010c017:	75 0f                	jne    c010c028 <init_main+0xb4>
c010c019:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010c01e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c024:	85 c0                	test   %eax,%eax
c010c026:	74 24                	je     c010c04c <init_main+0xd8>
c010c028:	c7 44 24 0c 28 07 11 	movl   $0xc0110728,0xc(%esp)
c010c02f:	c0 
c010c030:	c7 44 24 08 82 04 11 	movl   $0xc0110482,0x8(%esp)
c010c037:	c0 
c010c038:	c7 44 24 04 59 03 00 	movl   $0x359,0x4(%esp)
c010c03f:	00 
c010c040:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010c047:	e8 a4 4d ff ff       	call   c0100df0 <__panic>
    assert(nr_process == 2);
c010c04c:	a1 00 f2 1c c0       	mov    0xc01cf200,%eax
c010c051:	83 f8 02             	cmp    $0x2,%eax
c010c054:	74 24                	je     c010c07a <init_main+0x106>
c010c056:	c7 44 24 0c 73 07 11 	movl   $0xc0110773,0xc(%esp)
c010c05d:	c0 
c010c05e:	c7 44 24 08 82 04 11 	movl   $0xc0110482,0x8(%esp)
c010c065:	c0 
c010c066:	c7 44 24 04 5a 03 00 	movl   $0x35a,0x4(%esp)
c010c06d:	00 
c010c06e:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010c075:	e8 76 4d ff ff       	call   c0100df0 <__panic>
c010c07a:	c7 45 e8 e0 d1 1c c0 	movl   $0xc01cd1e0,-0x18(%ebp)
c010c081:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c084:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010c087:	8b 15 ec d1 1c c0    	mov    0xc01cd1ec,%edx
c010c08d:	83 c2 7c             	add    $0x7c,%edx
c010c090:	39 d0                	cmp    %edx,%eax
c010c092:	74 24                	je     c010c0b8 <init_main+0x144>
c010c094:	c7 44 24 0c 84 07 11 	movl   $0xc0110784,0xc(%esp)
c010c09b:	c0 
c010c09c:	c7 44 24 08 82 04 11 	movl   $0xc0110482,0x8(%esp)
c010c0a3:	c0 
c010c0a4:	c7 44 24 04 5b 03 00 	movl   $0x35b,0x4(%esp)
c010c0ab:	00 
c010c0ac:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010c0b3:	e8 38 4d ff ff       	call   c0100df0 <__panic>
c010c0b8:	c7 45 e4 e0 d1 1c c0 	movl   $0xc01cd1e0,-0x1c(%ebp)
    return listelm->prev;
c010c0bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c0c2:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010c0c4:	8b 15 ec d1 1c c0    	mov    0xc01cd1ec,%edx
c010c0ca:	83 c2 7c             	add    $0x7c,%edx
c010c0cd:	39 d0                	cmp    %edx,%eax
c010c0cf:	74 24                	je     c010c0f5 <init_main+0x181>
c010c0d1:	c7 44 24 0c b4 07 11 	movl   $0xc01107b4,0xc(%esp)
c010c0d8:	c0 
c010c0d9:	c7 44 24 08 82 04 11 	movl   $0xc0110482,0x8(%esp)
c010c0e0:	c0 
c010c0e1:	c7 44 24 04 5c 03 00 	movl   $0x35c,0x4(%esp)
c010c0e8:	00 
c010c0e9:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010c0f0:	e8 fb 4c ff ff       	call   c0100df0 <__panic>

    cprintf("init check memory pass.\n");
c010c0f5:	c7 04 24 e4 07 11 c0 	movl   $0xc01107e4,(%esp)
c010c0fc:	e8 71 42 ff ff       	call   c0100372 <cprintf>
    return 0;
c010c101:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c106:	89 ec                	mov    %ebp,%esp
c010c108:	5d                   	pop    %ebp
c010c109:	c3                   	ret    

c010c10a <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010c10a:	55                   	push   %ebp
c010c10b:	89 e5                	mov    %esp,%ebp
c010c10d:	83 ec 28             	sub    $0x28,%esp
c010c110:	c7 45 ec e0 d1 1c c0 	movl   $0xc01cd1e0,-0x14(%ebp)
    elm->prev = elm->next = elm;
c010c117:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c11a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c11d:	89 50 04             	mov    %edx,0x4(%eax)
c010c120:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c123:	8b 50 04             	mov    0x4(%eax),%edx
c010c126:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c129:	89 10                	mov    %edx,(%eax)
}
c010c12b:	90                   	nop
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010c12c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010c133:	eb 26                	jmp    c010c15b <proc_init+0x51>
        list_init(hash_list + i);
c010c135:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c138:	c1 e0 03             	shl    $0x3,%eax
c010c13b:	05 00 d2 1c c0       	add    $0xc01cd200,%eax
c010c140:	89 45 e8             	mov    %eax,-0x18(%ebp)
    elm->prev = elm->next = elm;
c010c143:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c146:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c149:	89 50 04             	mov    %edx,0x4(%eax)
c010c14c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c14f:	8b 50 04             	mov    0x4(%eax),%edx
c010c152:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c155:	89 10                	mov    %edx,(%eax)
}
c010c157:	90                   	nop
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010c158:	ff 45 f4             	incl   -0xc(%ebp)
c010c15b:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010c162:	7e d1                	jle    c010c135 <proc_init+0x2b>
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010c164:	e8 39 e7 ff ff       	call   c010a8a2 <alloc_proc>
c010c169:	a3 e8 d1 1c c0       	mov    %eax,0xc01cd1e8
c010c16e:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010c173:	85 c0                	test   %eax,%eax
c010c175:	75 1c                	jne    c010c193 <proc_init+0x89>
        panic("cannot alloc idleproc.\n");
c010c177:	c7 44 24 08 fd 07 11 	movl   $0xc01107fd,0x8(%esp)
c010c17e:	c0 
c010c17f:	c7 44 24 04 6e 03 00 	movl   $0x36e,0x4(%esp)
c010c186:	00 
c010c187:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010c18e:	e8 5d 4c ff ff       	call   c0100df0 <__panic>
    }

    idleproc->pid = 0;
c010c193:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010c198:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010c19f:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010c1a4:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010c1aa:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010c1af:	ba 00 70 13 c0       	mov    $0xc0137000,%edx
c010c1b4:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010c1b7:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010c1bc:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010c1c3:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010c1c8:	c7 44 24 04 15 08 11 	movl   $0xc0110815,0x4(%esp)
c010c1cf:	c0 
c010c1d0:	89 04 24             	mov    %eax,(%esp)
c010c1d3:	e8 93 e7 ff ff       	call   c010a96b <set_proc_name>
    nr_process ++;
c010c1d8:	a1 00 f2 1c c0       	mov    0xc01cf200,%eax
c010c1dd:	40                   	inc    %eax
c010c1de:	a3 00 f2 1c c0       	mov    %eax,0xc01cf200

    current = idleproc;
c010c1e3:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010c1e8:	a3 f0 d1 1c c0       	mov    %eax,0xc01cd1f0

    int pid = kernel_thread(init_main, NULL, 0);
c010c1ed:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010c1f4:	00 
c010c1f5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c1fc:	00 
c010c1fd:	c7 04 24 74 bf 10 c0 	movl   $0xc010bf74,(%esp)
c010c204:	e8 0e ec ff ff       	call   c010ae17 <kernel_thread>
c010c209:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010c20c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c210:	7f 1c                	jg     c010c22e <proc_init+0x124>
        panic("create init_main failed.\n");
c010c212:	c7 44 24 08 1a 08 11 	movl   $0xc011081a,0x8(%esp)
c010c219:	c0 
c010c21a:	c7 44 24 04 7c 03 00 	movl   $0x37c,0x4(%esp)
c010c221:	00 
c010c222:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010c229:	e8 c2 4b ff ff       	call   c0100df0 <__panic>
    }

    initproc = find_proc(pid);
c010c22e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c231:	89 04 24             	mov    %eax,(%esp)
c010c234:	e8 68 eb ff ff       	call   c010ada1 <find_proc>
c010c239:	a3 ec d1 1c c0       	mov    %eax,0xc01cd1ec
    set_proc_name(initproc, "init");
c010c23e:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010c243:	c7 44 24 04 34 08 11 	movl   $0xc0110834,0x4(%esp)
c010c24a:	c0 
c010c24b:	89 04 24             	mov    %eax,(%esp)
c010c24e:	e8 18 e7 ff ff       	call   c010a96b <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010c253:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010c258:	85 c0                	test   %eax,%eax
c010c25a:	74 0c                	je     c010c268 <proc_init+0x15e>
c010c25c:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010c261:	8b 40 04             	mov    0x4(%eax),%eax
c010c264:	85 c0                	test   %eax,%eax
c010c266:	74 24                	je     c010c28c <proc_init+0x182>
c010c268:	c7 44 24 0c 3c 08 11 	movl   $0xc011083c,0xc(%esp)
c010c26f:	c0 
c010c270:	c7 44 24 08 82 04 11 	movl   $0xc0110482,0x8(%esp)
c010c277:	c0 
c010c278:	c7 44 24 04 82 03 00 	movl   $0x382,0x4(%esp)
c010c27f:	00 
c010c280:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010c287:	e8 64 4b ff ff       	call   c0100df0 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010c28c:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010c291:	85 c0                	test   %eax,%eax
c010c293:	74 0d                	je     c010c2a2 <proc_init+0x198>
c010c295:	a1 ec d1 1c c0       	mov    0xc01cd1ec,%eax
c010c29a:	8b 40 04             	mov    0x4(%eax),%eax
c010c29d:	83 f8 01             	cmp    $0x1,%eax
c010c2a0:	74 24                	je     c010c2c6 <proc_init+0x1bc>
c010c2a2:	c7 44 24 0c 64 08 11 	movl   $0xc0110864,0xc(%esp)
c010c2a9:	c0 
c010c2aa:	c7 44 24 08 82 04 11 	movl   $0xc0110482,0x8(%esp)
c010c2b1:	c0 
c010c2b2:	c7 44 24 04 83 03 00 	movl   $0x383,0x4(%esp)
c010c2b9:	00 
c010c2ba:	c7 04 24 40 04 11 c0 	movl   $0xc0110440,(%esp)
c010c2c1:	e8 2a 4b ff ff       	call   c0100df0 <__panic>
}
c010c2c6:	90                   	nop
c010c2c7:	89 ec                	mov    %ebp,%esp
c010c2c9:	5d                   	pop    %ebp
c010c2ca:	c3                   	ret    

c010c2cb <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010c2cb:	55                   	push   %ebp
c010c2cc:	89 e5                	mov    %esp,%ebp
c010c2ce:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010c2d1:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010c2d6:	8b 40 10             	mov    0x10(%eax),%eax
c010c2d9:	85 c0                	test   %eax,%eax
c010c2db:	74 f4                	je     c010c2d1 <cpu_idle+0x6>
            schedule();
c010c2dd:	e8 7d 08 00 00       	call   c010cb5f <schedule>
        if (current->need_resched) {
c010c2e2:	eb ed                	jmp    c010c2d1 <cpu_idle+0x6>

c010c2e4 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010c2e4:	55                   	push   %ebp
c010c2e5:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010c2e7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c2eb:	75 11                	jne    c010c2fe <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010c2ed:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010c2f2:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010c2f9:	00 00 00 
    else current->lab6_priority = priority;
}
c010c2fc:	eb 0e                	jmp    c010c30c <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010c2fe:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010c303:	8b 55 08             	mov    0x8(%ebp),%edx
c010c306:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010c30c:	90                   	nop
c010c30d:	5d                   	pop    %ebp
c010c30e:	c3                   	ret    

c010c30f <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010c30f:	55                   	push   %ebp
c010c310:	89 e5                	mov    %esp,%ebp
c010c312:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010c315:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c319:	75 07                	jne    c010c322 <do_sleep+0x13>
        return 0;
c010c31b:	b8 00 00 00 00       	mov    $0x0,%eax
c010c320:	eb 6b                	jmp    c010c38d <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010c322:	e8 91 e3 ff ff       	call   c010a6b8 <__intr_save>
c010c327:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010c32a:	8b 55 08             	mov    0x8(%ebp),%edx
c010c32d:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010c332:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c336:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c33a:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010c33d:	89 04 24             	mov    %eax,(%esp)
c010c340:	e8 37 e3 ff ff       	call   c010a67c <timer_init>
c010c345:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010c348:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010c34d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010c353:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010c358:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010c35f:	00 00 80 
    add_timer(timer);
c010c362:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c365:	89 04 24             	mov    %eax,(%esp)
c010c368:	e8 80 08 00 00       	call   c010cbed <add_timer>
    local_intr_restore(intr_flag);
c010c36d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c370:	89 04 24             	mov    %eax,(%esp)
c010c373:	e8 6c e3 ff ff       	call   c010a6e4 <__intr_restore>

    schedule();
c010c378:	e8 e2 07 00 00       	call   c010cb5f <schedule>

    del_timer(timer);
c010c37d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c380:	89 04 24             	mov    %eax,(%esp)
c010c383:	e8 a8 09 00 00       	call   c010cd30 <del_timer>
    return 0;
c010c388:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c38d:	89 ec                	mov    %ebp,%esp
c010c38f:	5d                   	pop    %ebp
c010c390:	c3                   	ret    

c010c391 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010c391:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010c395:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010c397:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010c39a:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010c39d:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010c3a0:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010c3a3:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010c3a6:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010c3a9:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010c3ac:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010c3b0:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010c3b3:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010c3b6:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010c3b9:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010c3bc:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010c3bf:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010c3c2:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010c3c5:	ff 30                	pushl  (%eax)

    ret
c010c3c7:	c3                   	ret    

c010c3c8 <RR_init>:
#include <proc.h>
#include <assert.h>
#include <default_sched.h>

static void
RR_init(struct run_queue *rq) {
c010c3c8:	55                   	push   %ebp
c010c3c9:	89 e5                	mov    %esp,%ebp
c010c3cb:	83 ec 10             	sub    $0x10,%esp
    list_init(&(rq->run_list));
c010c3ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3d1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c010c3d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3d7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c3da:	89 50 04             	mov    %edx,0x4(%eax)
c010c3dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3e0:	8b 50 04             	mov    0x4(%eax),%edx
c010c3e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c3e6:	89 10                	mov    %edx,(%eax)
}
c010c3e8:	90                   	nop
    rq->proc_num = 0;
c010c3e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3ec:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010c3f3:	90                   	nop
c010c3f4:	89 ec                	mov    %ebp,%esp
c010c3f6:	5d                   	pop    %ebp
c010c3f7:	c3                   	ret    

c010c3f8 <RR_enqueue>:

static void
RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010c3f8:	55                   	push   %ebp
c010c3f9:	89 e5                	mov    %esp,%ebp
c010c3fb:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(proc->run_link)));
c010c3fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c401:	05 a4 00 00 00       	add    $0xa4,%eax
c010c406:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list->next == list;
c010c409:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c40c:	8b 40 04             	mov    0x4(%eax),%eax
c010c40f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010c412:	0f 94 c0             	sete   %al
c010c415:	0f b6 c0             	movzbl %al,%eax
c010c418:	85 c0                	test   %eax,%eax
c010c41a:	75 24                	jne    c010c440 <RR_enqueue+0x48>
c010c41c:	c7 44 24 0c 8c 08 11 	movl   $0xc011088c,0xc(%esp)
c010c423:	c0 
c010c424:	c7 44 24 08 aa 08 11 	movl   $0xc01108aa,0x8(%esp)
c010c42b:	c0 
c010c42c:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
c010c433:	00 
c010c434:	c7 04 24 bf 08 11 c0 	movl   $0xc01108bf,(%esp)
c010c43b:	e8 b0 49 ff ff       	call   c0100df0 <__panic>
    list_add_before(&(rq->run_list), &(proc->run_link));
c010c440:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c443:	8d 90 a4 00 00 00    	lea    0xa4(%eax),%edx
c010c449:	8b 45 08             	mov    0x8(%ebp),%eax
c010c44c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c44f:	89 55 ec             	mov    %edx,-0x14(%ebp)
    __list_add(elm, listelm->prev, listelm);
c010c452:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c455:	8b 00                	mov    (%eax),%eax
c010c457:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c45a:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c45d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c460:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c463:	89 45 e0             	mov    %eax,-0x20(%ebp)
    prev->next = next->prev = elm;
c010c466:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c469:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c46c:	89 10                	mov    %edx,(%eax)
c010c46e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c471:	8b 10                	mov    (%eax),%edx
c010c473:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c476:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c479:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c47c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c47f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c482:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c485:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c488:	89 10                	mov    %edx,(%eax)
}
c010c48a:	90                   	nop
}
c010c48b:	90                   	nop
    //correct the enqueue proc's time slice
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010c48c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c48f:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c495:	85 c0                	test   %eax,%eax
c010c497:	74 13                	je     c010c4ac <RR_enqueue+0xb4>
c010c499:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c49c:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010c4a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4a5:	8b 40 0c             	mov    0xc(%eax),%eax
c010c4a8:	39 c2                	cmp    %eax,%edx
c010c4aa:	7e 0f                	jle    c010c4bb <RR_enqueue+0xc3>
        proc->time_slice = rq->max_time_slice;
c010c4ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4af:	8b 50 0c             	mov    0xc(%eax),%edx
c010c4b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4b5:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    proc->rq = rq;
c010c4bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4be:	8b 55 08             	mov    0x8(%ebp),%edx
c010c4c1:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    rq->proc_num ++;
c010c4c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4ca:	8b 40 08             	mov    0x8(%eax),%eax
c010c4cd:	8d 50 01             	lea    0x1(%eax),%edx
c010c4d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4d3:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c4d6:	90                   	nop
c010c4d7:	89 ec                	mov    %ebp,%esp
c010c4d9:	5d                   	pop    %ebp
c010c4da:	c3                   	ret    

c010c4db <RR_dequeue>:

static void
RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010c4db:	55                   	push   %ebp
c010c4dc:	89 e5                	mov    %esp,%ebp
c010c4de:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
c010c4e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4e4:	05 a4 00 00 00       	add    $0xa4,%eax
c010c4e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return list->next == list;
c010c4ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4ef:	8b 40 04             	mov    0x4(%eax),%eax
c010c4f2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010c4f5:	0f 94 c0             	sete   %al
c010c4f8:	0f b6 c0             	movzbl %al,%eax
c010c4fb:	85 c0                	test   %eax,%eax
c010c4fd:	75 0e                	jne    c010c50d <RR_dequeue+0x32>
c010c4ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c502:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
c010c508:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c50b:	74 24                	je     c010c531 <RR_dequeue+0x56>
c010c50d:	c7 44 24 0c e0 08 11 	movl   $0xc01108e0,0xc(%esp)
c010c514:	c0 
c010c515:	c7 44 24 08 aa 08 11 	movl   $0xc01108aa,0x8(%esp)
c010c51c:	c0 
c010c51d:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
c010c524:	00 
c010c525:	c7 04 24 bf 08 11 c0 	movl   $0xc01108bf,(%esp)
c010c52c:	e8 bf 48 ff ff       	call   c0100df0 <__panic>
    list_del_init(&(proc->run_link));
c010c531:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c534:	05 a4 00 00 00       	add    $0xa4,%eax
c010c539:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c53c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c53f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    __list_del(listelm->prev, listelm->next);
c010c542:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c545:	8b 40 04             	mov    0x4(%eax),%eax
c010c548:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c54b:	8b 12                	mov    (%edx),%edx
c010c54d:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c550:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    prev->next = next;
c010c553:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c556:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c559:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c55c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c55f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c562:	89 10                	mov    %edx,(%eax)
}
c010c564:	90                   	nop
}
c010c565:	90                   	nop
c010c566:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c569:	89 45 e0             	mov    %eax,-0x20(%ebp)
    elm->prev = elm->next = elm;
c010c56c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c56f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c572:	89 50 04             	mov    %edx,0x4(%eax)
c010c575:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c578:	8b 50 04             	mov    0x4(%eax),%edx
c010c57b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c57e:	89 10                	mov    %edx,(%eax)
}
c010c580:	90                   	nop
}
c010c581:	90                   	nop
    rq->proc_num --;
c010c582:	8b 45 08             	mov    0x8(%ebp),%eax
c010c585:	8b 40 08             	mov    0x8(%eax),%eax
c010c588:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c58b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c58e:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c591:	90                   	nop
c010c592:	89 ec                	mov    %ebp,%esp
c010c594:	5d                   	pop    %ebp
c010c595:	c3                   	ret    

c010c596 <RR_pick_next>:

static struct proc_struct *
RR_pick_next(struct run_queue *rq) {
c010c596:	55                   	push   %ebp
c010c597:	89 e5                	mov    %esp,%ebp
c010c599:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(rq->run_list));
c010c59c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c59f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return listelm->next;
c010c5a2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c5a5:	8b 40 04             	mov    0x4(%eax),%eax
c010c5a8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(rq->run_list)) {
c010c5ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5ae:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010c5b1:	74 0a                	je     c010c5bd <RR_pick_next+0x27>
        return le2proc(le, run_link);
c010c5b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c5b6:	2d a4 00 00 00       	sub    $0xa4,%eax
c010c5bb:	eb 05                	jmp    c010c5c2 <RR_pick_next+0x2c>
    }
    return NULL;
c010c5bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c5c2:	89 ec                	mov    %ebp,%esp
c010c5c4:	5d                   	pop    %ebp
c010c5c5:	c3                   	ret    

c010c5c6 <RR_proc_tick>:

static void
RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010c5c6:	55                   	push   %ebp
c010c5c7:	89 e5                	mov    %esp,%ebp
    if (proc->time_slice > 0) {
c010c5c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5cc:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c5d2:	85 c0                	test   %eax,%eax
c010c5d4:	7e 15                	jle    c010c5eb <RR_proc_tick+0x25>
        proc->time_slice --;
c010c5d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5d9:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c5df:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c5e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5e5:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    if (proc->time_slice == 0) {
c010c5eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5ee:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c5f4:	85 c0                	test   %eax,%eax
c010c5f6:	75 0a                	jne    c010c602 <RR_proc_tick+0x3c>
        proc->need_resched = 1;
c010c5f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5fb:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010c602:	90                   	nop
c010c603:	5d                   	pop    %ebp
c010c604:	c3                   	ret    

c010c605 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010c605:	55                   	push   %ebp
c010c606:	89 e5                	mov    %esp,%ebp
c010c608:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010c60b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c60f:	75 08                	jne    c010c619 <skew_heap_merge+0x14>
c010c611:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c614:	e9 bd 00 00 00       	jmp    c010c6d6 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010c619:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c61d:	75 08                	jne    c010c627 <skew_heap_merge+0x22>
c010c61f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c622:	e9 af 00 00 00       	jmp    c010c6d6 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010c627:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c62a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c62e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c631:	89 04 24             	mov    %eax,(%esp)
c010c634:	8b 45 10             	mov    0x10(%ebp),%eax
c010c637:	ff d0                	call   *%eax
c010c639:	83 f8 ff             	cmp    $0xffffffff,%eax
c010c63c:	75 4d                	jne    c010c68b <skew_heap_merge+0x86>
     {
          r = a->left;
c010c63e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c641:	8b 40 04             	mov    0x4(%eax),%eax
c010c644:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010c647:	8b 45 08             	mov    0x8(%ebp),%eax
c010c64a:	8b 40 08             	mov    0x8(%eax),%eax
c010c64d:	8b 55 10             	mov    0x10(%ebp),%edx
c010c650:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c654:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c657:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c65b:	89 04 24             	mov    %eax,(%esp)
c010c65e:	e8 a2 ff ff ff       	call   c010c605 <skew_heap_merge>
c010c663:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010c666:	8b 45 08             	mov    0x8(%ebp),%eax
c010c669:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c66c:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010c66f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c672:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c675:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010c678:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c67c:	74 08                	je     c010c686 <skew_heap_merge+0x81>
c010c67e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c681:	8b 55 08             	mov    0x8(%ebp),%edx
c010c684:	89 10                	mov    %edx,(%eax)

          return a;
c010c686:	8b 45 08             	mov    0x8(%ebp),%eax
c010c689:	eb 4b                	jmp    c010c6d6 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010c68b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c68e:	8b 40 04             	mov    0x4(%eax),%eax
c010c691:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010c694:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c697:	8b 40 08             	mov    0x8(%eax),%eax
c010c69a:	8b 55 10             	mov    0x10(%ebp),%edx
c010c69d:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c6a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c6a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6a8:	89 04 24             	mov    %eax,(%esp)
c010c6ab:	e8 55 ff ff ff       	call   c010c605 <skew_heap_merge>
c010c6b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010c6b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c6b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c6b9:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010c6bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c6bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c6c2:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010c6c5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c6c9:	74 08                	je     c010c6d3 <skew_heap_merge+0xce>
c010c6cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6ce:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c6d1:	89 10                	mov    %edx,(%eax)

          return b;
c010c6d3:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010c6d6:	89 ec                	mov    %ebp,%esp
c010c6d8:	5d                   	pop    %ebp
c010c6d9:	c3                   	ret    

c010c6da <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010c6da:	55                   	push   %ebp
c010c6db:	89 e5                	mov    %esp,%ebp
c010c6dd:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010c6e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6e3:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c6e8:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010c6eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c6ee:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c6f3:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010c6f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c6f9:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010c6ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c702:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010c708:	89 d0                	mov    %edx,%eax
c010c70a:	29 c8                	sub    %ecx,%eax
c010c70c:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010c70f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c713:	7e 07                	jle    c010c71c <proc_stride_comp_f+0x42>
c010c715:	b8 01 00 00 00       	mov    $0x1,%eax
c010c71a:	eb 12                	jmp    c010c72e <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010c71c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c720:	75 07                	jne    c010c729 <proc_stride_comp_f+0x4f>
c010c722:	b8 00 00 00 00       	mov    $0x0,%eax
c010c727:	eb 05                	jmp    c010c72e <proc_stride_comp_f+0x54>
     else return -1;
c010c729:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010c72e:	89 ec                	mov    %ebp,%esp
c010c730:	5d                   	pop    %ebp
c010c731:	c3                   	ret    

c010c732 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010c732:	55                   	push   %ebp
c010c733:	89 e5                	mov    %esp,%ebp
c010c735:	83 ec 10             	sub    $0x10,%esp
    list_init(&(rq->run_list));
c010c738:	8b 45 08             	mov    0x8(%ebp),%eax
c010c73b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    elm->prev = elm->next = elm;
c010c73e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c741:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c744:	89 50 04             	mov    %edx,0x4(%eax)
c010c747:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c74a:	8b 50 04             	mov    0x4(%eax),%edx
c010c74d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c750:	89 10                	mov    %edx,(%eax)
}
c010c752:	90                   	nop
    // 注意这里不要使用skew_heap_init(rq->lab6_run_pool)
    /* 因为lab6_run_pool是一个指针, 初始默认不指向任何东西, 而上面这个函数会对未初始化的地址
     * 解引用设置left right和parent为NULL
     */
    rq->lab6_run_pool = NULL;
c010c753:	8b 45 08             	mov    0x8(%ebp),%eax
c010c756:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    rq->proc_num = 0;
c010c75d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c760:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
     /* LAB6: YOUR CODE 
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
}
c010c767:	90                   	nop
c010c768:	89 ec                	mov    %ebp,%esp
c010c76a:	5d                   	pop    %ebp
c010c76b:	c3                   	ret    

c010c76c <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010c76c:	55                   	push   %ebp
c010c76d:	89 e5                	mov    %esp,%ebp
c010c76f:	83 ec 28             	sub    $0x28,%esp
    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010c772:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c775:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c77b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c77e:	8b 40 10             	mov    0x10(%eax),%eax
c010c781:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c784:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c787:	c7 45 ec da c6 10 c0 	movl   $0xc010c6da,-0x14(%ebp)
c010c78e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c791:	89 45 e8             	mov    %eax,-0x18(%ebp)
     a->left = a->right = a->parent = NULL;
c010c794:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c797:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010c79d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c7a0:	8b 10                	mov    (%eax),%edx
c010c7a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c7a5:	89 50 08             	mov    %edx,0x8(%eax)
c010c7a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c7ab:	8b 50 08             	mov    0x8(%eax),%edx
c010c7ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c7b1:	89 50 04             	mov    %edx,0x4(%eax)
}
c010c7b4:	90                   	nop
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010c7b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7b8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c7bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c7bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c7c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7c6:	89 04 24             	mov    %eax,(%esp)
c010c7c9:	e8 37 fe ff ff       	call   c010c605 <skew_heap_merge>
c010c7ce:	8b 55 08             	mov    0x8(%ebp),%edx
c010c7d1:	89 42 10             	mov    %eax,0x10(%edx)
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010c7d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7d7:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c7dd:	85 c0                	test   %eax,%eax
c010c7df:	74 13                	je     c010c7f4 <stride_enqueue+0x88>
c010c7e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7e4:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010c7ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7ed:	8b 40 0c             	mov    0xc(%eax),%eax
c010c7f0:	39 c2                	cmp    %eax,%edx
c010c7f2:	7e 0f                	jle    c010c803 <stride_enqueue+0x97>
        proc->time_slice = rq->max_time_slice;
c010c7f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7f7:	8b 50 0c             	mov    0xc(%eax),%edx
c010c7fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c7fd:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    proc->rq = rq;
c010c803:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c806:	8b 55 08             	mov    0x8(%ebp),%edx
c010c809:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    rq->proc_num ++;
c010c80f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c812:	8b 40 08             	mov    0x8(%eax),%eax
c010c815:	8d 50 01             	lea    0x1(%eax),%edx
c010c818:	8b 45 08             	mov    0x8(%ebp),%eax
c010c81b:	89 50 08             	mov    %edx,0x8(%eax)
      *         list_add_before: insert  a entry into the last of list   
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
}
c010c81e:	90                   	nop
c010c81f:	89 ec                	mov    %ebp,%esp
c010c821:	5d                   	pop    %ebp
c010c822:	c3                   	ret    

c010c823 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010c823:	55                   	push   %ebp
c010c824:	89 e5                	mov    %esp,%ebp
c010c826:	83 ec 38             	sub    $0x38,%esp
    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010c829:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c82c:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c832:	8b 45 08             	mov    0x8(%ebp),%eax
c010c835:	8b 40 10             	mov    0x10(%eax),%eax
c010c838:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c83b:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c83e:	c7 45 ec da c6 10 c0 	movl   $0xc010c6da,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010c845:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c848:	8b 00                	mov    (%eax),%eax
c010c84a:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010c84d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c850:	8b 50 08             	mov    0x8(%eax),%edx
c010c853:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c856:	8b 40 04             	mov    0x4(%eax),%eax
c010c859:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c85c:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010c860:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c864:	89 04 24             	mov    %eax,(%esp)
c010c867:	e8 99 fd ff ff       	call   c010c605 <skew_heap_merge>
c010c86c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010c86f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c873:	74 08                	je     c010c87d <stride_dequeue+0x5a>
c010c875:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c878:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c87b:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010c87d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c881:	74 24                	je     c010c8a7 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010c883:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c886:	8b 40 04             	mov    0x4(%eax),%eax
c010c889:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010c88c:	75 0b                	jne    c010c899 <stride_dequeue+0x76>
               p->left = rep;
c010c88e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c891:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c894:	89 50 04             	mov    %edx,0x4(%eax)
c010c897:	eb 09                	jmp    c010c8a2 <stride_dequeue+0x7f>
          else p->right = rep;
c010c899:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c89c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c89f:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010c8a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8a5:	eb 03                	jmp    c010c8aa <stride_dequeue+0x87>
     }
     else return rep;
c010c8a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c8aa:	8b 55 08             	mov    0x8(%ebp),%edx
c010c8ad:	89 42 10             	mov    %eax,0x10(%edx)
    rq->proc_num --;
c010c8b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8b3:	8b 40 08             	mov    0x8(%eax),%eax
c010c8b6:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c8b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8bc:	89 50 08             	mov    %edx,0x8(%eax)
      * (1) remove the proc from rq correctly
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
}
c010c8bf:	90                   	nop
c010c8c0:	89 ec                	mov    %ebp,%esp
c010c8c2:	5d                   	pop    %ebp
c010c8c3:	c3                   	ret    

c010c8c4 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010c8c4:	55                   	push   %ebp
c010c8c5:	89 e5                	mov    %esp,%ebp
c010c8c7:	83 ec 14             	sub    $0x14,%esp
c010c8ca:	89 5d fc             	mov    %ebx,-0x4(%ebp)
    skew_heap_entry_t* min = rq->lab6_run_pool;
c010c8cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8d0:	8b 40 10             	mov    0x10(%eax),%eax
c010c8d3:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (min != NULL) {
c010c8d6:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010c8da:	74 3a                	je     c010c916 <stride_pick_next+0x52>
        struct proc_struct* p = le2proc(min, lab6_run_pool);
c010c8dc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c8df:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c8e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010c8e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8ea:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010c8f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8f3:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010c8f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010c8fe:	ba 00 00 00 00       	mov    $0x0,%edx
c010c903:	f7 f3                	div    %ebx
c010c905:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010c908:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c90b:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
        return p;
c010c911:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c914:	eb 05                	jmp    c010c91b <stride_pick_next+0x57>
    }
    return NULL;
c010c916:	b8 00 00 00 00       	mov    $0x0,%eax
             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
}
c010c91b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010c91e:	89 ec                	mov    %ebp,%esp
c010c920:	5d                   	pop    %ebp
c010c921:	c3                   	ret    

c010c922 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010c922:	55                   	push   %ebp
c010c923:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
     if (proc->time_slice > 0) {
c010c925:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c928:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c92e:	85 c0                	test   %eax,%eax
c010c930:	7e 15                	jle    c010c947 <stride_proc_tick+0x25>
        proc->time_slice --;
c010c932:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c935:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c93b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c93e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c941:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    if (proc->time_slice == 0) {
c010c947:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c94a:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c950:	85 c0                	test   %eax,%eax
c010c952:	75 0a                	jne    c010c95e <stride_proc_tick+0x3c>
        proc->need_resched = 1;
c010c954:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c957:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010c95e:	90                   	nop
c010c95f:	5d                   	pop    %ebp
c010c960:	c3                   	ret    

c010c961 <__intr_save>:
__intr_save(void) {
c010c961:	55                   	push   %ebp
c010c962:	89 e5                	mov    %esp,%ebp
c010c964:	83 ec 18             	sub    $0x18,%esp
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010c967:	9c                   	pushf  
c010c968:	58                   	pop    %eax
c010c969:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010c96c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010c96f:	25 00 02 00 00       	and    $0x200,%eax
c010c974:	85 c0                	test   %eax,%eax
c010c976:	74 0c                	je     c010c984 <__intr_save+0x23>
        intr_disable();
c010c978:	e8 29 57 ff ff       	call   c01020a6 <intr_disable>
        return 1;
c010c97d:	b8 01 00 00 00       	mov    $0x1,%eax
c010c982:	eb 05                	jmp    c010c989 <__intr_save+0x28>
    return 0;
c010c984:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c989:	89 ec                	mov    %ebp,%esp
c010c98b:	5d                   	pop    %ebp
c010c98c:	c3                   	ret    

c010c98d <__intr_restore>:
__intr_restore(bool flag) {
c010c98d:	55                   	push   %ebp
c010c98e:	89 e5                	mov    %esp,%ebp
c010c990:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010c993:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c997:	74 05                	je     c010c99e <__intr_restore+0x11>
        intr_enable();
c010c999:	e8 00 57 ff ff       	call   c010209e <intr_enable>
}
c010c99e:	90                   	nop
c010c99f:	89 ec                	mov    %ebp,%esp
c010c9a1:	5d                   	pop    %ebp
c010c9a2:	c3                   	ret    

c010c9a3 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010c9a3:	55                   	push   %ebp
c010c9a4:	89 e5                	mov    %esp,%ebp
c010c9a6:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c9a9:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010c9ae:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c9b1:	74 1a                	je     c010c9cd <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010c9b3:	a1 5c f2 1c c0       	mov    0xc01cf25c,%eax
c010c9b8:	8b 40 08             	mov    0x8(%eax),%eax
c010c9bb:	8b 15 60 f2 1c c0    	mov    0xc01cf260,%edx
c010c9c1:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c9c4:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c9c8:	89 14 24             	mov    %edx,(%esp)
c010c9cb:	ff d0                	call   *%eax
    }
}
c010c9cd:	90                   	nop
c010c9ce:	89 ec                	mov    %ebp,%esp
c010c9d0:	5d                   	pop    %ebp
c010c9d1:	c3                   	ret    

c010c9d2 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010c9d2:	55                   	push   %ebp
c010c9d3:	89 e5                	mov    %esp,%ebp
c010c9d5:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010c9d8:	a1 5c f2 1c c0       	mov    0xc01cf25c,%eax
c010c9dd:	8b 40 0c             	mov    0xc(%eax),%eax
c010c9e0:	8b 15 60 f2 1c c0    	mov    0xc01cf260,%edx
c010c9e6:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c9e9:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c9ed:	89 14 24             	mov    %edx,(%esp)
c010c9f0:	ff d0                	call   *%eax
}
c010c9f2:	90                   	nop
c010c9f3:	89 ec                	mov    %ebp,%esp
c010c9f5:	5d                   	pop    %ebp
c010c9f6:	c3                   	ret    

c010c9f7 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010c9f7:	55                   	push   %ebp
c010c9f8:	89 e5                	mov    %esp,%ebp
c010c9fa:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010c9fd:	a1 5c f2 1c c0       	mov    0xc01cf25c,%eax
c010ca02:	8b 40 10             	mov    0x10(%eax),%eax
c010ca05:	8b 15 60 f2 1c c0    	mov    0xc01cf260,%edx
c010ca0b:	89 14 24             	mov    %edx,(%esp)
c010ca0e:	ff d0                	call   *%eax
}
c010ca10:	89 ec                	mov    %ebp,%esp
c010ca12:	5d                   	pop    %ebp
c010ca13:	c3                   	ret    

c010ca14 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010ca14:	55                   	push   %ebp
c010ca15:	89 e5                	mov    %esp,%ebp
c010ca17:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010ca1a:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010ca1f:	39 45 08             	cmp    %eax,0x8(%ebp)
c010ca22:	74 1c                	je     c010ca40 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010ca24:	a1 5c f2 1c c0       	mov    0xc01cf25c,%eax
c010ca29:	8b 40 14             	mov    0x14(%eax),%eax
c010ca2c:	8b 15 60 f2 1c c0    	mov    0xc01cf260,%edx
c010ca32:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010ca35:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010ca39:	89 14 24             	mov    %edx,(%esp)
c010ca3c:	ff d0                	call   *%eax
    }
    else {
        proc->need_resched = 1;
    }
}
c010ca3e:	eb 0a                	jmp    c010ca4a <sched_class_proc_tick+0x36>
        proc->need_resched = 1;
c010ca40:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca43:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
}
c010ca4a:	90                   	nop
c010ca4b:	89 ec                	mov    %ebp,%esp
c010ca4d:	5d                   	pop    %ebp
c010ca4e:	c3                   	ret    

c010ca4f <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010ca4f:	55                   	push   %ebp
c010ca50:	89 e5                	mov    %esp,%ebp
c010ca52:	83 ec 28             	sub    $0x28,%esp
c010ca55:	c7 45 f4 54 f2 1c c0 	movl   $0xc01cf254,-0xc(%ebp)
    elm->prev = elm->next = elm;
c010ca5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ca62:	89 50 04             	mov    %edx,0x4(%eax)
c010ca65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca68:	8b 50 04             	mov    0x4(%eax),%edx
c010ca6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca6e:	89 10                	mov    %edx,(%eax)
}
c010ca70:	90                   	nop
    list_init(&timer_list);
    extern struct sched_class default_sched_class1;
    sched_class = &default_sched_class;
c010ca71:	c7 05 5c f2 1c c0 a4 	movl   $0xc0139aa4,0xc01cf25c
c010ca78:	9a 13 c0 

    rq = &__rq;
c010ca7b:	c7 05 60 f2 1c c0 64 	movl   $0xc01cf264,0xc01cf260
c010ca82:	f2 1c c0 
    rq->max_time_slice = 5;
c010ca85:	a1 60 f2 1c c0       	mov    0xc01cf260,%eax
c010ca8a:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010ca91:	a1 5c f2 1c c0       	mov    0xc01cf25c,%eax
c010ca96:	8b 40 04             	mov    0x4(%eax),%eax
c010ca99:	8b 15 60 f2 1c c0    	mov    0xc01cf260,%edx
c010ca9f:	89 14 24             	mov    %edx,(%esp)
c010caa2:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010caa4:	a1 5c f2 1c c0       	mov    0xc01cf25c,%eax
c010caa9:	8b 00                	mov    (%eax),%eax
c010caab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010caaf:	c7 04 24 30 09 11 c0 	movl   $0xc0110930,(%esp)
c010cab6:	e8 b7 38 ff ff       	call   c0100372 <cprintf>
}
c010cabb:	90                   	nop
c010cabc:	89 ec                	mov    %ebp,%esp
c010cabe:	5d                   	pop    %ebp
c010cabf:	c3                   	ret    

c010cac0 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010cac0:	55                   	push   %ebp
c010cac1:	89 e5                	mov    %esp,%ebp
c010cac3:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010cac6:	8b 45 08             	mov    0x8(%ebp),%eax
c010cac9:	8b 00                	mov    (%eax),%eax
c010cacb:	83 f8 03             	cmp    $0x3,%eax
c010cace:	75 24                	jne    c010caf4 <wakeup_proc+0x34>
c010cad0:	c7 44 24 0c 41 09 11 	movl   $0xc0110941,0xc(%esp)
c010cad7:	c0 
c010cad8:	c7 44 24 08 5c 09 11 	movl   $0xc011095c,0x8(%esp)
c010cadf:	c0 
c010cae0:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010cae7:	00 
c010cae8:	c7 04 24 71 09 11 c0 	movl   $0xc0110971,(%esp)
c010caef:	e8 fc 42 ff ff       	call   c0100df0 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010caf4:	e8 68 fe ff ff       	call   c010c961 <__intr_save>
c010caf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010cafc:	8b 45 08             	mov    0x8(%ebp),%eax
c010caff:	8b 00                	mov    (%eax),%eax
c010cb01:	83 f8 02             	cmp    $0x2,%eax
c010cb04:	74 2d                	je     c010cb33 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010cb06:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb09:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010cb0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb12:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010cb19:	00 00 00 
            if (proc != current) {
c010cb1c:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010cb21:	39 45 08             	cmp    %eax,0x8(%ebp)
c010cb24:	74 29                	je     c010cb4f <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010cb26:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb29:	89 04 24             	mov    %eax,(%esp)
c010cb2c:	e8 72 fe ff ff       	call   c010c9a3 <sched_class_enqueue>
c010cb31:	eb 1c                	jmp    c010cb4f <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010cb33:	c7 44 24 08 87 09 11 	movl   $0xc0110987,0x8(%esp)
c010cb3a:	c0 
c010cb3b:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010cb42:	00 
c010cb43:	c7 04 24 71 09 11 c0 	movl   $0xc0110971,(%esp)
c010cb4a:	e8 1f 43 ff ff       	call   c0100e6e <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010cb4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb52:	89 04 24             	mov    %eax,(%esp)
c010cb55:	e8 33 fe ff ff       	call   c010c98d <__intr_restore>
}
c010cb5a:	90                   	nop
c010cb5b:	89 ec                	mov    %ebp,%esp
c010cb5d:	5d                   	pop    %ebp
c010cb5e:	c3                   	ret    

c010cb5f <schedule>:

void
schedule(void) {
c010cb5f:	55                   	push   %ebp
c010cb60:	89 e5                	mov    %esp,%ebp
c010cb62:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);  //inhibit interrupt
c010cb65:	e8 f7 fd ff ff       	call   c010c961 <__intr_save>
c010cb6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010cb6d:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010cb72:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010cb79:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010cb7e:	8b 00                	mov    (%eax),%eax
c010cb80:	83 f8 02             	cmp    $0x2,%eax
c010cb83:	75 0d                	jne    c010cb92 <schedule+0x33>
            //change from list search to function
            sched_class_enqueue(current);
c010cb85:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010cb8a:	89 04 24             	mov    %eax,(%esp)
c010cb8d:	e8 11 fe ff ff       	call   c010c9a3 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010cb92:	e8 60 fe ff ff       	call   c010c9f7 <sched_class_pick_next>
c010cb97:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cb9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cb9e:	74 0b                	je     c010cbab <schedule+0x4c>
            sched_class_dequeue(next);
c010cba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cba3:	89 04 24             	mov    %eax,(%esp)
c010cba6:	e8 27 fe ff ff       	call   c010c9d2 <sched_class_dequeue>
        }
        if (next == NULL) {
c010cbab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cbaf:	75 08                	jne    c010cbb9 <schedule+0x5a>
            next = idleproc;
c010cbb1:	a1 e8 d1 1c c0       	mov    0xc01cd1e8,%eax
c010cbb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010cbb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbbc:	8b 40 08             	mov    0x8(%eax),%eax
c010cbbf:	8d 50 01             	lea    0x1(%eax),%edx
c010cbc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbc5:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010cbc8:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010cbcd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010cbd0:	74 0b                	je     c010cbdd <schedule+0x7e>
            proc_run(next);
c010cbd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbd5:	89 04 24             	mov    %eax,(%esp)
c010cbd8:	e8 70 e0 ff ff       	call   c010ac4d <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010cbdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbe0:	89 04 24             	mov    %eax,(%esp)
c010cbe3:	e8 a5 fd ff ff       	call   c010c98d <__intr_restore>
}
c010cbe8:	90                   	nop
c010cbe9:	89 ec                	mov    %ebp,%esp
c010cbeb:	5d                   	pop    %ebp
c010cbec:	c3                   	ret    

c010cbed <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010cbed:	55                   	push   %ebp
c010cbee:	89 e5                	mov    %esp,%ebp
c010cbf0:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010cbf3:	e8 69 fd ff ff       	call   c010c961 <__intr_save>
c010cbf8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010cbfb:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbfe:	8b 00                	mov    (%eax),%eax
c010cc00:	85 c0                	test   %eax,%eax
c010cc02:	74 0a                	je     c010cc0e <add_timer+0x21>
c010cc04:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc07:	8b 40 04             	mov    0x4(%eax),%eax
c010cc0a:	85 c0                	test   %eax,%eax
c010cc0c:	75 24                	jne    c010cc32 <add_timer+0x45>
c010cc0e:	c7 44 24 0c a4 09 11 	movl   $0xc01109a4,0xc(%esp)
c010cc15:	c0 
c010cc16:	c7 44 24 08 5c 09 11 	movl   $0xc011095c,0x8(%esp)
c010cc1d:	c0 
c010cc1e:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010cc25:	00 
c010cc26:	c7 04 24 71 09 11 c0 	movl   $0xc0110971,(%esp)
c010cc2d:	e8 be 41 ff ff       	call   c0100df0 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010cc32:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc35:	83 c0 08             	add    $0x8,%eax
c010cc38:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return list->next == list;
c010cc3b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cc3e:	8b 40 04             	mov    0x4(%eax),%eax
c010cc41:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010cc44:	0f 94 c0             	sete   %al
c010cc47:	0f b6 c0             	movzbl %al,%eax
c010cc4a:	85 c0                	test   %eax,%eax
c010cc4c:	75 24                	jne    c010cc72 <add_timer+0x85>
c010cc4e:	c7 44 24 0c d0 09 11 	movl   $0xc01109d0,0xc(%esp)
c010cc55:	c0 
c010cc56:	c7 44 24 08 5c 09 11 	movl   $0xc011095c,0x8(%esp)
c010cc5d:	c0 
c010cc5e:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c010cc65:	00 
c010cc66:	c7 04 24 71 09 11 c0 	movl   $0xc0110971,(%esp)
c010cc6d:	e8 7e 41 ff ff       	call   c0100df0 <__panic>
c010cc72:	c7 45 e4 54 f2 1c c0 	movl   $0xc01cf254,-0x1c(%ebp)
    return listelm->next;
c010cc79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cc7c:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010cc7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010cc82:	eb 4a                	jmp    c010ccce <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010cc84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc87:	83 e8 08             	sub    $0x8,%eax
c010cc8a:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010cc8d:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc90:	8b 10                	mov    (%eax),%edx
c010cc92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc95:	8b 00                	mov    (%eax),%eax
c010cc97:	39 c2                	cmp    %eax,%edx
c010cc99:	73 13                	jae    c010ccae <add_timer+0xc1>
                next->expires -= timer->expires;
c010cc9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc9e:	8b 10                	mov    (%eax),%edx
c010cca0:	8b 45 08             	mov    0x8(%ebp),%eax
c010cca3:	8b 00                	mov    (%eax),%eax
c010cca5:	29 c2                	sub    %eax,%edx
c010cca7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ccaa:	89 10                	mov    %edx,(%eax)
                break;
c010ccac:	eb 29                	jmp    c010ccd7 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010ccae:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccb1:	8b 10                	mov    (%eax),%edx
c010ccb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ccb6:	8b 00                	mov    (%eax),%eax
c010ccb8:	29 c2                	sub    %eax,%edx
c010ccba:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccbd:	89 10                	mov    %edx,(%eax)
c010ccbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccc2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ccc5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ccc8:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010cccb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010ccce:	81 7d f4 54 f2 1c c0 	cmpl   $0xc01cf254,-0xc(%ebp)
c010ccd5:	75 ad                	jne    c010cc84 <add_timer+0x97>
        }
        list_add_before(le, &(timer->timer_link));
c010ccd7:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccda:	8d 50 08             	lea    0x8(%eax),%edx
c010ccdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cce0:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010cce3:	89 55 d8             	mov    %edx,-0x28(%ebp)
    __list_add(elm, listelm->prev, listelm);
c010cce6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cce9:	8b 00                	mov    (%eax),%eax
c010cceb:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ccee:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010ccf1:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010ccf4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ccf7:	89 45 cc             	mov    %eax,-0x34(%ebp)
    prev->next = next->prev = elm;
c010ccfa:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010ccfd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cd00:	89 10                	mov    %edx,(%eax)
c010cd02:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010cd05:	8b 10                	mov    (%eax),%edx
c010cd07:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cd0a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010cd0d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cd10:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010cd13:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010cd16:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cd19:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010cd1c:	89 10                	mov    %edx,(%eax)
}
c010cd1e:	90                   	nop
}
c010cd1f:	90                   	nop
    }
    local_intr_restore(intr_flag);
c010cd20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd23:	89 04 24             	mov    %eax,(%esp)
c010cd26:	e8 62 fc ff ff       	call   c010c98d <__intr_restore>
}
c010cd2b:	90                   	nop
c010cd2c:	89 ec                	mov    %ebp,%esp
c010cd2e:	5d                   	pop    %ebp
c010cd2f:	c3                   	ret    

c010cd30 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010cd30:	55                   	push   %ebp
c010cd31:	89 e5                	mov    %esp,%ebp
c010cd33:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010cd36:	e8 26 fc ff ff       	call   c010c961 <__intr_save>
c010cd3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010cd3e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd41:	83 c0 08             	add    $0x8,%eax
c010cd44:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return list->next == list;
c010cd47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd4a:	8b 40 04             	mov    0x4(%eax),%eax
c010cd4d:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010cd50:	0f 94 c0             	sete   %al
c010cd53:	0f b6 c0             	movzbl %al,%eax
c010cd56:	85 c0                	test   %eax,%eax
c010cd58:	0f 85 8d 00 00 00    	jne    c010cdeb <del_timer+0xbb>
            if (timer->expires != 0) {
c010cd5e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd61:	8b 00                	mov    (%eax),%eax
c010cd63:	85 c0                	test   %eax,%eax
c010cd65:	74 35                	je     c010cd9c <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010cd67:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd6a:	83 c0 08             	add    $0x8,%eax
c010cd6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return listelm->next;
c010cd70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cd73:	8b 40 04             	mov    0x4(%eax),%eax
c010cd76:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010cd79:	81 7d f0 54 f2 1c c0 	cmpl   $0xc01cf254,-0x10(%ebp)
c010cd80:	74 1a                	je     c010cd9c <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010cd82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd85:	83 e8 08             	sub    $0x8,%eax
c010cd88:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010cd8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd8e:	8b 10                	mov    (%eax),%edx
c010cd90:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd93:	8b 00                	mov    (%eax),%eax
c010cd95:	01 c2                	add    %eax,%edx
c010cd97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd9a:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010cd9c:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd9f:	83 c0 08             	add    $0x8,%eax
c010cda2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cda5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cda8:	89 45 dc             	mov    %eax,-0x24(%ebp)
    __list_del(listelm->prev, listelm->next);
c010cdab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cdae:	8b 40 04             	mov    0x4(%eax),%eax
c010cdb1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010cdb4:	8b 12                	mov    (%edx),%edx
c010cdb6:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010cdb9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    prev->next = next;
c010cdbc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cdbf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cdc2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010cdc5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cdc8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010cdcb:	89 10                	mov    %edx,(%eax)
}
c010cdcd:	90                   	nop
}
c010cdce:	90                   	nop
c010cdcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cdd2:	89 45 d0             	mov    %eax,-0x30(%ebp)
    elm->prev = elm->next = elm;
c010cdd5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cdd8:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010cddb:	89 50 04             	mov    %edx,0x4(%eax)
c010cdde:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cde1:	8b 50 04             	mov    0x4(%eax),%edx
c010cde4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cde7:	89 10                	mov    %edx,(%eax)
}
c010cde9:	90                   	nop
}
c010cdea:	90                   	nop
        }
    }
    local_intr_restore(intr_flag);
c010cdeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdee:	89 04 24             	mov    %eax,(%esp)
c010cdf1:	e8 97 fb ff ff       	call   c010c98d <__intr_restore>
}
c010cdf6:	90                   	nop
c010cdf7:	89 ec                	mov    %ebp,%esp
c010cdf9:	5d                   	pop    %ebp
c010cdfa:	c3                   	ret    

c010cdfb <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010cdfb:	55                   	push   %ebp
c010cdfc:	89 e5                	mov    %esp,%ebp
c010cdfe:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010ce01:	e8 5b fb ff ff       	call   c010c961 <__intr_save>
c010ce06:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ce09:	c7 45 e4 54 f2 1c c0 	movl   $0xc01cf254,-0x1c(%ebp)
    return listelm->next;
c010ce10:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ce13:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010ce16:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010ce19:	81 7d f4 54 f2 1c c0 	cmpl   $0xc01cf254,-0xc(%ebp)
c010ce20:	0f 84 fc 00 00 00    	je     c010cf22 <run_timer_list+0x127>
            timer_t *timer = le2timer(le, timer_link);
c010ce26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce29:	83 e8 08             	sub    $0x8,%eax
c010ce2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010ce2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce32:	8b 00                	mov    (%eax),%eax
c010ce34:	85 c0                	test   %eax,%eax
c010ce36:	75 24                	jne    c010ce5c <run_timer_list+0x61>
c010ce38:	c7 44 24 0c f1 09 11 	movl   $0xc01109f1,0xc(%esp)
c010ce3f:	c0 
c010ce40:	c7 44 24 08 5c 09 11 	movl   $0xc011095c,0x8(%esp)
c010ce47:	c0 
c010ce48:	c7 44 24 04 9b 00 00 	movl   $0x9b,0x4(%esp)
c010ce4f:	00 
c010ce50:	c7 04 24 71 09 11 c0 	movl   $0xc0110971,(%esp)
c010ce57:	e8 94 3f ff ff       	call   c0100df0 <__panic>
            timer->expires --;
c010ce5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce5f:	8b 00                	mov    (%eax),%eax
c010ce61:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ce64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce67:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010ce69:	e9 a4 00 00 00       	jmp    c010cf12 <run_timer_list+0x117>
c010ce6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce71:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ce74:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ce77:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010ce7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010ce7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce80:	8b 40 04             	mov    0x4(%eax),%eax
c010ce83:	89 45 e8             	mov    %eax,-0x18(%ebp)
                //a small check to wait_state
                if (proc->wait_state != 0) {
c010ce86:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ce89:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ce8f:	85 c0                	test   %eax,%eax
c010ce91:	74 31                	je     c010cec4 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010ce93:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ce96:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ce9c:	85 c0                	test   %eax,%eax
c010ce9e:	78 4a                	js     c010ceea <run_timer_list+0xef>
c010cea0:	c7 44 24 0c 08 0a 11 	movl   $0xc0110a08,0xc(%esp)
c010cea7:	c0 
c010cea8:	c7 44 24 08 5c 09 11 	movl   $0xc011095c,0x8(%esp)
c010ceaf:	c0 
c010ceb0:	c7 44 24 04 a2 00 00 	movl   $0xa2,0x4(%esp)
c010ceb7:	00 
c010ceb8:	c7 04 24 71 09 11 c0 	movl   $0xc0110971,(%esp)
c010cebf:	e8 2c 3f ff ff       	call   c0100df0 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010cec4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cec7:	8b 40 04             	mov    0x4(%eax),%eax
c010ceca:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cece:	c7 44 24 08 2c 0a 11 	movl   $0xc0110a2c,0x8(%esp)
c010ced5:	c0 
c010ced6:	c7 44 24 04 a5 00 00 	movl   $0xa5,0x4(%esp)
c010cedd:	00 
c010cede:	c7 04 24 71 09 11 c0 	movl   $0xc0110971,(%esp)
c010cee5:	e8 84 3f ff ff       	call   c0100e6e <__warn>
                }
                wakeup_proc(proc);
c010ceea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ceed:	89 04 24             	mov    %eax,(%esp)
c010cef0:	e8 cb fb ff ff       	call   c010cac0 <wakeup_proc>
                del_timer(timer);
c010cef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cef8:	89 04 24             	mov    %eax,(%esp)
c010cefb:	e8 30 fe ff ff       	call   c010cd30 <del_timer>
                if (le == &timer_list) {
c010cf00:	81 7d f4 54 f2 1c c0 	cmpl   $0xc01cf254,-0xc(%ebp)
c010cf07:	74 18                	je     c010cf21 <run_timer_list+0x126>
                    break;
                }
                timer = le2timer(le, timer_link);
c010cf09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf0c:	83 e8 08             	sub    $0x8,%eax
c010cf0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while (timer->expires == 0) {
c010cf12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf15:	8b 00                	mov    (%eax),%eax
c010cf17:	85 c0                	test   %eax,%eax
c010cf19:	0f 84 4f ff ff ff    	je     c010ce6e <run_timer_list+0x73>
c010cf1f:	eb 01                	jmp    c010cf22 <run_timer_list+0x127>
                    break;
c010cf21:	90                   	nop
            }
        }
        sched_class_proc_tick(current);
c010cf22:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010cf27:	89 04 24             	mov    %eax,(%esp)
c010cf2a:	e8 e5 fa ff ff       	call   c010ca14 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010cf2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cf32:	89 04 24             	mov    %eax,(%esp)
c010cf35:	e8 53 fa ff ff       	call   c010c98d <__intr_restore>
}
c010cf3a:	90                   	nop
c010cf3b:	89 ec                	mov    %ebp,%esp
c010cf3d:	5d                   	pop    %ebp
c010cf3e:	c3                   	ret    

c010cf3f <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010cf3f:	55                   	push   %ebp
c010cf40:	89 e5                	mov    %esp,%ebp
c010cf42:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010cf45:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf48:	8b 00                	mov    (%eax),%eax
c010cf4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010cf4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf50:	89 04 24             	mov    %eax,(%esp)
c010cf53:	e8 c6 e3 ff ff       	call   c010b31e <do_exit>
}
c010cf58:	89 ec                	mov    %ebp,%esp
c010cf5a:	5d                   	pop    %ebp
c010cf5b:	c3                   	ret    

c010cf5c <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010cf5c:	55                   	push   %ebp
c010cf5d:	89 e5                	mov    %esp,%ebp
c010cf5f:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010cf62:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010cf67:	8b 40 3c             	mov    0x3c(%eax),%eax
c010cf6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010cf6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf70:	8b 40 44             	mov    0x44(%eax),%eax
c010cf73:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010cf76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf79:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cf7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf80:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf84:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010cf8b:	e8 3d e2 ff ff       	call   c010b1cd <do_fork>
}
c010cf90:	89 ec                	mov    %ebp,%esp
c010cf92:	5d                   	pop    %ebp
c010cf93:	c3                   	ret    

c010cf94 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010cf94:	55                   	push   %ebp
c010cf95:	89 e5                	mov    %esp,%ebp
c010cf97:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010cf9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf9d:	8b 00                	mov    (%eax),%eax
c010cf9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010cfa2:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfa5:	83 c0 04             	add    $0x4,%eax
c010cfa8:	8b 00                	mov    (%eax),%eax
c010cfaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010cfad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cfb0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cfb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cfb7:	89 04 24             	mov    %eax,(%esp)
c010cfba:	e8 14 ed ff ff       	call   c010bcd3 <do_wait>
}
c010cfbf:	89 ec                	mov    %ebp,%esp
c010cfc1:	5d                   	pop    %ebp
c010cfc2:	c3                   	ret    

c010cfc3 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010cfc3:	55                   	push   %ebp
c010cfc4:	89 e5                	mov    %esp,%ebp
c010cfc6:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010cfc9:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfcc:	8b 00                	mov    (%eax),%eax
c010cfce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010cfd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfd4:	83 c0 04             	add    $0x4,%eax
c010cfd7:	8b 00                	mov    (%eax),%eax
c010cfd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010cfdc:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfdf:	83 c0 08             	add    $0x8,%eax
c010cfe2:	8b 00                	mov    (%eax),%eax
c010cfe4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010cfe7:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfea:	83 c0 0c             	add    $0xc,%eax
c010cfed:	8b 00                	mov    (%eax),%eax
c010cfef:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010cff2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cff5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cff9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cffc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d000:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d003:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d007:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d00a:	89 04 24             	mov    %eax,(%esp)
c010d00d:	e8 70 eb ff ff       	call   c010bb82 <do_execve>
}
c010d012:	89 ec                	mov    %ebp,%esp
c010d014:	5d                   	pop    %ebp
c010d015:	c3                   	ret    

c010d016 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010d016:	55                   	push   %ebp
c010d017:	89 e5                	mov    %esp,%ebp
c010d019:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010d01c:	e8 9c ec ff ff       	call   c010bcbd <do_yield>
}
c010d021:	89 ec                	mov    %ebp,%esp
c010d023:	5d                   	pop    %ebp
c010d024:	c3                   	ret    

c010d025 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010d025:	55                   	push   %ebp
c010d026:	89 e5                	mov    %esp,%ebp
c010d028:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010d02b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d02e:	8b 00                	mov    (%eax),%eax
c010d030:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010d033:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d036:	89 04 24             	mov    %eax,(%esp)
c010d039:	e8 36 ee ff ff       	call   c010be74 <do_kill>
}
c010d03e:	89 ec                	mov    %ebp,%esp
c010d040:	5d                   	pop    %ebp
c010d041:	c3                   	ret    

c010d042 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010d042:	55                   	push   %ebp
c010d043:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010d045:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010d04a:	8b 40 04             	mov    0x4(%eax),%eax
}
c010d04d:	5d                   	pop    %ebp
c010d04e:	c3                   	ret    

c010d04f <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010d04f:	55                   	push   %ebp
c010d050:	89 e5                	mov    %esp,%ebp
c010d052:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010d055:	8b 45 08             	mov    0x8(%ebp),%eax
c010d058:	8b 00                	mov    (%eax),%eax
c010d05a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010d05d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d060:	89 04 24             	mov    %eax,(%esp)
c010d063:	e8 32 33 ff ff       	call   c010039a <cputchar>
    return 0;
c010d068:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d06d:	89 ec                	mov    %ebp,%esp
c010d06f:	5d                   	pop    %ebp
c010d070:	c3                   	ret    

c010d071 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010d071:	55                   	push   %ebp
c010d072:	89 e5                	mov    %esp,%ebp
c010d074:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010d077:	e8 0c 9d ff ff       	call   c0106d88 <print_pgdir>
    return 0;
c010d07c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d081:	89 ec                	mov    %ebp,%esp
c010d083:	5d                   	pop    %ebp
c010d084:	c3                   	ret    

c010d085 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010d085:	55                   	push   %ebp
c010d086:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010d088:	a1 24 c4 1c c0       	mov    0xc01cc424,%eax
}
c010d08d:	5d                   	pop    %ebp
c010d08e:	c3                   	ret    

c010d08f <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010d08f:	55                   	push   %ebp
c010d090:	89 e5                	mov    %esp,%ebp
c010d092:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010d095:	8b 45 08             	mov    0x8(%ebp),%eax
c010d098:	8b 00                	mov    (%eax),%eax
c010d09a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010d09d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d0a0:	89 04 24             	mov    %eax,(%esp)
c010d0a3:	e8 3c f2 ff ff       	call   c010c2e4 <lab6_set_priority>
    return 0;
c010d0a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d0ad:	89 ec                	mov    %ebp,%esp
c010d0af:	5d                   	pop    %ebp
c010d0b0:	c3                   	ret    

c010d0b1 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010d0b1:	55                   	push   %ebp
c010d0b2:	89 e5                	mov    %esp,%ebp
c010d0b4:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010d0b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0ba:	8b 00                	mov    (%eax),%eax
c010d0bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010d0bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d0c2:	89 04 24             	mov    %eax,(%esp)
c010d0c5:	e8 45 f2 ff ff       	call   c010c30f <do_sleep>
}
c010d0ca:	89 ec                	mov    %ebp,%esp
c010d0cc:	5d                   	pop    %ebp
c010d0cd:	c3                   	ret    

c010d0ce <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010d0ce:	55                   	push   %ebp
c010d0cf:	89 e5                	mov    %esp,%ebp
c010d0d1:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010d0d4:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010d0d9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d0dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010d0df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d0e2:	8b 40 1c             	mov    0x1c(%eax),%eax
c010d0e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010d0e8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d0ec:	78 60                	js     c010d14e <syscall+0x80>
c010d0ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d0f1:	3d ff 00 00 00       	cmp    $0xff,%eax
c010d0f6:	77 56                	ja     c010d14e <syscall+0x80>
        if (syscalls[num] != NULL) {
c010d0f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d0fb:	8b 04 85 c0 9a 13 c0 	mov    -0x3fec6540(,%eax,4),%eax
c010d102:	85 c0                	test   %eax,%eax
c010d104:	74 48                	je     c010d14e <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010d106:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d109:	8b 40 14             	mov    0x14(%eax),%eax
c010d10c:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010d10f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d112:	8b 40 18             	mov    0x18(%eax),%eax
c010d115:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010d118:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d11b:	8b 40 10             	mov    0x10(%eax),%eax
c010d11e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010d121:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d124:	8b 00                	mov    (%eax),%eax
c010d126:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010d129:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d12c:	8b 40 04             	mov    0x4(%eax),%eax
c010d12f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010d132:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d135:	8b 04 85 c0 9a 13 c0 	mov    -0x3fec6540(,%eax,4),%eax
c010d13c:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010d13f:	89 14 24             	mov    %edx,(%esp)
c010d142:	ff d0                	call   *%eax
c010d144:	89 c2                	mov    %eax,%edx
c010d146:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d149:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010d14c:	eb 46                	jmp    c010d194 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010d14e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d151:	89 04 24             	mov    %eax,(%esp)
c010d154:	e8 87 53 ff ff       	call   c01024e0 <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010d159:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010d15e:	8d 50 48             	lea    0x48(%eax),%edx
c010d161:	a1 f0 d1 1c c0       	mov    0xc01cd1f0,%eax
c010d166:	8b 40 04             	mov    0x4(%eax),%eax
c010d169:	89 54 24 14          	mov    %edx,0x14(%esp)
c010d16d:	89 44 24 10          	mov    %eax,0x10(%esp)
c010d171:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d174:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d178:	c7 44 24 08 4c 0a 11 	movl   $0xc0110a4c,0x8(%esp)
c010d17f:	c0 
c010d180:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c010d187:	00 
c010d188:	c7 04 24 78 0a 11 c0 	movl   $0xc0110a78,(%esp)
c010d18f:	e8 5c 3c ff ff       	call   c0100df0 <__panic>
            num, current->pid, current->name);
}
c010d194:	89 ec                	mov    %ebp,%esp
c010d196:	5d                   	pop    %ebp
c010d197:	c3                   	ret    

c010d198 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010d198:	55                   	push   %ebp
c010d199:	89 e5                	mov    %esp,%ebp
c010d19b:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010d19e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1a1:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010d1a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010d1aa:	b8 20 00 00 00       	mov    $0x20,%eax
c010d1af:	2b 45 0c             	sub    0xc(%ebp),%eax
c010d1b2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010d1b5:	88 c1                	mov    %al,%cl
c010d1b7:	d3 ea                	shr    %cl,%edx
c010d1b9:	89 d0                	mov    %edx,%eax
}
c010d1bb:	89 ec                	mov    %ebp,%esp
c010d1bd:	5d                   	pop    %ebp
c010d1be:	c3                   	ret    

c010d1bf <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010d1bf:	55                   	push   %ebp
c010d1c0:	89 e5                	mov    %esp,%ebp
c010d1c2:	83 ec 58             	sub    $0x58,%esp
c010d1c5:	8b 45 10             	mov    0x10(%ebp),%eax
c010d1c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010d1cb:	8b 45 14             	mov    0x14(%ebp),%eax
c010d1ce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010d1d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d1d4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d1d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d1da:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010d1dd:	8b 45 18             	mov    0x18(%ebp),%eax
c010d1e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d1e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d1e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d1e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d1ec:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010d1ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d1f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d1f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d1f9:	74 1c                	je     c010d217 <printnum+0x58>
c010d1fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d1fe:	ba 00 00 00 00       	mov    $0x0,%edx
c010d203:	f7 75 e4             	divl   -0x1c(%ebp)
c010d206:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010d209:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d20c:	ba 00 00 00 00       	mov    $0x0,%edx
c010d211:	f7 75 e4             	divl   -0x1c(%ebp)
c010d214:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d217:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d21a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d21d:	f7 75 e4             	divl   -0x1c(%ebp)
c010d220:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d223:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010d226:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d229:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d22c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d22f:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010d232:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d235:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010d238:	8b 45 18             	mov    0x18(%ebp),%eax
c010d23b:	ba 00 00 00 00       	mov    $0x0,%edx
c010d240:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010d243:	39 45 d0             	cmp    %eax,-0x30(%ebp)
c010d246:	19 d1                	sbb    %edx,%ecx
c010d248:	72 4c                	jb     c010d296 <printnum+0xd7>
        printnum(putch, putdat, result, base, width - 1, padc);
c010d24a:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010d24d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d250:	8b 45 20             	mov    0x20(%ebp),%eax
c010d253:	89 44 24 18          	mov    %eax,0x18(%esp)
c010d257:	89 54 24 14          	mov    %edx,0x14(%esp)
c010d25b:	8b 45 18             	mov    0x18(%ebp),%eax
c010d25e:	89 44 24 10          	mov    %eax,0x10(%esp)
c010d262:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d265:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d268:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d26c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010d270:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d273:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d277:	8b 45 08             	mov    0x8(%ebp),%eax
c010d27a:	89 04 24             	mov    %eax,(%esp)
c010d27d:	e8 3d ff ff ff       	call   c010d1bf <printnum>
c010d282:	eb 1b                	jmp    c010d29f <printnum+0xe0>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010d284:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d287:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d28b:	8b 45 20             	mov    0x20(%ebp),%eax
c010d28e:	89 04 24             	mov    %eax,(%esp)
c010d291:	8b 45 08             	mov    0x8(%ebp),%eax
c010d294:	ff d0                	call   *%eax
        while (-- width > 0)
c010d296:	ff 4d 1c             	decl   0x1c(%ebp)
c010d299:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010d29d:	7f e5                	jg     c010d284 <printnum+0xc5>
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010d29f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d2a2:	05 a4 0b 11 c0       	add    $0xc0110ba4,%eax
c010d2a7:	0f b6 00             	movzbl (%eax),%eax
c010d2aa:	0f be c0             	movsbl %al,%eax
c010d2ad:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d2b0:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d2b4:	89 04 24             	mov    %eax,(%esp)
c010d2b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2ba:	ff d0                	call   *%eax
}
c010d2bc:	90                   	nop
c010d2bd:	89 ec                	mov    %ebp,%esp
c010d2bf:	5d                   	pop    %ebp
c010d2c0:	c3                   	ret    

c010d2c1 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010d2c1:	55                   	push   %ebp
c010d2c2:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010d2c4:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010d2c8:	7e 14                	jle    c010d2de <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010d2ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2cd:	8b 00                	mov    (%eax),%eax
c010d2cf:	8d 48 08             	lea    0x8(%eax),%ecx
c010d2d2:	8b 55 08             	mov    0x8(%ebp),%edx
c010d2d5:	89 0a                	mov    %ecx,(%edx)
c010d2d7:	8b 50 04             	mov    0x4(%eax),%edx
c010d2da:	8b 00                	mov    (%eax),%eax
c010d2dc:	eb 30                	jmp    c010d30e <getuint+0x4d>
    }
    else if (lflag) {
c010d2de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d2e2:	74 16                	je     c010d2fa <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010d2e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2e7:	8b 00                	mov    (%eax),%eax
c010d2e9:	8d 48 04             	lea    0x4(%eax),%ecx
c010d2ec:	8b 55 08             	mov    0x8(%ebp),%edx
c010d2ef:	89 0a                	mov    %ecx,(%edx)
c010d2f1:	8b 00                	mov    (%eax),%eax
c010d2f3:	ba 00 00 00 00       	mov    $0x0,%edx
c010d2f8:	eb 14                	jmp    c010d30e <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010d2fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2fd:	8b 00                	mov    (%eax),%eax
c010d2ff:	8d 48 04             	lea    0x4(%eax),%ecx
c010d302:	8b 55 08             	mov    0x8(%ebp),%edx
c010d305:	89 0a                	mov    %ecx,(%edx)
c010d307:	8b 00                	mov    (%eax),%eax
c010d309:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010d30e:	5d                   	pop    %ebp
c010d30f:	c3                   	ret    

c010d310 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010d310:	55                   	push   %ebp
c010d311:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010d313:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010d317:	7e 14                	jle    c010d32d <getint+0x1d>
        return va_arg(*ap, long long);
c010d319:	8b 45 08             	mov    0x8(%ebp),%eax
c010d31c:	8b 00                	mov    (%eax),%eax
c010d31e:	8d 48 08             	lea    0x8(%eax),%ecx
c010d321:	8b 55 08             	mov    0x8(%ebp),%edx
c010d324:	89 0a                	mov    %ecx,(%edx)
c010d326:	8b 50 04             	mov    0x4(%eax),%edx
c010d329:	8b 00                	mov    (%eax),%eax
c010d32b:	eb 28                	jmp    c010d355 <getint+0x45>
    }
    else if (lflag) {
c010d32d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d331:	74 12                	je     c010d345 <getint+0x35>
        return va_arg(*ap, long);
c010d333:	8b 45 08             	mov    0x8(%ebp),%eax
c010d336:	8b 00                	mov    (%eax),%eax
c010d338:	8d 48 04             	lea    0x4(%eax),%ecx
c010d33b:	8b 55 08             	mov    0x8(%ebp),%edx
c010d33e:	89 0a                	mov    %ecx,(%edx)
c010d340:	8b 00                	mov    (%eax),%eax
c010d342:	99                   	cltd   
c010d343:	eb 10                	jmp    c010d355 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010d345:	8b 45 08             	mov    0x8(%ebp),%eax
c010d348:	8b 00                	mov    (%eax),%eax
c010d34a:	8d 48 04             	lea    0x4(%eax),%ecx
c010d34d:	8b 55 08             	mov    0x8(%ebp),%edx
c010d350:	89 0a                	mov    %ecx,(%edx)
c010d352:	8b 00                	mov    (%eax),%eax
c010d354:	99                   	cltd   
    }
}
c010d355:	5d                   	pop    %ebp
c010d356:	c3                   	ret    

c010d357 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010d357:	55                   	push   %ebp
c010d358:	89 e5                	mov    %esp,%ebp
c010d35a:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010d35d:	8d 45 14             	lea    0x14(%ebp),%eax
c010d360:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010d363:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d366:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d36a:	8b 45 10             	mov    0x10(%ebp),%eax
c010d36d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d371:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d374:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d378:	8b 45 08             	mov    0x8(%ebp),%eax
c010d37b:	89 04 24             	mov    %eax,(%esp)
c010d37e:	e8 05 00 00 00       	call   c010d388 <vprintfmt>
    va_end(ap);
}
c010d383:	90                   	nop
c010d384:	89 ec                	mov    %ebp,%esp
c010d386:	5d                   	pop    %ebp
c010d387:	c3                   	ret    

c010d388 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010d388:	55                   	push   %ebp
c010d389:	89 e5                	mov    %esp,%ebp
c010d38b:	56                   	push   %esi
c010d38c:	53                   	push   %ebx
c010d38d:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d390:	eb 17                	jmp    c010d3a9 <vprintfmt+0x21>
            if (ch == '\0') {
c010d392:	85 db                	test   %ebx,%ebx
c010d394:	0f 84 bf 03 00 00    	je     c010d759 <vprintfmt+0x3d1>
                return;
            }
            putch(ch, putdat);
c010d39a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d39d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d3a1:	89 1c 24             	mov    %ebx,(%esp)
c010d3a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3a7:	ff d0                	call   *%eax
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d3a9:	8b 45 10             	mov    0x10(%ebp),%eax
c010d3ac:	8d 50 01             	lea    0x1(%eax),%edx
c010d3af:	89 55 10             	mov    %edx,0x10(%ebp)
c010d3b2:	0f b6 00             	movzbl (%eax),%eax
c010d3b5:	0f b6 d8             	movzbl %al,%ebx
c010d3b8:	83 fb 25             	cmp    $0x25,%ebx
c010d3bb:	75 d5                	jne    c010d392 <vprintfmt+0xa>
        }

        // Process a %-escape sequence
        char padc = ' ';
c010d3bd:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010d3c1:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010d3c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d3cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010d3ce:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010d3d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d3d8:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010d3db:	8b 45 10             	mov    0x10(%ebp),%eax
c010d3de:	8d 50 01             	lea    0x1(%eax),%edx
c010d3e1:	89 55 10             	mov    %edx,0x10(%ebp)
c010d3e4:	0f b6 00             	movzbl (%eax),%eax
c010d3e7:	0f b6 d8             	movzbl %al,%ebx
c010d3ea:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010d3ed:	83 f8 55             	cmp    $0x55,%eax
c010d3f0:	0f 87 37 03 00 00    	ja     c010d72d <vprintfmt+0x3a5>
c010d3f6:	8b 04 85 c8 0b 11 c0 	mov    -0x3feef438(,%eax,4),%eax
c010d3fd:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010d3ff:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010d403:	eb d6                	jmp    c010d3db <vprintfmt+0x53>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010d405:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010d409:	eb d0                	jmp    c010d3db <vprintfmt+0x53>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010d40b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010d412:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d415:	89 d0                	mov    %edx,%eax
c010d417:	c1 e0 02             	shl    $0x2,%eax
c010d41a:	01 d0                	add    %edx,%eax
c010d41c:	01 c0                	add    %eax,%eax
c010d41e:	01 d8                	add    %ebx,%eax
c010d420:	83 e8 30             	sub    $0x30,%eax
c010d423:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010d426:	8b 45 10             	mov    0x10(%ebp),%eax
c010d429:	0f b6 00             	movzbl (%eax),%eax
c010d42c:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010d42f:	83 fb 2f             	cmp    $0x2f,%ebx
c010d432:	7e 38                	jle    c010d46c <vprintfmt+0xe4>
c010d434:	83 fb 39             	cmp    $0x39,%ebx
c010d437:	7f 33                	jg     c010d46c <vprintfmt+0xe4>
            for (precision = 0; ; ++ fmt) {
c010d439:	ff 45 10             	incl   0x10(%ebp)
                precision = precision * 10 + ch - '0';
c010d43c:	eb d4                	jmp    c010d412 <vprintfmt+0x8a>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010d43e:	8b 45 14             	mov    0x14(%ebp),%eax
c010d441:	8d 50 04             	lea    0x4(%eax),%edx
c010d444:	89 55 14             	mov    %edx,0x14(%ebp)
c010d447:	8b 00                	mov    (%eax),%eax
c010d449:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010d44c:	eb 1f                	jmp    c010d46d <vprintfmt+0xe5>

        case '.':
            if (width < 0)
c010d44e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d452:	79 87                	jns    c010d3db <vprintfmt+0x53>
                width = 0;
c010d454:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010d45b:	e9 7b ff ff ff       	jmp    c010d3db <vprintfmt+0x53>

        case '#':
            altflag = 1;
c010d460:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010d467:	e9 6f ff ff ff       	jmp    c010d3db <vprintfmt+0x53>
            goto process_precision;
c010d46c:	90                   	nop

        process_precision:
            if (width < 0)
c010d46d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d471:	0f 89 64 ff ff ff    	jns    c010d3db <vprintfmt+0x53>
                width = precision, precision = -1;
c010d477:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d47a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d47d:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010d484:	e9 52 ff ff ff       	jmp    c010d3db <vprintfmt+0x53>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010d489:	ff 45 e0             	incl   -0x20(%ebp)
            goto reswitch;
c010d48c:	e9 4a ff ff ff       	jmp    c010d3db <vprintfmt+0x53>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010d491:	8b 45 14             	mov    0x14(%ebp),%eax
c010d494:	8d 50 04             	lea    0x4(%eax),%edx
c010d497:	89 55 14             	mov    %edx,0x14(%ebp)
c010d49a:	8b 00                	mov    (%eax),%eax
c010d49c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d49f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d4a3:	89 04 24             	mov    %eax,(%esp)
c010d4a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4a9:	ff d0                	call   *%eax
            break;
c010d4ab:	e9 a4 02 00 00       	jmp    c010d754 <vprintfmt+0x3cc>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010d4b0:	8b 45 14             	mov    0x14(%ebp),%eax
c010d4b3:	8d 50 04             	lea    0x4(%eax),%edx
c010d4b6:	89 55 14             	mov    %edx,0x14(%ebp)
c010d4b9:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010d4bb:	85 db                	test   %ebx,%ebx
c010d4bd:	79 02                	jns    c010d4c1 <vprintfmt+0x139>
                err = -err;
c010d4bf:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010d4c1:	83 fb 18             	cmp    $0x18,%ebx
c010d4c4:	7f 0b                	jg     c010d4d1 <vprintfmt+0x149>
c010d4c6:	8b 34 9d 40 0b 11 c0 	mov    -0x3feef4c0(,%ebx,4),%esi
c010d4cd:	85 f6                	test   %esi,%esi
c010d4cf:	75 23                	jne    c010d4f4 <vprintfmt+0x16c>
                printfmt(putch, putdat, "error %d", err);
c010d4d1:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010d4d5:	c7 44 24 08 b5 0b 11 	movl   $0xc0110bb5,0x8(%esp)
c010d4dc:	c0 
c010d4dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4e0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d4e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4e7:	89 04 24             	mov    %eax,(%esp)
c010d4ea:	e8 68 fe ff ff       	call   c010d357 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010d4ef:	e9 60 02 00 00       	jmp    c010d754 <vprintfmt+0x3cc>
                printfmt(putch, putdat, "%s", p);
c010d4f4:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d4f8:	c7 44 24 08 be 0b 11 	movl   $0xc0110bbe,0x8(%esp)
c010d4ff:	c0 
c010d500:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d503:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d507:	8b 45 08             	mov    0x8(%ebp),%eax
c010d50a:	89 04 24             	mov    %eax,(%esp)
c010d50d:	e8 45 fe ff ff       	call   c010d357 <printfmt>
            break;
c010d512:	e9 3d 02 00 00       	jmp    c010d754 <vprintfmt+0x3cc>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010d517:	8b 45 14             	mov    0x14(%ebp),%eax
c010d51a:	8d 50 04             	lea    0x4(%eax),%edx
c010d51d:	89 55 14             	mov    %edx,0x14(%ebp)
c010d520:	8b 30                	mov    (%eax),%esi
c010d522:	85 f6                	test   %esi,%esi
c010d524:	75 05                	jne    c010d52b <vprintfmt+0x1a3>
                p = "(null)";
c010d526:	be c1 0b 11 c0       	mov    $0xc0110bc1,%esi
            }
            if (width > 0 && padc != '-') {
c010d52b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d52f:	7e 76                	jle    c010d5a7 <vprintfmt+0x21f>
c010d531:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010d535:	74 70                	je     c010d5a7 <vprintfmt+0x21f>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010d537:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d53a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d53e:	89 34 24             	mov    %esi,(%esp)
c010d541:	e8 ee 03 00 00       	call   c010d934 <strnlen>
c010d546:	89 c2                	mov    %eax,%edx
c010d548:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d54b:	29 d0                	sub    %edx,%eax
c010d54d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d550:	eb 16                	jmp    c010d568 <vprintfmt+0x1e0>
                    putch(padc, putdat);
c010d552:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010d556:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d559:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d55d:	89 04 24             	mov    %eax,(%esp)
c010d560:	8b 45 08             	mov    0x8(%ebp),%eax
c010d563:	ff d0                	call   *%eax
                for (width -= strnlen(p, precision); width > 0; width --) {
c010d565:	ff 4d e8             	decl   -0x18(%ebp)
c010d568:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d56c:	7f e4                	jg     c010d552 <vprintfmt+0x1ca>
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010d56e:	eb 37                	jmp    c010d5a7 <vprintfmt+0x21f>
                if (altflag && (ch < ' ' || ch > '~')) {
c010d570:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010d574:	74 1f                	je     c010d595 <vprintfmt+0x20d>
c010d576:	83 fb 1f             	cmp    $0x1f,%ebx
c010d579:	7e 05                	jle    c010d580 <vprintfmt+0x1f8>
c010d57b:	83 fb 7e             	cmp    $0x7e,%ebx
c010d57e:	7e 15                	jle    c010d595 <vprintfmt+0x20d>
                    putch('?', putdat);
c010d580:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d583:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d587:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010d58e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d591:	ff d0                	call   *%eax
c010d593:	eb 0f                	jmp    c010d5a4 <vprintfmt+0x21c>
                }
                else {
                    putch(ch, putdat);
c010d595:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d598:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d59c:	89 1c 24             	mov    %ebx,(%esp)
c010d59f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5a2:	ff d0                	call   *%eax
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010d5a4:	ff 4d e8             	decl   -0x18(%ebp)
c010d5a7:	89 f0                	mov    %esi,%eax
c010d5a9:	8d 70 01             	lea    0x1(%eax),%esi
c010d5ac:	0f b6 00             	movzbl (%eax),%eax
c010d5af:	0f be d8             	movsbl %al,%ebx
c010d5b2:	85 db                	test   %ebx,%ebx
c010d5b4:	74 27                	je     c010d5dd <vprintfmt+0x255>
c010d5b6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d5ba:	78 b4                	js     c010d570 <vprintfmt+0x1e8>
c010d5bc:	ff 4d e4             	decl   -0x1c(%ebp)
c010d5bf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d5c3:	79 ab                	jns    c010d570 <vprintfmt+0x1e8>
                }
            }
            for (; width > 0; width --) {
c010d5c5:	eb 16                	jmp    c010d5dd <vprintfmt+0x255>
                putch(' ', putdat);
c010d5c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d5ca:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d5ce:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010d5d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5d8:	ff d0                	call   *%eax
            for (; width > 0; width --) {
c010d5da:	ff 4d e8             	decl   -0x18(%ebp)
c010d5dd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d5e1:	7f e4                	jg     c010d5c7 <vprintfmt+0x23f>
            }
            break;
c010d5e3:	e9 6c 01 00 00       	jmp    c010d754 <vprintfmt+0x3cc>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010d5e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d5eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d5ef:	8d 45 14             	lea    0x14(%ebp),%eax
c010d5f2:	89 04 24             	mov    %eax,(%esp)
c010d5f5:	e8 16 fd ff ff       	call   c010d310 <getint>
c010d5fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d5fd:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010d600:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d603:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d606:	85 d2                	test   %edx,%edx
c010d608:	79 26                	jns    c010d630 <vprintfmt+0x2a8>
                putch('-', putdat);
c010d60a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d60d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d611:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010d618:	8b 45 08             	mov    0x8(%ebp),%eax
c010d61b:	ff d0                	call   *%eax
                num = -(long long)num;
c010d61d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d620:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d623:	f7 d8                	neg    %eax
c010d625:	83 d2 00             	adc    $0x0,%edx
c010d628:	f7 da                	neg    %edx
c010d62a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d62d:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010d630:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010d637:	e9 a8 00 00 00       	jmp    c010d6e4 <vprintfmt+0x35c>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010d63c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d63f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d643:	8d 45 14             	lea    0x14(%ebp),%eax
c010d646:	89 04 24             	mov    %eax,(%esp)
c010d649:	e8 73 fc ff ff       	call   c010d2c1 <getuint>
c010d64e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d651:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010d654:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010d65b:	e9 84 00 00 00       	jmp    c010d6e4 <vprintfmt+0x35c>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010d660:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d663:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d667:	8d 45 14             	lea    0x14(%ebp),%eax
c010d66a:	89 04 24             	mov    %eax,(%esp)
c010d66d:	e8 4f fc ff ff       	call   c010d2c1 <getuint>
c010d672:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d675:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010d678:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010d67f:	eb 63                	jmp    c010d6e4 <vprintfmt+0x35c>

        // pointer
        case 'p':
            putch('0', putdat);
c010d681:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d684:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d688:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010d68f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d692:	ff d0                	call   *%eax
            putch('x', putdat);
c010d694:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d697:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d69b:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010d6a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6a5:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010d6a7:	8b 45 14             	mov    0x14(%ebp),%eax
c010d6aa:	8d 50 04             	lea    0x4(%eax),%edx
c010d6ad:	89 55 14             	mov    %edx,0x14(%ebp)
c010d6b0:	8b 00                	mov    (%eax),%eax
c010d6b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d6b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010d6bc:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010d6c3:	eb 1f                	jmp    c010d6e4 <vprintfmt+0x35c>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010d6c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d6c8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d6cc:	8d 45 14             	lea    0x14(%ebp),%eax
c010d6cf:	89 04 24             	mov    %eax,(%esp)
c010d6d2:	e8 ea fb ff ff       	call   c010d2c1 <getuint>
c010d6d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d6da:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010d6dd:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010d6e4:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010d6e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d6eb:	89 54 24 18          	mov    %edx,0x18(%esp)
c010d6ef:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d6f2:	89 54 24 14          	mov    %edx,0x14(%esp)
c010d6f6:	89 44 24 10          	mov    %eax,0x10(%esp)
c010d6fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d6fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d700:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d704:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010d708:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d70b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d70f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d712:	89 04 24             	mov    %eax,(%esp)
c010d715:	e8 a5 fa ff ff       	call   c010d1bf <printnum>
            break;
c010d71a:	eb 38                	jmp    c010d754 <vprintfmt+0x3cc>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010d71c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d71f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d723:	89 1c 24             	mov    %ebx,(%esp)
c010d726:	8b 45 08             	mov    0x8(%ebp),%eax
c010d729:	ff d0                	call   *%eax
            break;
c010d72b:	eb 27                	jmp    c010d754 <vprintfmt+0x3cc>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010d72d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d730:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d734:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010d73b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d73e:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010d740:	ff 4d 10             	decl   0x10(%ebp)
c010d743:	eb 03                	jmp    c010d748 <vprintfmt+0x3c0>
c010d745:	ff 4d 10             	decl   0x10(%ebp)
c010d748:	8b 45 10             	mov    0x10(%ebp),%eax
c010d74b:	48                   	dec    %eax
c010d74c:	0f b6 00             	movzbl (%eax),%eax
c010d74f:	3c 25                	cmp    $0x25,%al
c010d751:	75 f2                	jne    c010d745 <vprintfmt+0x3bd>
                /* do nothing */;
            break;
c010d753:	90                   	nop
    while (1) {
c010d754:	e9 37 fc ff ff       	jmp    c010d390 <vprintfmt+0x8>
                return;
c010d759:	90                   	nop
        }
    }
}
c010d75a:	83 c4 40             	add    $0x40,%esp
c010d75d:	5b                   	pop    %ebx
c010d75e:	5e                   	pop    %esi
c010d75f:	5d                   	pop    %ebp
c010d760:	c3                   	ret    

c010d761 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010d761:	55                   	push   %ebp
c010d762:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010d764:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d767:	8b 40 08             	mov    0x8(%eax),%eax
c010d76a:	8d 50 01             	lea    0x1(%eax),%edx
c010d76d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d770:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010d773:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d776:	8b 10                	mov    (%eax),%edx
c010d778:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d77b:	8b 40 04             	mov    0x4(%eax),%eax
c010d77e:	39 c2                	cmp    %eax,%edx
c010d780:	73 12                	jae    c010d794 <sprintputch+0x33>
        *b->buf ++ = ch;
c010d782:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d785:	8b 00                	mov    (%eax),%eax
c010d787:	8d 48 01             	lea    0x1(%eax),%ecx
c010d78a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d78d:	89 0a                	mov    %ecx,(%edx)
c010d78f:	8b 55 08             	mov    0x8(%ebp),%edx
c010d792:	88 10                	mov    %dl,(%eax)
    }
}
c010d794:	90                   	nop
c010d795:	5d                   	pop    %ebp
c010d796:	c3                   	ret    

c010d797 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010d797:	55                   	push   %ebp
c010d798:	89 e5                	mov    %esp,%ebp
c010d79a:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010d79d:	8d 45 14             	lea    0x14(%ebp),%eax
c010d7a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010d7a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7a6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d7aa:	8b 45 10             	mov    0x10(%ebp),%eax
c010d7ad:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d7b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d7b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7bb:	89 04 24             	mov    %eax,(%esp)
c010d7be:	e8 0a 00 00 00       	call   c010d7cd <vsnprintf>
c010d7c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010d7c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d7c9:	89 ec                	mov    %ebp,%esp
c010d7cb:	5d                   	pop    %ebp
c010d7cc:	c3                   	ret    

c010d7cd <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010d7cd:	55                   	push   %ebp
c010d7ce:	89 e5                	mov    %esp,%ebp
c010d7d0:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010d7d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d7d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7dc:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d7df:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7e2:	01 d0                	add    %edx,%eax
c010d7e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d7e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010d7ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d7f2:	74 0a                	je     c010d7fe <vsnprintf+0x31>
c010d7f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d7f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7fa:	39 c2                	cmp    %eax,%edx
c010d7fc:	76 07                	jbe    c010d805 <vsnprintf+0x38>
        return -E_INVAL;
c010d7fe:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d803:	eb 2a                	jmp    c010d82f <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010d805:	8b 45 14             	mov    0x14(%ebp),%eax
c010d808:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d80c:	8b 45 10             	mov    0x10(%ebp),%eax
c010d80f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d813:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010d816:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d81a:	c7 04 24 61 d7 10 c0 	movl   $0xc010d761,(%esp)
c010d821:	e8 62 fb ff ff       	call   c010d388 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010d826:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d829:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010d82c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d82f:	89 ec                	mov    %ebp,%esp
c010d831:	5d                   	pop    %ebp
c010d832:	c3                   	ret    

c010d833 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010d833:	55                   	push   %ebp
c010d834:	89 e5                	mov    %esp,%ebp
c010d836:	57                   	push   %edi
c010d837:	56                   	push   %esi
c010d838:	53                   	push   %ebx
c010d839:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010d83c:	a1 c0 9e 13 c0       	mov    0xc0139ec0,%eax
c010d841:	8b 15 c4 9e 13 c0    	mov    0xc0139ec4,%edx
c010d847:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010d84d:	6b f0 05             	imul   $0x5,%eax,%esi
c010d850:	01 fe                	add    %edi,%esi
c010d852:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c010d857:	f7 e7                	mul    %edi
c010d859:	01 d6                	add    %edx,%esi
c010d85b:	89 f2                	mov    %esi,%edx
c010d85d:	83 c0 0b             	add    $0xb,%eax
c010d860:	83 d2 00             	adc    $0x0,%edx
c010d863:	89 c7                	mov    %eax,%edi
c010d865:	83 e7 ff             	and    $0xffffffff,%edi
c010d868:	89 f9                	mov    %edi,%ecx
c010d86a:	0f b7 da             	movzwl %dx,%ebx
c010d86d:	89 0d c0 9e 13 c0    	mov    %ecx,0xc0139ec0
c010d873:	89 1d c4 9e 13 c0    	mov    %ebx,0xc0139ec4
    unsigned long long result = (next >> 12);
c010d879:	a1 c0 9e 13 c0       	mov    0xc0139ec0,%eax
c010d87e:	8b 15 c4 9e 13 c0    	mov    0xc0139ec4,%edx
c010d884:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010d888:	c1 ea 0c             	shr    $0xc,%edx
c010d88b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d88e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010d891:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010d898:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d89b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d89e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d8a1:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010d8a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d8a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d8aa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d8ae:	74 1c                	je     c010d8cc <rand+0x99>
c010d8b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d8b3:	ba 00 00 00 00       	mov    $0x0,%edx
c010d8b8:	f7 75 dc             	divl   -0x24(%ebp)
c010d8bb:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010d8be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d8c1:	ba 00 00 00 00       	mov    $0x0,%edx
c010d8c6:	f7 75 dc             	divl   -0x24(%ebp)
c010d8c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d8cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d8cf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d8d2:	f7 75 dc             	divl   -0x24(%ebp)
c010d8d5:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d8d8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d8db:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d8de:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d8e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d8e4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010d8e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010d8ea:	83 c4 24             	add    $0x24,%esp
c010d8ed:	5b                   	pop    %ebx
c010d8ee:	5e                   	pop    %esi
c010d8ef:	5f                   	pop    %edi
c010d8f0:	5d                   	pop    %ebp
c010d8f1:	c3                   	ret    

c010d8f2 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010d8f2:	55                   	push   %ebp
c010d8f3:	89 e5                	mov    %esp,%ebp
    next = seed;
c010d8f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8f8:	ba 00 00 00 00       	mov    $0x0,%edx
c010d8fd:	a3 c0 9e 13 c0       	mov    %eax,0xc0139ec0
c010d902:	89 15 c4 9e 13 c0    	mov    %edx,0xc0139ec4
}
c010d908:	90                   	nop
c010d909:	5d                   	pop    %ebp
c010d90a:	c3                   	ret    

c010d90b <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010d90b:	55                   	push   %ebp
c010d90c:	89 e5                	mov    %esp,%ebp
c010d90e:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d911:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010d918:	eb 03                	jmp    c010d91d <strlen+0x12>
        cnt ++;
c010d91a:	ff 45 fc             	incl   -0x4(%ebp)
    while (*s ++ != '\0') {
c010d91d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d920:	8d 50 01             	lea    0x1(%eax),%edx
c010d923:	89 55 08             	mov    %edx,0x8(%ebp)
c010d926:	0f b6 00             	movzbl (%eax),%eax
c010d929:	84 c0                	test   %al,%al
c010d92b:	75 ed                	jne    c010d91a <strlen+0xf>
    }
    return cnt;
c010d92d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d930:	89 ec                	mov    %ebp,%esp
c010d932:	5d                   	pop    %ebp
c010d933:	c3                   	ret    

c010d934 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010d934:	55                   	push   %ebp
c010d935:	89 e5                	mov    %esp,%ebp
c010d937:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d93a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010d941:	eb 03                	jmp    c010d946 <strnlen+0x12>
        cnt ++;
c010d943:	ff 45 fc             	incl   -0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010d946:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d949:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d94c:	73 10                	jae    c010d95e <strnlen+0x2a>
c010d94e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d951:	8d 50 01             	lea    0x1(%eax),%edx
c010d954:	89 55 08             	mov    %edx,0x8(%ebp)
c010d957:	0f b6 00             	movzbl (%eax),%eax
c010d95a:	84 c0                	test   %al,%al
c010d95c:	75 e5                	jne    c010d943 <strnlen+0xf>
    }
    return cnt;
c010d95e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d961:	89 ec                	mov    %ebp,%esp
c010d963:	5d                   	pop    %ebp
c010d964:	c3                   	ret    

c010d965 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010d965:	55                   	push   %ebp
c010d966:	89 e5                	mov    %esp,%ebp
c010d968:	57                   	push   %edi
c010d969:	56                   	push   %esi
c010d96a:	83 ec 20             	sub    $0x20,%esp
c010d96d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d970:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d973:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d976:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010d979:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d97c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d97f:	89 d1                	mov    %edx,%ecx
c010d981:	89 c2                	mov    %eax,%edx
c010d983:	89 ce                	mov    %ecx,%esi
c010d985:	89 d7                	mov    %edx,%edi
c010d987:	ac                   	lods   %ds:(%esi),%al
c010d988:	aa                   	stos   %al,%es:(%edi)
c010d989:	84 c0                	test   %al,%al
c010d98b:	75 fa                	jne    c010d987 <strcpy+0x22>
c010d98d:	89 fa                	mov    %edi,%edx
c010d98f:	89 f1                	mov    %esi,%ecx
c010d991:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d994:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010d997:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010d99a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010d99d:	83 c4 20             	add    $0x20,%esp
c010d9a0:	5e                   	pop    %esi
c010d9a1:	5f                   	pop    %edi
c010d9a2:	5d                   	pop    %ebp
c010d9a3:	c3                   	ret    

c010d9a4 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010d9a4:	55                   	push   %ebp
c010d9a5:	89 e5                	mov    %esp,%ebp
c010d9a7:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010d9aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9ad:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010d9b0:	eb 1e                	jmp    c010d9d0 <strncpy+0x2c>
        if ((*p = *src) != '\0') {
c010d9b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d9b5:	0f b6 10             	movzbl (%eax),%edx
c010d9b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d9bb:	88 10                	mov    %dl,(%eax)
c010d9bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d9c0:	0f b6 00             	movzbl (%eax),%eax
c010d9c3:	84 c0                	test   %al,%al
c010d9c5:	74 03                	je     c010d9ca <strncpy+0x26>
            src ++;
c010d9c7:	ff 45 0c             	incl   0xc(%ebp)
        }
        p ++, len --;
c010d9ca:	ff 45 fc             	incl   -0x4(%ebp)
c010d9cd:	ff 4d 10             	decl   0x10(%ebp)
    while (len > 0) {
c010d9d0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d9d4:	75 dc                	jne    c010d9b2 <strncpy+0xe>
    }
    return dst;
c010d9d6:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d9d9:	89 ec                	mov    %ebp,%esp
c010d9db:	5d                   	pop    %ebp
c010d9dc:	c3                   	ret    

c010d9dd <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010d9dd:	55                   	push   %ebp
c010d9de:	89 e5                	mov    %esp,%ebp
c010d9e0:	57                   	push   %edi
c010d9e1:	56                   	push   %esi
c010d9e2:	83 ec 20             	sub    $0x20,%esp
c010d9e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d9eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d9ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile (
c010d9f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d9f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d9f7:	89 d1                	mov    %edx,%ecx
c010d9f9:	89 c2                	mov    %eax,%edx
c010d9fb:	89 ce                	mov    %ecx,%esi
c010d9fd:	89 d7                	mov    %edx,%edi
c010d9ff:	ac                   	lods   %ds:(%esi),%al
c010da00:	ae                   	scas   %es:(%edi),%al
c010da01:	75 08                	jne    c010da0b <strcmp+0x2e>
c010da03:	84 c0                	test   %al,%al
c010da05:	75 f8                	jne    c010d9ff <strcmp+0x22>
c010da07:	31 c0                	xor    %eax,%eax
c010da09:	eb 04                	jmp    c010da0f <strcmp+0x32>
c010da0b:	19 c0                	sbb    %eax,%eax
c010da0d:	0c 01                	or     $0x1,%al
c010da0f:	89 fa                	mov    %edi,%edx
c010da11:	89 f1                	mov    %esi,%ecx
c010da13:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010da16:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010da19:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return ret;
c010da1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010da1f:	83 c4 20             	add    $0x20,%esp
c010da22:	5e                   	pop    %esi
c010da23:	5f                   	pop    %edi
c010da24:	5d                   	pop    %ebp
c010da25:	c3                   	ret    

c010da26 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010da26:	55                   	push   %ebp
c010da27:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010da29:	eb 09                	jmp    c010da34 <strncmp+0xe>
        n --, s1 ++, s2 ++;
c010da2b:	ff 4d 10             	decl   0x10(%ebp)
c010da2e:	ff 45 08             	incl   0x8(%ebp)
c010da31:	ff 45 0c             	incl   0xc(%ebp)
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010da34:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010da38:	74 1a                	je     c010da54 <strncmp+0x2e>
c010da3a:	8b 45 08             	mov    0x8(%ebp),%eax
c010da3d:	0f b6 00             	movzbl (%eax),%eax
c010da40:	84 c0                	test   %al,%al
c010da42:	74 10                	je     c010da54 <strncmp+0x2e>
c010da44:	8b 45 08             	mov    0x8(%ebp),%eax
c010da47:	0f b6 10             	movzbl (%eax),%edx
c010da4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da4d:	0f b6 00             	movzbl (%eax),%eax
c010da50:	38 c2                	cmp    %al,%dl
c010da52:	74 d7                	je     c010da2b <strncmp+0x5>
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010da54:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010da58:	74 18                	je     c010da72 <strncmp+0x4c>
c010da5a:	8b 45 08             	mov    0x8(%ebp),%eax
c010da5d:	0f b6 00             	movzbl (%eax),%eax
c010da60:	0f b6 d0             	movzbl %al,%edx
c010da63:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da66:	0f b6 00             	movzbl (%eax),%eax
c010da69:	0f b6 c8             	movzbl %al,%ecx
c010da6c:	89 d0                	mov    %edx,%eax
c010da6e:	29 c8                	sub    %ecx,%eax
c010da70:	eb 05                	jmp    c010da77 <strncmp+0x51>
c010da72:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010da77:	5d                   	pop    %ebp
c010da78:	c3                   	ret    

c010da79 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010da79:	55                   	push   %ebp
c010da7a:	89 e5                	mov    %esp,%ebp
c010da7c:	83 ec 04             	sub    $0x4,%esp
c010da7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da82:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010da85:	eb 13                	jmp    c010da9a <strchr+0x21>
        if (*s == c) {
c010da87:	8b 45 08             	mov    0x8(%ebp),%eax
c010da8a:	0f b6 00             	movzbl (%eax),%eax
c010da8d:	38 45 fc             	cmp    %al,-0x4(%ebp)
c010da90:	75 05                	jne    c010da97 <strchr+0x1e>
            return (char *)s;
c010da92:	8b 45 08             	mov    0x8(%ebp),%eax
c010da95:	eb 12                	jmp    c010daa9 <strchr+0x30>
        }
        s ++;
c010da97:	ff 45 08             	incl   0x8(%ebp)
    while (*s != '\0') {
c010da9a:	8b 45 08             	mov    0x8(%ebp),%eax
c010da9d:	0f b6 00             	movzbl (%eax),%eax
c010daa0:	84 c0                	test   %al,%al
c010daa2:	75 e3                	jne    c010da87 <strchr+0xe>
    }
    return NULL;
c010daa4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010daa9:	89 ec                	mov    %ebp,%esp
c010daab:	5d                   	pop    %ebp
c010daac:	c3                   	ret    

c010daad <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010daad:	55                   	push   %ebp
c010daae:	89 e5                	mov    %esp,%ebp
c010dab0:	83 ec 04             	sub    $0x4,%esp
c010dab3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dab6:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010dab9:	eb 0e                	jmp    c010dac9 <strfind+0x1c>
        if (*s == c) {
c010dabb:	8b 45 08             	mov    0x8(%ebp),%eax
c010dabe:	0f b6 00             	movzbl (%eax),%eax
c010dac1:	38 45 fc             	cmp    %al,-0x4(%ebp)
c010dac4:	74 0f                	je     c010dad5 <strfind+0x28>
            break;
        }
        s ++;
c010dac6:	ff 45 08             	incl   0x8(%ebp)
    while (*s != '\0') {
c010dac9:	8b 45 08             	mov    0x8(%ebp),%eax
c010dacc:	0f b6 00             	movzbl (%eax),%eax
c010dacf:	84 c0                	test   %al,%al
c010dad1:	75 e8                	jne    c010dabb <strfind+0xe>
c010dad3:	eb 01                	jmp    c010dad6 <strfind+0x29>
            break;
c010dad5:	90                   	nop
    }
    return (char *)s;
c010dad6:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010dad9:	89 ec                	mov    %ebp,%esp
c010dadb:	5d                   	pop    %ebp
c010dadc:	c3                   	ret    

c010dadd <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010dadd:	55                   	push   %ebp
c010dade:	89 e5                	mov    %esp,%ebp
c010dae0:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010dae3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010daea:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010daf1:	eb 03                	jmp    c010daf6 <strtol+0x19>
        s ++;
c010daf3:	ff 45 08             	incl   0x8(%ebp)
    while (*s == ' ' || *s == '\t') {
c010daf6:	8b 45 08             	mov    0x8(%ebp),%eax
c010daf9:	0f b6 00             	movzbl (%eax),%eax
c010dafc:	3c 20                	cmp    $0x20,%al
c010dafe:	74 f3                	je     c010daf3 <strtol+0x16>
c010db00:	8b 45 08             	mov    0x8(%ebp),%eax
c010db03:	0f b6 00             	movzbl (%eax),%eax
c010db06:	3c 09                	cmp    $0x9,%al
c010db08:	74 e9                	je     c010daf3 <strtol+0x16>
    }

    // plus/minus sign
    if (*s == '+') {
c010db0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010db0d:	0f b6 00             	movzbl (%eax),%eax
c010db10:	3c 2b                	cmp    $0x2b,%al
c010db12:	75 05                	jne    c010db19 <strtol+0x3c>
        s ++;
c010db14:	ff 45 08             	incl   0x8(%ebp)
c010db17:	eb 14                	jmp    c010db2d <strtol+0x50>
    }
    else if (*s == '-') {
c010db19:	8b 45 08             	mov    0x8(%ebp),%eax
c010db1c:	0f b6 00             	movzbl (%eax),%eax
c010db1f:	3c 2d                	cmp    $0x2d,%al
c010db21:	75 0a                	jne    c010db2d <strtol+0x50>
        s ++, neg = 1;
c010db23:	ff 45 08             	incl   0x8(%ebp)
c010db26:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010db2d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010db31:	74 06                	je     c010db39 <strtol+0x5c>
c010db33:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010db37:	75 22                	jne    c010db5b <strtol+0x7e>
c010db39:	8b 45 08             	mov    0x8(%ebp),%eax
c010db3c:	0f b6 00             	movzbl (%eax),%eax
c010db3f:	3c 30                	cmp    $0x30,%al
c010db41:	75 18                	jne    c010db5b <strtol+0x7e>
c010db43:	8b 45 08             	mov    0x8(%ebp),%eax
c010db46:	40                   	inc    %eax
c010db47:	0f b6 00             	movzbl (%eax),%eax
c010db4a:	3c 78                	cmp    $0x78,%al
c010db4c:	75 0d                	jne    c010db5b <strtol+0x7e>
        s += 2, base = 16;
c010db4e:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010db52:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010db59:	eb 29                	jmp    c010db84 <strtol+0xa7>
    }
    else if (base == 0 && s[0] == '0') {
c010db5b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010db5f:	75 16                	jne    c010db77 <strtol+0x9a>
c010db61:	8b 45 08             	mov    0x8(%ebp),%eax
c010db64:	0f b6 00             	movzbl (%eax),%eax
c010db67:	3c 30                	cmp    $0x30,%al
c010db69:	75 0c                	jne    c010db77 <strtol+0x9a>
        s ++, base = 8;
c010db6b:	ff 45 08             	incl   0x8(%ebp)
c010db6e:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010db75:	eb 0d                	jmp    c010db84 <strtol+0xa7>
    }
    else if (base == 0) {
c010db77:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010db7b:	75 07                	jne    c010db84 <strtol+0xa7>
        base = 10;
c010db7d:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010db84:	8b 45 08             	mov    0x8(%ebp),%eax
c010db87:	0f b6 00             	movzbl (%eax),%eax
c010db8a:	3c 2f                	cmp    $0x2f,%al
c010db8c:	7e 1b                	jle    c010dba9 <strtol+0xcc>
c010db8e:	8b 45 08             	mov    0x8(%ebp),%eax
c010db91:	0f b6 00             	movzbl (%eax),%eax
c010db94:	3c 39                	cmp    $0x39,%al
c010db96:	7f 11                	jg     c010dba9 <strtol+0xcc>
            dig = *s - '0';
c010db98:	8b 45 08             	mov    0x8(%ebp),%eax
c010db9b:	0f b6 00             	movzbl (%eax),%eax
c010db9e:	0f be c0             	movsbl %al,%eax
c010dba1:	83 e8 30             	sub    $0x30,%eax
c010dba4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dba7:	eb 48                	jmp    c010dbf1 <strtol+0x114>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010dba9:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbac:	0f b6 00             	movzbl (%eax),%eax
c010dbaf:	3c 60                	cmp    $0x60,%al
c010dbb1:	7e 1b                	jle    c010dbce <strtol+0xf1>
c010dbb3:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbb6:	0f b6 00             	movzbl (%eax),%eax
c010dbb9:	3c 7a                	cmp    $0x7a,%al
c010dbbb:	7f 11                	jg     c010dbce <strtol+0xf1>
            dig = *s - 'a' + 10;
c010dbbd:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbc0:	0f b6 00             	movzbl (%eax),%eax
c010dbc3:	0f be c0             	movsbl %al,%eax
c010dbc6:	83 e8 57             	sub    $0x57,%eax
c010dbc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dbcc:	eb 23                	jmp    c010dbf1 <strtol+0x114>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010dbce:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbd1:	0f b6 00             	movzbl (%eax),%eax
c010dbd4:	3c 40                	cmp    $0x40,%al
c010dbd6:	7e 3b                	jle    c010dc13 <strtol+0x136>
c010dbd8:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbdb:	0f b6 00             	movzbl (%eax),%eax
c010dbde:	3c 5a                	cmp    $0x5a,%al
c010dbe0:	7f 31                	jg     c010dc13 <strtol+0x136>
            dig = *s - 'A' + 10;
c010dbe2:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbe5:	0f b6 00             	movzbl (%eax),%eax
c010dbe8:	0f be c0             	movsbl %al,%eax
c010dbeb:	83 e8 37             	sub    $0x37,%eax
c010dbee:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010dbf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbf4:	3b 45 10             	cmp    0x10(%ebp),%eax
c010dbf7:	7d 19                	jge    c010dc12 <strtol+0x135>
            break;
        }
        s ++, val = (val * base) + dig;
c010dbf9:	ff 45 08             	incl   0x8(%ebp)
c010dbfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dbff:	0f af 45 10          	imul   0x10(%ebp),%eax
c010dc03:	89 c2                	mov    %eax,%edx
c010dc05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dc08:	01 d0                	add    %edx,%eax
c010dc0a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (1) {
c010dc0d:	e9 72 ff ff ff       	jmp    c010db84 <strtol+0xa7>
            break;
c010dc12:	90                   	nop
        // we don't properly detect overflow!
    }

    if (endptr) {
c010dc13:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010dc17:	74 08                	je     c010dc21 <strtol+0x144>
        *endptr = (char *) s;
c010dc19:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc1c:	8b 55 08             	mov    0x8(%ebp),%edx
c010dc1f:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010dc21:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010dc25:	74 07                	je     c010dc2e <strtol+0x151>
c010dc27:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dc2a:	f7 d8                	neg    %eax
c010dc2c:	eb 03                	jmp    c010dc31 <strtol+0x154>
c010dc2e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010dc31:	89 ec                	mov    %ebp,%esp
c010dc33:	5d                   	pop    %ebp
c010dc34:	c3                   	ret    

c010dc35 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010dc35:	55                   	push   %ebp
c010dc36:	89 e5                	mov    %esp,%ebp
c010dc38:	83 ec 28             	sub    $0x28,%esp
c010dc3b:	89 7d fc             	mov    %edi,-0x4(%ebp)
c010dc3e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc41:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010dc44:	0f be 55 d8          	movsbl -0x28(%ebp),%edx
c010dc48:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc4b:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010dc4e:	88 55 f7             	mov    %dl,-0x9(%ebp)
c010dc51:	8b 45 10             	mov    0x10(%ebp),%eax
c010dc54:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010dc57:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010dc5a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010dc5e:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010dc61:	89 d7                	mov    %edx,%edi
c010dc63:	f3 aa                	rep stos %al,%es:(%edi)
c010dc65:	89 fa                	mov    %edi,%edx
c010dc67:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010dc6a:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010dc6d:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010dc70:	8b 7d fc             	mov    -0x4(%ebp),%edi
c010dc73:	89 ec                	mov    %ebp,%esp
c010dc75:	5d                   	pop    %ebp
c010dc76:	c3                   	ret    

c010dc77 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010dc77:	55                   	push   %ebp
c010dc78:	89 e5                	mov    %esp,%ebp
c010dc7a:	57                   	push   %edi
c010dc7b:	56                   	push   %esi
c010dc7c:	53                   	push   %ebx
c010dc7d:	83 ec 30             	sub    $0x30,%esp
c010dc80:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc83:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010dc86:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc89:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010dc8c:	8b 45 10             	mov    0x10(%ebp),%eax
c010dc8f:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010dc92:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dc95:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010dc98:	73 42                	jae    c010dcdc <memmove+0x65>
c010dc9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dc9d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010dca0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dca3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010dca6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dca9:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010dcac:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010dcaf:	c1 e8 02             	shr    $0x2,%eax
c010dcb2:	89 c1                	mov    %eax,%ecx
    asm volatile (
c010dcb4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010dcb7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010dcba:	89 d7                	mov    %edx,%edi
c010dcbc:	89 c6                	mov    %eax,%esi
c010dcbe:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010dcc0:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010dcc3:	83 e1 03             	and    $0x3,%ecx
c010dcc6:	74 02                	je     c010dcca <memmove+0x53>
c010dcc8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010dcca:	89 f0                	mov    %esi,%eax
c010dccc:	89 fa                	mov    %edi,%edx
c010dcce:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010dcd1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010dcd4:	89 45 d0             	mov    %eax,-0x30(%ebp)
        : "memory");
    return dst;
c010dcd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
        return __memcpy(dst, src, n);
c010dcda:	eb 36                	jmp    c010dd12 <memmove+0x9b>
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010dcdc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dcdf:	8d 50 ff             	lea    -0x1(%eax),%edx
c010dce2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dce5:	01 c2                	add    %eax,%edx
c010dce7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dcea:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010dced:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dcf0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
    asm volatile (
c010dcf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dcf6:	89 c1                	mov    %eax,%ecx
c010dcf8:	89 d8                	mov    %ebx,%eax
c010dcfa:	89 d6                	mov    %edx,%esi
c010dcfc:	89 c7                	mov    %eax,%edi
c010dcfe:	fd                   	std    
c010dcff:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010dd01:	fc                   	cld    
c010dd02:	89 f8                	mov    %edi,%eax
c010dd04:	89 f2                	mov    %esi,%edx
c010dd06:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010dd09:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010dd0c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    return dst;
c010dd0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010dd12:	83 c4 30             	add    $0x30,%esp
c010dd15:	5b                   	pop    %ebx
c010dd16:	5e                   	pop    %esi
c010dd17:	5f                   	pop    %edi
c010dd18:	5d                   	pop    %ebp
c010dd19:	c3                   	ret    

c010dd1a <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010dd1a:	55                   	push   %ebp
c010dd1b:	89 e5                	mov    %esp,%ebp
c010dd1d:	57                   	push   %edi
c010dd1e:	56                   	push   %esi
c010dd1f:	83 ec 20             	sub    $0x20,%esp
c010dd22:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd25:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dd28:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010dd2e:	8b 45 10             	mov    0x10(%ebp),%eax
c010dd31:	89 45 ec             	mov    %eax,-0x14(%ebp)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010dd34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dd37:	c1 e8 02             	shr    $0x2,%eax
c010dd3a:	89 c1                	mov    %eax,%ecx
    asm volatile (
c010dd3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010dd3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dd42:	89 d7                	mov    %edx,%edi
c010dd44:	89 c6                	mov    %eax,%esi
c010dd46:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010dd48:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010dd4b:	83 e1 03             	and    $0x3,%ecx
c010dd4e:	74 02                	je     c010dd52 <memcpy+0x38>
c010dd50:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010dd52:	89 f0                	mov    %esi,%eax
c010dd54:	89 fa                	mov    %edi,%edx
c010dd56:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010dd59:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010dd5c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return dst;
c010dd5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010dd62:	83 c4 20             	add    $0x20,%esp
c010dd65:	5e                   	pop    %esi
c010dd66:	5f                   	pop    %edi
c010dd67:	5d                   	pop    %ebp
c010dd68:	c3                   	ret    

c010dd69 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010dd69:	55                   	push   %ebp
c010dd6a:	89 e5                	mov    %esp,%ebp
c010dd6c:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010dd6f:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd72:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010dd75:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd78:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010dd7b:	eb 2e                	jmp    c010ddab <memcmp+0x42>
        if (*s1 != *s2) {
c010dd7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dd80:	0f b6 10             	movzbl (%eax),%edx
c010dd83:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dd86:	0f b6 00             	movzbl (%eax),%eax
c010dd89:	38 c2                	cmp    %al,%dl
c010dd8b:	74 18                	je     c010dda5 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010dd8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dd90:	0f b6 00             	movzbl (%eax),%eax
c010dd93:	0f b6 d0             	movzbl %al,%edx
c010dd96:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dd99:	0f b6 00             	movzbl (%eax),%eax
c010dd9c:	0f b6 c8             	movzbl %al,%ecx
c010dd9f:	89 d0                	mov    %edx,%eax
c010dda1:	29 c8                	sub    %ecx,%eax
c010dda3:	eb 18                	jmp    c010ddbd <memcmp+0x54>
        }
        s1 ++, s2 ++;
c010dda5:	ff 45 fc             	incl   -0x4(%ebp)
c010dda8:	ff 45 f8             	incl   -0x8(%ebp)
    while (n -- > 0) {
c010ddab:	8b 45 10             	mov    0x10(%ebp),%eax
c010ddae:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ddb1:	89 55 10             	mov    %edx,0x10(%ebp)
c010ddb4:	85 c0                	test   %eax,%eax
c010ddb6:	75 c5                	jne    c010dd7d <memcmp+0x14>
    }
    return 0;
c010ddb8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ddbd:	89 ec                	mov    %ebp,%esp
c010ddbf:	5d                   	pop    %ebp
c010ddc0:	c3                   	ret    
